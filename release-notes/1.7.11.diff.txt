diff --git a/package.json b/package.json
index d173188..4363448 100644
--- a/package.json
+++ b/package.json
@@ -2,3 +2,3 @@
     "name": "@flatfile/api",
-    "version": "1.7.10",
+    "version": "1.7.11",
     "private": false,
diff --git a/src/Client.ts b/src/Client.ts
index fa54458..cb04dd8 100644
--- a/src/Client.ts
+++ b/src/Client.ts
@@ -9,2 +9,3 @@ import { Agents } from "./api/resources/agents/client/Client";
 import { Apps } from "./api/resources/apps/client/Client";
+import { Assistant } from "./api/resources/assistant/client/Client";
 import { Auth } from "./api/resources/auth/client/Client";
@@ -66,2 +67,8 @@ export class FlatfileClient {
 
+    protected _assistant: Assistant | undefined;
+
+    public get assistant(): Assistant {
+        return (this._assistant ??= new Assistant(this._options));
+    }
+
     protected _auth: Auth | undefined;
diff --git a/src/api/resources/accounts/client/Client.ts b/src/api/resources/accounts/client/Client.ts
index 249cff0..9ddf2d1 100644
--- a/src/api/resources/accounts/client/Client.ts
+++ b/src/api/resources/accounts/client/Client.ts
@@ -45,3 +45,3 @@ export class Accounts {
@@ -108,3 +108,3 @@ export class Accounts {
diff --git a/src/api/resources/agents/client/Client.ts b/src/api/resources/agents/client/Client.ts
index 1097e60..6f4f2cd 100644
--- a/src/api/resources/agents/client/Client.ts
+++ b/src/api/resources/agents/client/Client.ts
@@ -45,3 +45,3 @@ export class Agents {
@@ -127,3 +127,3 @@ export class Agents {
@@ -210,3 +210,3 @@ export class Agents {
@@ -295,3 +295,3 @@ export class Agents {
@@ -390,3 +390,3 @@ export class Agents {
@@ -488,3 +488,3 @@ export class Agents {
@@ -589,3 +589,3 @@ export class Agents {
@@ -681,3 +681,3 @@ export class Agents {
@@ -792,3 +792,3 @@ export class Agents {
@@ -903,3 +903,3 @@ export class Agents {
@@ -996,3 +996,3 @@ export class Agents {
diff --git a/src/api/resources/apps/client/Client.ts b/src/api/resources/apps/client/Client.ts
index 0daf0a9..d74f406 100644
--- a/src/api/resources/apps/client/Client.ts
+++ b/src/api/resources/apps/client/Client.ts
@@ -42,3 +42,3 @@ export class Apps {
@@ -100,3 +100,3 @@ export class Apps {
@@ -171,3 +171,3 @@ export class Apps {
@@ -243,3 +243,3 @@ export class Apps {
diff --git a/src/api/resources/assistant/client/Client.ts b/src/api/resources/assistant/client/Client.ts
new file mode 100644
index 0000000..f45e7d6
--- /dev/null
+++ b/src/api/resources/assistant/client/Client.ts
@@ -0,0 +1,359 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as environments from "../../../../environments";
+import * as core from "../../../../core";
+import * as Flatfile from "../../..";
+import urlJoin from "url-join";
+import * as serializers from "../../../../serialization";
+import * as errors from "../../../../errors";
+
+export declare namespace Assistant {
+    interface Options {
+        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
+        token?: core.Supplier<core.BearerToken | undefined>;
+        fetcher?: core.FetchFunction;
+    }
+
+    interface RequestOptions {
+        timeoutInSeconds?: number;
+        maxRetries?: number;
+    }
+}
+
+export class Assistant {
+    constructor(protected readonly _options: Assistant.Options = {}) {}
+
+    /**
+     * Returns prompts created by user
+     *
+     * @example
+     *     await flatfile.assistant.list()
+     */
+    public async list(
+        request: Flatfile.ListPromptsRequest = {},
+        requestOptions?: Assistant.RequestOptions
+    ): Promise<Flatfile.PromptsResponse> {
+        const { pageSize, pageNumber } = request;
+        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        if (pageSize != null) {
+            _queryParams["pageSize"] = pageSize.toString();
+        }
+
+        if (pageNumber != null) {
+            _queryParams["pageNumber"] = pageNumber.toString();
+        }
+
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                "/prompts"
+            ),
+            method: "GET",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            queryParameters: _queryParams,
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.PromptsResponse.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            throw new errors.FlatfileError({
+                statusCode: _response.error.statusCode,
+                body: _response.error.body,
+            });
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    /**
+     * Returns a prompt
+     *
+     * @example
+     *     await flatfile.assistant.get("us_pr_YOUR_ID")
+     */
+    public async get(
+        promptId: Flatfile.PromptId,
+        requestOptions?: Assistant.RequestOptions
+    ): Promise<Flatfile.PromptResponse> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                `/prompts/${await serializers.PromptId.jsonOrThrow(promptId)}`
+            ),
+            method: "GET",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.PromptResponse.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            throw new errors.FlatfileError({
+                statusCode: _response.error.statusCode,
+                body: _response.error.body,
+            });
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    /**
+     * Updates a prompt
+     *
+     * @example
+     *     await flatfile.assistant.update("us_pr_YOUR_ID", {
+     *         prompt: "Combine first name and last name into a new column called Full Name"
+     *     })
+     */
+    public async update(
+        promptId: Flatfile.PromptId,
+        request: Flatfile.PromptPatch,
+        requestOptions?: Assistant.RequestOptions
+    ): Promise<Flatfile.PromptResponse> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                `/prompts/${await serializers.PromptId.jsonOrThrow(promptId)}`
+            ),
+            method: "PATCH",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            body: await serializers.PromptPatch.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.PromptResponse.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            throw new errors.FlatfileError({
+                statusCode: _response.error.statusCode,
+                body: _response.error.body,
+            });
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    /**
+     * Creates a prompt
+     *
+     * @example
+     *     await flatfile.assistant.create({
+     *         prompt: "Combine first name and last name into a new column called Full Name"
+     *     })
+     */
+    public async create(
+        request: Flatfile.PromptCreate,
+        requestOptions?: Assistant.RequestOptions
+    ): Promise<Flatfile.PromptResponse> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                "/prompts"
+            ),
+            method: "POST",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            body: await serializers.PromptCreate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.PromptResponse.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            throw new errors.FlatfileError({
+                statusCode: _response.error.statusCode,
+                body: _response.error.body,
+            });
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    /**
+     * Deletes a prompts
+     *
+     * @example
+     *     await flatfile.assistant.delete("us_pr_YOUR_ID")
+     */
+    public async delete(
+        promptId: Flatfile.PromptId,
+        requestOptions?: Assistant.RequestOptions
+    ): Promise<Flatfile.Success> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                `/prompts/${await serializers.PromptId.jsonOrThrow(promptId)}`
+            ),
+            method: "DELETE",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.Success.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            throw new errors.FlatfileError({
+                statusCode: _response.error.statusCode,
+                body: _response.error.body,
+            });
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    protected async _getAuthorizationHeader() {
+        const bearer = await core.Supplier.get(this._options.token);
+        if (bearer != null) {
+            return `Bearer ${bearer}`;
+        }
+
+        return undefined;
+    }
+}
diff --git a/src/api/resources/assistant/client/index.ts b/src/api/resources/assistant/client/index.ts
new file mode 100644
index 0000000..415726b
--- /dev/null
+++ b/src/api/resources/assistant/client/index.ts
@@ -0,0 +1 @@
+export * from "./requests";
diff --git a/src/api/resources/assistant/client/requests/ListPromptsRequest.ts b/src/api/resources/assistant/client/requests/ListPromptsRequest.ts
new file mode 100644
index 0000000..f93af5d
--- /dev/null
+++ b/src/api/resources/assistant/client/requests/ListPromptsRequest.ts
@@ -0,0 +1,18 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+/**
+ * @example
+ *     {}
+ */
+export interface ListPromptsRequest {
+    /**
+     * Number of prompts to return in a page (default 7)
+     */
+    pageSize?: number;
+    /**
+     * Based on pageSize, which page of prompts to return
+     */
+    pageNumber?: number;
+}
diff --git a/src/api/resources/assistant/client/requests/index.ts b/src/api/resources/assistant/client/requests/index.ts
new file mode 100644
index 0000000..78a6d76
--- /dev/null
+++ b/src/api/resources/assistant/client/requests/index.ts
@@ -0,0 +1 @@
+export { ListPromptsRequest } from "./ListPromptsRequest";
diff --git a/src/api/resources/assistant/index.ts b/src/api/resources/assistant/index.ts
new file mode 100644
index 0000000..c9240f8
--- /dev/null
+++ b/src/api/resources/assistant/index.ts
@@ -0,0 +1,2 @@
+export * from "./types";
+export * from "./client";
diff --git a/src/api/resources/assistant/types/Prompt.ts b/src/api/resources/assistant/types/Prompt.ts
new file mode 100644
index 0000000..a8702cb
--- /dev/null
+++ b/src/api/resources/assistant/types/Prompt.ts
@@ -0,0 +1,28 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+/**
+ * @example
+ *     {
+ *         id: "us_pr_YOUR_ID",
+ *         createdById: "us_usr_YOUR_ID",
+ *         accountId: "us_acc_YOUR_ID",
+ *         prompt: "Combine first name and last name into a new column called Full Name",
+ *         createdAt: new Date("2021-01-01T00:00:00.000Z"),
+ *         updatedAt: new Date("2021-01-01T00:00:00.000Z")
+ *     }
+ */
+export interface Prompt {
+    id: Flatfile.PromptId;
+    /** ID of the user/guest who created the prompt */
+    createdById: string;
+    accountId: Flatfile.AccountId;
+    /** Text for prompts for AI Assist */
+    prompt: string;
+    createdAt: Date;
+    updatedAt: Date;
+    deletedAt?: Date;
+}
diff --git a/src/api/resources/assistant/types/PromptCreate.ts b/src/api/resources/assistant/types/PromptCreate.ts
new file mode 100644
index 0000000..e9d20e6
--- /dev/null
+++ b/src/api/resources/assistant/types/PromptCreate.ts
@@ -0,0 +1,15 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+/**
+ * Create a prompts
+ *
+ * @example
+ *     {
+ *         prompt: "Combine first name and last name into a new column called Full Name"
+ *     }
+ */
+export interface PromptCreate {
+    prompt: string;
+}
diff --git a/src/api/resources/assistant/types/PromptPatch.ts b/src/api/resources/assistant/types/PromptPatch.ts
new file mode 100644
index 0000000..d1718fc
--- /dev/null
+++ b/src/api/resources/assistant/types/PromptPatch.ts
@@ -0,0 +1,15 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+/**
+ * Update a prompts
+ *
+ * @example
+ *     {
+ *         prompt: "Combine first name and last name into a new column called Full Name"
+ *     }
+ */
+export interface PromptPatch {
+    prompt?: string;
+}
diff --git a/src/api/resources/assistant/types/PromptResponse.ts b/src/api/resources/assistant/types/PromptResponse.ts
new file mode 100644
index 0000000..c6bdca6
--- /dev/null
+++ b/src/api/resources/assistant/types/PromptResponse.ts
@@ -0,0 +1,22 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+/**
+ * @example
+ *     {
+ *         data: {
+ *             id: "us_pr_YOUR_ID",
+ *             createdById: "us_usr_YOUR_ID",
+ *             accountId: "us_acc_YOUR_ID",
+ *             prompt: "Combine first name and last name into a new column called Full Name",
+ *             createdAt: new Date("2021-01-01T00:00:00.000Z"),
+ *             updatedAt: new Date("2021-01-01T00:00:00.000Z")
+ *         }
+ *     }
+ */
+export interface PromptResponse {
+    data: Flatfile.Prompt;
+}
diff --git a/src/api/resources/assistant/types/PromptsResponse.ts b/src/api/resources/assistant/types/PromptsResponse.ts
new file mode 100644
index 0000000..3b59dd1
--- /dev/null
+++ b/src/api/resources/assistant/types/PromptsResponse.ts
@@ -0,0 +1,28 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+/**
+ * @example
+ *     {
+ *         data: [{
+ *                 id: "us_pr_YOUR_ID",
+ *                 createdById: "us_usr_YOUR_ID",
+ *                 accountId: "us_acc_YOUR_ID",
+ *                 prompt: "Combine first name and last name into a new column called Full Name",
+ *                 createdAt: new Date("2021-01-01T00:00:00.000Z"),
+ *                 updatedAt: new Date("2021-01-01T00:00:00.000Z")
+ *             }],
+ *         pagination: {
+ *             currentPage: 3,
+ *             pageCount: 50,
+ *             totalCount: 100
+ *         }
+ *     }
+ */
+export interface PromptsResponse {
+    pagination?: Flatfile.Pagination;
+    data: Flatfile.Prompt[];
+}
diff --git a/src/api/resources/assistant/types/index.ts b/src/api/resources/assistant/types/index.ts
new file mode 100644
index 0000000..d296f59
--- /dev/null
+++ b/src/api/resources/assistant/types/index.ts
@@ -0,0 +1,5 @@
+export * from "./PromptsResponse";
+export * from "./PromptResponse";
+export * from "./PromptPatch";
+export * from "./PromptCreate";
+export * from "./Prompt";
diff --git a/src/api/resources/auth/client/Client.ts b/src/api/resources/auth/client/Client.ts
index ba1e4b0..b5537ef 100644
--- a/src/api/resources/auth/client/Client.ts
+++ b/src/api/resources/auth/client/Client.ts
@@ -54,3 +54,3 @@ export class Auth {
@@ -145,3 +145,3 @@ export class Auth {
@@ -238,3 +238,3 @@ export class Auth {
@@ -331,3 +331,3 @@ export class Auth {
diff --git a/src/api/resources/cells/client/Client.ts b/src/api/resources/cells/client/Client.ts
index ffd499b..f12f921 100644
--- a/src/api/resources/cells/client/Client.ts
+++ b/src/api/resources/cells/client/Client.ts
@@ -107,3 +107,3 @@ export class Cells {
diff --git a/src/api/resources/commits/client/Client.ts b/src/api/resources/commits/client/Client.ts
index 823f9a7..af39943 100644
--- a/src/api/resources/commits/client/Client.ts
+++ b/src/api/resources/commits/client/Client.ts
@@ -50,3 +50,3 @@ export class Commits {
@@ -133,3 +133,3 @@ export class Commits {
@@ -216,3 +216,3 @@ export class Commits {
diff --git a/src/api/resources/commons/types/PromptId.ts b/src/api/resources/commons/types/PromptId.ts
new file mode 100644
index 0000000..03a6eb6
--- /dev/null
+++ b/src/api/resources/commons/types/PromptId.ts
@@ -0,0 +1,11 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+/**
+ * Prompt ID
+ *
+ * @example
+ *     "us_pr_YOUR_ID"
+ */
+export type PromptId = string;
diff --git a/src/api/resources/commons/types/index.ts b/src/api/resources/commons/types/index.ts
index d92ca92..baa887d 100644
--- a/src/api/resources/commons/types/index.ts
+++ b/src/api/resources/commons/types/index.ts
@@ -24,2 +24,3 @@ export * from "./ProgramId";
 export * from "./FamilyId";
+export * from "./PromptId";
 export * from "./DataRetentionPolicyId";
diff --git a/src/api/resources/dataRetentionPolicies/client/Client.ts b/src/api/resources/dataRetentionPolicies/client/Client.ts
index 406b614..19ff211 100644
--- a/src/api/resources/dataRetentionPolicies/client/Client.ts
+++ b/src/api/resources/dataRetentionPolicies/client/Client.ts
@@ -58,3 +58,3 @@ export class DataRetentionPolicies {
@@ -149,3 +149,3 @@ export class DataRetentionPolicies {
@@ -236,3 +236,3 @@ export class DataRetentionPolicies {
@@ -327,3 +327,3 @@ export class DataRetentionPolicies {
@@ -411,3 +411,3 @@ export class DataRetentionPolicies {
diff --git a/src/api/resources/documents/client/Client.ts b/src/api/resources/documents/client/Client.ts
index 5dfe329..9f8859f 100644
--- a/src/api/resources/documents/client/Client.ts
+++ b/src/api/resources/documents/client/Client.ts
@@ -50,3 +50,3 @@ export class Documents {
@@ -147,3 +147,3 @@ export class Documents {
@@ -237,3 +237,3 @@ export class Documents {
@@ -330,3 +330,3 @@ export class Documents {
@@ -417,3 +417,3 @@ export class Documents {
diff --git a/src/api/resources/entitlements/client/Client.ts b/src/api/resources/entitlements/client/Client.ts
index 0e7ec44..7e392f8 100644
--- a/src/api/resources/entitlements/client/Client.ts
+++ b/src/api/resources/entitlements/client/Client.ts
@@ -55,3 +55,3 @@ export class Entitlements {
diff --git a/src/api/resources/environments/client/Client.ts b/src/api/resources/environments/client/Client.ts
index b04aa1c..9c2cd5b 100644
--- a/src/api/resources/environments/client/Client.ts
+++ b/src/api/resources/environments/client/Client.ts
@@ -58,3 +58,3 @@ export class Environments {
@@ -128,3 +128,3 @@ export class Environments {
@@ -197,3 +197,3 @@ export class Environments {
@@ -284,3 +284,3 @@ export class Environments {
@@ -377,3 +377,3 @@ export class Environments {
@@ -438,3 +438,3 @@ export class Environments {
diff --git a/src/api/resources/events/client/Client.ts b/src/api/resources/events/client/Client.ts
index 1efeaa9..fbfafb7 100644
--- a/src/api/resources/events/client/Client.ts
+++ b/src/api/resources/events/client/Client.ts
@@ -82,3 +82,3 @@ export class Events {
@@ -158,3 +158,3 @@ export class Events {
@@ -237,3 +237,3 @@ export class Events {
@@ -289,3 +289,3 @@ export class Events {
@@ -362,3 +362,3 @@ export class Events {
diff --git a/src/api/resources/files/client/Client.ts b/src/api/resources/files/client/Client.ts
index 5baff22..ef5447a 100644
--- a/src/api/resources/files/client/Client.ts
+++ b/src/api/resources/files/client/Client.ts
@@ -63,3 +63,3 @@ export class Files {
@@ -137,3 +137,3 @@ export class Files {
@@ -210,3 +210,3 @@ export class Files {
@@ -289,3 +289,3 @@ export class Files {
@@ -378,3 +378,3 @@ export class Files {
@@ -458,3 +458,3 @@ export class Files {
diff --git a/src/api/resources/files/client/requests/ListFilesRequest.ts b/src/api/resources/files/client/requests/ListFilesRequest.ts
index 0e99dd4..ed26c81 100644
--- a/src/api/resources/files/client/requests/ListFilesRequest.ts
+++ b/src/api/resources/files/client/requests/ListFilesRequest.ts
@@ -13,3 +13,3 @@ export interface ListFilesRequest {
     /**
-     * Number of jobs to return in a page (default 20)
+     * Number of files to return in a page (default 20)
      */
@@ -17,3 +17,3 @@ export interface ListFilesRequest {
     /**
-     * Based on pageSize, which page of jobs to return
+     * Based on pageSize, which page of files to return
      */
diff --git a/src/api/resources/foreigndb/client/Client.ts b/src/api/resources/foreigndb/client/Client.ts
index e4dfeca..9020138 100644
--- a/src/api/resources/foreigndb/client/Client.ts
+++ b/src/api/resources/foreigndb/client/Client.ts
@@ -48,3 +48,3 @@ export class Foreigndb {
@@ -132,3 +132,3 @@ export class Foreigndb {
@@ -215,3 +215,3 @@ export class Foreigndb {
@@ -298,3 +298,3 @@ export class Foreigndb {
@@ -382,3 +382,3 @@ export class Foreigndb {
diff --git a/src/api/resources/guests/client/Client.ts b/src/api/resources/guests/client/Client.ts
index 6d4051c..d0dbe13 100644
--- a/src/api/resources/guests/client/Client.ts
+++ b/src/api/resources/guests/client/Client.ts
@@ -57,3 +57,3 @@ export class Guests {
@@ -130,3 +130,3 @@ export class Guests {
@@ -192,3 +192,3 @@ export class Guests {
@@ -250,3 +250,3 @@ export class Guests {
@@ -315,3 +315,3 @@ export class Guests {
@@ -384,3 +384,3 @@ export class Guests {
@@ -446,3 +446,3 @@ export class Guests {
@@ -541,3 +541,3 @@ export class Guests {
@@ -639,3 +639,3 @@ export class Guests {
@@ -735,3 +735,3 @@ export class Guests {
diff --git a/src/api/resources/index.ts b/src/api/resources/index.ts
index 7ddc203..21a77dd 100644
--- a/src/api/resources/index.ts
+++ b/src/api/resources/index.ts
@@ -6,2 +6,4 @@ export * as apps from "./apps";
 export * from "./apps/types";
+export * as assistant from "./assistant";
+export * from "./assistant/types";
 export * as auth from "./auth";
@@ -56,2 +58,3 @@ export * from "./commons/errors";
 export * from "./agents/client/requests";
+export * from "./assistant/client/requests";
 export * from "./auth/client/requests";
diff --git a/src/api/resources/jobs/client/Client.ts b/src/api/resources/jobs/client/Client.ts
index c46dd6d..3875433 100644
--- a/src/api/resources/jobs/client/Client.ts
+++ b/src/api/resources/jobs/client/Client.ts
@@ -76,3 +76,3 @@ export class Jobs {
@@ -132,3 +132,3 @@ export class Jobs {
@@ -185,3 +185,3 @@ export class Jobs {
@@ -241,3 +241,3 @@ export class Jobs {
@@ -294,3 +294,3 @@ export class Jobs {
@@ -352,3 +352,3 @@ export class Jobs {
@@ -413,3 +413,3 @@ export class Jobs {
@@ -512,3 +512,3 @@ export class Jobs {
@@ -572,3 +572,3 @@ export class Jobs {
@@ -641,3 +641,3 @@ export class Jobs {
@@ -706,3 +706,3 @@ export class Jobs {
@@ -780,3 +780,3 @@ export class Jobs {
@@ -858,3 +858,3 @@ export class Jobs {
@@ -926,3 +926,3 @@ export class Jobs {
@@ -985,3 +985,3 @@ export class Jobs {
@@ -1043,3 +1043,3 @@ export class Jobs {
@@ -1109,3 +1109,3 @@ export class Jobs {
diff --git a/src/api/resources/jobs/types/MutateJobConfig.ts b/src/api/resources/jobs/types/MutateJobConfig.ts
index dd23cc9..2abb49e 100644
--- a/src/api/resources/jobs/types/MutateJobConfig.ts
+++ b/src/api/resources/jobs/types/MutateJobConfig.ts
@@ -12,2 +12,4 @@ export interface MutateJobConfig {
     mutationId?: string;
+    /** If specified, a snapshot will be generated with this label */
+    snapshotLabel?: string;
     filter?: Flatfile.Filter;
diff --git a/src/api/resources/mapping/client/Client.ts b/src/api/resources/mapping/client/Client.ts
index c8d4fd7..370f737 100644
--- a/src/api/resources/mapping/client/Client.ts
+++ b/src/api/resources/mapping/client/Client.ts
@@ -47,3 +47,3 @@ export class Mapping {
@@ -128,3 +128,3 @@ export class Mapping {
@@ -263,3 +263,3 @@ export class Mapping {
@@ -337,3 +337,3 @@ export class Mapping {
@@ -421,3 +421,3 @@ export class Mapping {
@@ -505,3 +505,3 @@ export class Mapping {
@@ -589,3 +589,3 @@ export class Mapping {
@@ -676,3 +676,3 @@ export class Mapping {
@@ -765,3 +765,3 @@ export class Mapping {
@@ -859,3 +859,3 @@ export class Mapping {
@@ -944,3 +944,3 @@ export class Mapping {
@@ -1034,3 +1034,3 @@ export class Mapping {
diff --git a/src/api/resources/records/client/Client.ts b/src/api/resources/records/client/Client.ts
index 5b8eb36..160d562 100644
--- a/src/api/resources/records/client/Client.ts
+++ b/src/api/resources/records/client/Client.ts
@@ -153,3 +153,3 @@ export class Records {
@@ -264,3 +264,3 @@ export class Records {
@@ -368,3 +368,3 @@ export class Records {
@@ -466,3 +466,3 @@ export class Records {
@@ -584,3 +584,3 @@ export class Records {
diff --git a/src/api/resources/records/client/requests/GetRecordsRequest.ts b/src/api/resources/records/client/requests/GetRecordsRequest.ts
index 9a48215..ffd839d 100644
--- a/src/api/resources/records/client/requests/GetRecordsRequest.ts
+++ b/src/api/resources/records/client/requests/GetRecordsRequest.ts
@@ -39,3 +39,3 @@ export interface GetRecordsRequest {
     /**
-     * Based on pageSize, which page of records to return
+     * Based on pageSize, which page of records to return (Note - numbers start at 1)
      */
diff --git a/src/api/resources/roles/client/Client.ts b/src/api/resources/roles/client/Client.ts
index cc59587..09604a8 100644
--- a/src/api/resources/roles/client/Client.ts
+++ b/src/api/resources/roles/client/Client.ts
@@ -42,3 +42,3 @@ export class Roles {
diff --git a/src/api/resources/secrets/client/Client.ts b/src/api/resources/secrets/client/Client.ts
index a63eaf5..1ade8af 100644
--- a/src/api/resources/secrets/client/Client.ts
+++ b/src/api/resources/secrets/client/Client.ts
@@ -62,3 +62,3 @@ export class Secrets {
@@ -154,3 +154,3 @@ export class Secrets {
@@ -241,3 +241,3 @@ export class Secrets {
diff --git a/src/api/resources/sheets/client/Client.ts b/src/api/resources/sheets/client/Client.ts
index 1945457..0b478a8 100644
--- a/src/api/resources/sheets/client/Client.ts
+++ b/src/api/resources/sheets/client/Client.ts
@@ -54,3 +54,3 @@ export class Sheets {
@@ -116,3 +116,3 @@ export class Sheets {
@@ -176,3 +176,3 @@ export class Sheets {
@@ -262,3 +262,3 @@ export class Sheets {
@@ -406,3 +406,3 @@ export class Sheets {
@@ -519,3 +519,3 @@ export class Sheets {
@@ -581,3 +581,3 @@ export class Sheets {
@@ -673,3 +673,3 @@ export class Sheets {
@@ -737,3 +737,3 @@ export class Sheets {
@@ -823,3 +823,3 @@ export class Sheets {
@@ -966,3 +966,3 @@ export class Sheets {
diff --git a/src/api/resources/sheets/types/Sheet.ts b/src/api/resources/sheets/types/Sheet.ts
index e52a7fe..be4c96a 100644
--- a/src/api/resources/sheets/types/Sheet.ts
+++ b/src/api/resources/sheets/types/Sheet.ts
@@ -59,2 +59,4 @@ export interface Sheet {
     lockedAt?: Date;
+    /** The precomputed counts of records in the Sheet (may not exist). */
+    recordCounts?: Flatfile.RecordCounts;
 }
diff --git a/src/api/resources/snapshots/client/Client.ts b/src/api/resources/snapshots/client/Client.ts
index d13cf34..f45e5c6 100644
--- a/src/api/resources/snapshots/client/Client.ts
+++ b/src/api/resources/snapshots/client/Client.ts
@@ -53,3 +53,3 @@ export class Snapshots {
@@ -145,3 +145,3 @@ export class Snapshots {
@@ -238,3 +238,3 @@ export class Snapshots {
@@ -325,3 +325,3 @@ export class Snapshots {
@@ -416,3 +416,3 @@ export class Snapshots {
@@ -527,3 +527,3 @@ export class Snapshots {
diff --git a/src/api/resources/spaces/client/Client.ts b/src/api/resources/spaces/client/Client.ts
index 21d3f4f..2870146 100644
--- a/src/api/resources/spaces/client/Client.ts
+++ b/src/api/resources/spaces/client/Client.ts
@@ -99,3 +99,3 @@ export class Spaces {
@@ -181,3 +181,3 @@ export class Spaces {
@@ -268,3 +268,3 @@ export class Spaces {
@@ -351,3 +351,3 @@ export class Spaces {
@@ -447,3 +447,3 @@ export class Spaces {
@@ -537,3 +537,3 @@ export class Spaces {
@@ -624,3 +624,3 @@ export class Spaces {
@@ -707,3 +707,3 @@ export class Spaces {
diff --git a/src/api/resources/spaces/types/InternalSpaceConfigBase.ts b/src/api/resources/spaces/types/InternalSpaceConfigBase.ts
index 8157112..12d7903 100644
--- a/src/api/resources/spaces/types/InternalSpaceConfigBase.ts
+++ b/src/api/resources/spaces/types/InternalSpaceConfigBase.ts
@@ -21,2 +21,4 @@ export interface InternalSpaceConfigBase {
     archivedAt?: Date;
+    /** The ID of the App that space is associated with */
+    appId?: Flatfile.AppId;
 }
diff --git a/src/api/resources/spaces/types/Space.ts b/src/api/resources/spaces/types/Space.ts
index 4559dfd..ae76874 100644
--- a/src/api/resources/spaces/types/Space.ts
+++ b/src/api/resources/spaces/types/Space.ts
@@ -62,3 +62,3 @@ export interface Space extends Flatfile.InternalSpaceConfigBase {
     expiredAt?: Date;
-    /** Date that the last activity in the space occurred. This could include any create or update activity in the space like adding a record to a sheet, uploading a new file, or updating the configuration of a workbook. This date is only tracked to the precision of a day. */
+    /** This date marks the most recent activity within the space, tracking actions to the second. Activities include creating or updating records in a sheet, uploading files, or modifying a workbook's configuration. */
     lastActivityAt?: Date;
@@ -80,4 +80,2 @@ export interface Space extends Flatfile.InternalSpaceConfigBase {
     guestAuthentication: Flatfile.GuestAuthenticationEnum[];
-    /** The ID of the App that space is associated with */
-    appId?: Flatfile.AppId;
 }
diff --git a/src/api/resources/users/client/Client.ts b/src/api/resources/users/client/Client.ts
index 40456bc..1d14d9a 100644
--- a/src/api/resources/users/client/Client.ts
+++ b/src/api/resources/users/client/Client.ts
@@ -56,3 +56,3 @@ export class Users {
@@ -128,3 +128,3 @@ export class Users {
@@ -190,3 +190,3 @@ export class Users {
@@ -249,3 +249,3 @@ export class Users {
@@ -310,3 +310,3 @@ export class Users {
@@ -405,3 +405,3 @@ export class Users {
@@ -503,3 +503,3 @@ export class Users {
@@ -606,3 +606,3 @@ export class Users {
@@ -669,3 +669,3 @@ export class Users {
@@ -728,3 +728,3 @@ export class Users {
diff --git a/src/api/resources/users/client/requests/UpdateUserRequest.ts b/src/api/resources/users/client/requests/UpdateUserRequest.ts
index d815834..30e54f2 100644
--- a/src/api/resources/users/client/requests/UpdateUserRequest.ts
+++ b/src/api/resources/users/client/requests/UpdateUserRequest.ts
@@ -6,2 +6,3 @@ export interface UpdateUserRequest {
     name?: string;
+    dashboard?: number;
 }
diff --git a/src/api/resources/versions/client/Client.ts b/src/api/resources/versions/client/Client.ts
index 6d4c089..c96a8a3 100644
--- a/src/api/resources/versions/client/Client.ts
+++ b/src/api/resources/versions/client/Client.ts
@@ -42,3 +42,3 @@ export class Versions {
diff --git a/src/api/resources/workbooks/client/Client.ts b/src/api/resources/workbooks/client/Client.ts
index b242f95..ac4d087 100644
--- a/src/api/resources/workbooks/client/Client.ts
+++ b/src/api/resources/workbooks/client/Client.ts
@@ -61,3 +61,3 @@ export class Workbooks {
@@ -168,3 +168,3 @@ export class Workbooks {
@@ -245,3 +245,3 @@ export class Workbooks {
@@ -331,3 +331,3 @@ export class Workbooks {
@@ -428,3 +428,3 @@ export class Workbooks {
@@ -520,3 +520,3 @@ export class Workbooks {
@@ -581,3 +581,3 @@ export class Workbooks {
diff --git a/src/serialization/resources/assistant/index.ts b/src/serialization/resources/assistant/index.ts
new file mode 100644
index 0000000..eea524d
--- /dev/null
+++ b/src/serialization/resources/assistant/index.ts
@@ -0,0 +1 @@
+export * from "./types";
diff --git a/src/serialization/resources/assistant/types/Prompt.ts b/src/serialization/resources/assistant/types/Prompt.ts
new file mode 100644
index 0000000..970bff8
--- /dev/null
+++ b/src/serialization/resources/assistant/types/Prompt.ts
@@ -0,0 +1,32 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+import { PromptId } from "../../commons/types/PromptId";
+import { AccountId } from "../../commons/types/AccountId";
+
+export const Prompt: core.serialization.ObjectSchema<serializers.Prompt.Raw, Flatfile.Prompt> =
+    core.serialization.object({
+        id: PromptId,
+        createdById: core.serialization.string(),
+        accountId: AccountId,
+        prompt: core.serialization.string(),
+        createdAt: core.serialization.date(),
+        updatedAt: core.serialization.date(),
+        deletedAt: core.serialization.date().optional(),
+    });
+
+export declare namespace Prompt {
+    interface Raw {
+        id: PromptId.Raw;
+        createdById: string;
+        accountId: AccountId.Raw;
+        prompt: string;
+        createdAt: string;
+        updatedAt: string;
+        deletedAt?: string | null;
+    }
+}
diff --git a/src/serialization/resources/assistant/types/PromptCreate.ts b/src/serialization/resources/assistant/types/PromptCreate.ts
new file mode 100644
index 0000000..38950d0
--- /dev/null
+++ b/src/serialization/resources/assistant/types/PromptCreate.ts
@@ -0,0 +1,18 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+
+export const PromptCreate: core.serialization.ObjectSchema<serializers.PromptCreate.Raw, Flatfile.PromptCreate> =
+    core.serialization.object({
+        prompt: core.serialization.string(),
+    });
+
+export declare namespace PromptCreate {
+    interface Raw {
+        prompt: string;
+    }
+}
diff --git a/src/serialization/resources/assistant/types/PromptPatch.ts b/src/serialization/resources/assistant/types/PromptPatch.ts
new file mode 100644
index 0000000..2b1ede6
--- /dev/null
+++ b/src/serialization/resources/assistant/types/PromptPatch.ts
@@ -0,0 +1,18 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+
+export const PromptPatch: core.serialization.ObjectSchema<serializers.PromptPatch.Raw, Flatfile.PromptPatch> =
+    core.serialization.object({
+        prompt: core.serialization.string().optional(),
+    });
+
+export declare namespace PromptPatch {
+    interface Raw {
+        prompt?: string | null;
+    }
+}
diff --git a/src/serialization/resources/assistant/types/PromptResponse.ts b/src/serialization/resources/assistant/types/PromptResponse.ts
new file mode 100644
index 0000000..ae87c84
--- /dev/null
+++ b/src/serialization/resources/assistant/types/PromptResponse.ts
@@ -0,0 +1,19 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+import { Prompt } from "./Prompt";
+
+export const PromptResponse: core.serialization.ObjectSchema<serializers.PromptResponse.Raw, Flatfile.PromptResponse> =
+    core.serialization.object({
+        data: Prompt,
+    });
+
+export declare namespace PromptResponse {
+    interface Raw {
+        data: Prompt.Raw;
+    }
+}
diff --git a/src/serialization/resources/assistant/types/PromptsResponse.ts b/src/serialization/resources/assistant/types/PromptsResponse.ts
new file mode 100644
index 0000000..9821a6b
--- /dev/null
+++ b/src/serialization/resources/assistant/types/PromptsResponse.ts
@@ -0,0 +1,24 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+import { Pagination } from "../../commons/types/Pagination";
+import { Prompt } from "./Prompt";
+
+export const PromptsResponse: core.serialization.ObjectSchema<
+    serializers.PromptsResponse.Raw,
+    Flatfile.PromptsResponse
+> = core.serialization.object({
+    pagination: Pagination.optional(),
+    data: core.serialization.list(Prompt),
+});
+
+export declare namespace PromptsResponse {
+    interface Raw {
+        pagination?: Pagination.Raw | null;
+        data: Prompt.Raw[];
+    }
+}
diff --git a/src/serialization/resources/assistant/types/index.ts b/src/serialization/resources/assistant/types/index.ts
new file mode 100644
index 0000000..d296f59
--- /dev/null
+++ b/src/serialization/resources/assistant/types/index.ts
@@ -0,0 +1,5 @@
+export * from "./PromptsResponse";
+export * from "./PromptResponse";
+export * from "./PromptPatch";
+export * from "./PromptCreate";
+export * from "./Prompt";
diff --git a/src/serialization/resources/commons/types/PromptId.ts b/src/serialization/resources/commons/types/PromptId.ts
new file mode 100644
index 0000000..695182d
--- /dev/null
+++ b/src/serialization/resources/commons/types/PromptId.ts
@@ -0,0 +1,14 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+
+export const PromptId: core.serialization.Schema<serializers.PromptId.Raw, Flatfile.PromptId> =
+    core.serialization.string();
+
+export declare namespace PromptId {
+    type Raw = string;
+}
diff --git a/src/serialization/resources/commons/types/index.ts b/src/serialization/resources/commons/types/index.ts
index d92ca92..baa887d 100644
--- a/src/serialization/resources/commons/types/index.ts
+++ b/src/serialization/resources/commons/types/index.ts
@@ -24,2 +24,3 @@ export * from "./ProgramId";
 export * from "./FamilyId";
+export * from "./PromptId";
 export * from "./DataRetentionPolicyId";
diff --git a/src/serialization/resources/index.ts b/src/serialization/resources/index.ts
index 1ddef06..481e6bc 100644
--- a/src/serialization/resources/index.ts
+++ b/src/serialization/resources/index.ts
@@ -6,2 +6,4 @@ export * as apps from "./apps";
 export * from "./apps/types";
+export * as assistant from "./assistant";
+export * from "./assistant/types";
 export * as auth from "./auth";
diff --git a/src/serialization/resources/jobs/types/MutateJobConfig.ts b/src/serialization/resources/jobs/types/MutateJobConfig.ts
index 4c5aa42..6723d82 100644
--- a/src/serialization/resources/jobs/types/MutateJobConfig.ts
+++ b/src/serialization/resources/jobs/types/MutateJobConfig.ts
@@ -21,2 +21,3 @@ export const MutateJobConfig: core.serialization.ObjectSchema<
     mutationId: core.serialization.string().optional(),
+    snapshotLabel: core.serialization.string().optional(),
     filter: Filter.optional(),
@@ -34,2 +35,3 @@ export declare namespace MutateJobConfig {
         mutationId?: string | null;
+        snapshotLabel?: string | null;
         filter?: Filter.Raw | null;
diff --git a/src/serialization/resources/sheets/types/Sheet.ts b/src/serialization/resources/sheets/types/Sheet.ts
index fc6f503..46580fc 100644
--- a/src/serialization/resources/sheets/types/Sheet.ts
+++ b/src/serialization/resources/sheets/types/Sheet.ts
@@ -10,2 +10,3 @@ import { WorkbookId } from "../../commons/types/WorkbookId";
 import { SheetConfig } from "./SheetConfig";
+import { RecordCounts } from "../../records/types/RecordCounts";
 
@@ -22,2 +23,3 @@ export const Sheet: core.serialization.ObjectSchema<serializers.Sheet.Raw, Flatf
     lockedAt: core.serialization.date().optional(),
+    recordCounts: RecordCounts.optional(),
 });
@@ -36,2 +38,3 @@ export declare namespace Sheet {
         lockedAt?: string | null;
+        recordCounts?: RecordCounts.Raw | null;
     }
diff --git a/src/serialization/resources/spaces/types/InternalSpaceConfigBase.ts b/src/serialization/resources/spaces/types/InternalSpaceConfigBase.ts
index c413f65..594936e 100644
--- a/src/serialization/resources/spaces/types/InternalSpaceConfigBase.ts
+++ b/src/serialization/resources/spaces/types/InternalSpaceConfigBase.ts
@@ -12,2 +12,3 @@ import { Action } from "../../commons/types/Action";
 import { SpaceAccess } from "./SpaceAccess";
+import { AppId } from "../../commons/types/AppId";
 
@@ -29,2 +30,3 @@ export const InternalSpaceConfigBase: core.serialization.ObjectSchema<
     archivedAt: core.serialization.date().optional(),
+    appId: AppId.optional(),
 });
@@ -45,2 +47,3 @@ export declare namespace InternalSpaceConfigBase {
         archivedAt?: string | null;
+        appId?: AppId.Raw | null;
     }
diff --git a/src/serialization/resources/spaces/types/Space.ts b/src/serialization/resources/spaces/types/Space.ts
index effbd9e..3dd7321 100644
--- a/src/serialization/resources/spaces/types/Space.ts
+++ b/src/serialization/resources/spaces/types/Space.ts
@@ -11,3 +11,2 @@ import { SpaceSize } from "./SpaceSize";
 import { GuestAuthenticationEnum } from "../../environments/types/GuestAuthenticationEnum";
-import { AppId } from "../../commons/types/AppId";
 import { InternalSpaceConfigBase } from "./InternalSpaceConfigBase";
@@ -33,3 +32,2 @@ export const Space: core.serialization.ObjectSchema<serializers.Space.Raw, Flatf
         guestAuthentication: core.serialization.list(GuestAuthenticationEnum),
-        appId: AppId.optional(),
     })
@@ -56,3 +54,2 @@ export declare namespace Space {
         guestAuthentication: GuestAuthenticationEnum.Raw[];
-        appId?: AppId.Raw | null;
     }
diff --git a/src/serialization/resources/users/client/requests/UpdateUserRequest.ts b/src/serialization/resources/users/client/requests/UpdateUserRequest.ts
index d9671ef..8b56009 100644
--- a/src/serialization/resources/users/client/requests/UpdateUserRequest.ts
+++ b/src/serialization/resources/users/client/requests/UpdateUserRequest.ts
@@ -13,2 +13,3 @@ export const UpdateUserRequest: core.serialization.Schema<
     name: core.serialization.string().optional(),
+    dashboard: core.serialization.number().optional(),
 });
@@ -18,2 +19,3 @@ export declare namespace UpdateUserRequest {
         name?: string | null;
+        dashboard?: number | null;
     }

diff --git a/package.json b/package.json
index 3829976..1ac2b24 100644
--- a/package.json
+++ b/package.json
@@ -2,3 +2,3 @@
     "name": "@flatfile/api",
-    "version": "1.8.3",
+    "version": "1.8.4",
     "private": false,
diff --git a/src/Client.ts b/src/Client.ts
index cb04dd8..e654746 100644
--- a/src/Client.ts
+++ b/src/Client.ts
@@ -31,2 +31,3 @@ import { Users } from "./api/resources/users/client/Client";
 import { Versions } from "./api/resources/versions/client/Client";
+import { Views } from "./api/resources/views/client/Client";
 import { Workbooks } from "./api/resources/workbooks/client/Client";
@@ -199,2 +200,8 @@ export class FlatfileClient {
 
+    protected _views: Views | undefined;
+
+    public get views(): Views {
+        return (this._views ??= new Views(this._options));
+    }
+
     protected _workbooks: Workbooks | undefined;
diff --git a/src/api/resources/accounts/client/Client.ts b/src/api/resources/accounts/client/Client.ts
index 376c62c..e60f6aa 100644
--- a/src/api/resources/accounts/client/Client.ts
+++ b/src/api/resources/accounts/client/Client.ts
@@ -45,3 +45,3 @@ export class Accounts {
@@ -108,3 +108,3 @@ export class Accounts {
diff --git a/src/api/resources/agents/client/Client.ts b/src/api/resources/agents/client/Client.ts
index d024bb2..379907f 100644
--- a/src/api/resources/agents/client/Client.ts
+++ b/src/api/resources/agents/client/Client.ts
@@ -45,3 +45,3 @@ export class Agents {
@@ -127,3 +127,3 @@ export class Agents {
@@ -210,3 +210,3 @@ export class Agents {
@@ -295,3 +295,3 @@ export class Agents {
@@ -390,3 +390,3 @@ export class Agents {
@@ -488,3 +488,3 @@ export class Agents {
@@ -589,3 +589,3 @@ export class Agents {
@@ -681,3 +681,3 @@ export class Agents {
@@ -792,3 +792,3 @@ export class Agents {
@@ -903,3 +903,3 @@ export class Agents {
@@ -996,3 +996,3 @@ export class Agents {
diff --git a/src/api/resources/apps/client/Client.ts b/src/api/resources/apps/client/Client.ts
index ae96930..722d45d 100644
--- a/src/api/resources/apps/client/Client.ts
+++ b/src/api/resources/apps/client/Client.ts
@@ -42,3 +42,3 @@ export class Apps {
@@ -100,3 +100,3 @@ export class Apps {
@@ -171,3 +171,3 @@ export class Apps {
@@ -243,3 +243,3 @@ export class Apps {
diff --git a/src/api/resources/assistant/client/Client.ts b/src/api/resources/assistant/client/Client.ts
index 5842123..0042ebf 100644
--- a/src/api/resources/assistant/client/Client.ts
+++ b/src/api/resources/assistant/client/Client.ts
@@ -58,3 +58,3 @@ export class Assistant {
@@ -120,3 +120,3 @@ export class Assistant {
@@ -184,3 +184,3 @@ export class Assistant {
@@ -248,3 +248,3 @@ export class Assistant {
@@ -310,3 +310,3 @@ export class Assistant {
diff --git a/src/api/resources/auth/client/Client.ts b/src/api/resources/auth/client/Client.ts
index bd0b707..3641cfc 100644
--- a/src/api/resources/auth/client/Client.ts
+++ b/src/api/resources/auth/client/Client.ts
@@ -54,3 +54,3 @@ export class Auth {
@@ -145,3 +145,3 @@ export class Auth {
@@ -238,3 +238,3 @@ export class Auth {
@@ -331,3 +331,3 @@ export class Auth {
diff --git a/src/api/resources/cells/client/Client.ts b/src/api/resources/cells/client/Client.ts
index c153113..abf66dd 100644
--- a/src/api/resources/cells/client/Client.ts
+++ b/src/api/resources/cells/client/Client.ts
@@ -107,3 +107,3 @@ export class Cells {
diff --git a/src/api/resources/commits/client/Client.ts b/src/api/resources/commits/client/Client.ts
index 7ae39bc..a86524d 100644
--- a/src/api/resources/commits/client/Client.ts
+++ b/src/api/resources/commits/client/Client.ts
@@ -50,3 +50,3 @@ export class Commits {
@@ -133,3 +133,3 @@ export class Commits {
@@ -216,3 +216,3 @@ export class Commits {
diff --git a/src/api/resources/commons/types/ViewId.ts b/src/api/resources/commons/types/ViewId.ts
new file mode 100644
index 0000000..7fd38b4
--- /dev/null
+++ b/src/api/resources/commons/types/ViewId.ts
@@ -0,0 +1,11 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+/**
+ * View ID
+ *
+ * @example
+ *     "us_vi_YOUR_ID"
+ */
+export type ViewId = string;
diff --git a/src/api/resources/commons/types/index.ts b/src/api/resources/commons/types/index.ts
index baa887d..c74eb67 100644
--- a/src/api/resources/commons/types/index.ts
+++ b/src/api/resources/commons/types/index.ts
@@ -25,2 +25,3 @@ export * from "./FamilyId";
 export * from "./PromptId";
+export * from "./ViewId";
 export * from "./DataRetentionPolicyId";
diff --git a/src/api/resources/dataRetentionPolicies/client/Client.ts b/src/api/resources/dataRetentionPolicies/client/Client.ts
index fe4b327..ce92494 100644
--- a/src/api/resources/dataRetentionPolicies/client/Client.ts
+++ b/src/api/resources/dataRetentionPolicies/client/Client.ts
@@ -58,3 +58,3 @@ export class DataRetentionPolicies {
@@ -149,3 +149,3 @@ export class DataRetentionPolicies {
@@ -236,3 +236,3 @@ export class DataRetentionPolicies {
@@ -327,3 +327,3 @@ export class DataRetentionPolicies {
@@ -411,3 +411,3 @@ export class DataRetentionPolicies {
diff --git a/src/api/resources/documents/client/Client.ts b/src/api/resources/documents/client/Client.ts
index c07576a..b77b6aa 100644
--- a/src/api/resources/documents/client/Client.ts
+++ b/src/api/resources/documents/client/Client.ts
@@ -50,3 +50,3 @@ export class Documents {
@@ -147,3 +147,3 @@ export class Documents {
@@ -237,3 +237,3 @@ export class Documents {
@@ -330,3 +330,3 @@ export class Documents {
@@ -417,3 +417,3 @@ export class Documents {
diff --git a/src/api/resources/entitlements/client/Client.ts b/src/api/resources/entitlements/client/Client.ts
index 05cd299..a987c09 100644
--- a/src/api/resources/entitlements/client/Client.ts
+++ b/src/api/resources/entitlements/client/Client.ts
@@ -55,3 +55,3 @@ export class Entitlements {
diff --git a/src/api/resources/environments/client/Client.ts b/src/api/resources/environments/client/Client.ts
index 3d15182..a71f98a 100644
--- a/src/api/resources/environments/client/Client.ts
+++ b/src/api/resources/environments/client/Client.ts
@@ -58,3 +58,3 @@ export class Environments {
@@ -128,3 +128,3 @@ export class Environments {
@@ -197,3 +197,3 @@ export class Environments {
@@ -284,3 +284,3 @@ export class Environments {
@@ -377,3 +377,3 @@ export class Environments {
@@ -438,3 +438,3 @@ export class Environments {
diff --git a/src/api/resources/events/client/Client.ts b/src/api/resources/events/client/Client.ts
index 89602df..2976bd5 100644
--- a/src/api/resources/events/client/Client.ts
+++ b/src/api/resources/events/client/Client.ts
@@ -82,3 +82,3 @@ export class Events {
@@ -158,3 +158,3 @@ export class Events {
@@ -237,3 +237,3 @@ export class Events {
@@ -289,3 +289,3 @@ export class Events {
@@ -362,3 +362,3 @@ export class Events {
diff --git a/src/api/resources/files/client/Client.ts b/src/api/resources/files/client/Client.ts
index a24e931..8e7e83f 100644
--- a/src/api/resources/files/client/Client.ts
+++ b/src/api/resources/files/client/Client.ts
@@ -63,3 +63,3 @@ export class Files {
@@ -141,3 +141,3 @@ export class Files {
@@ -214,3 +214,3 @@ export class Files {
@@ -293,3 +293,3 @@ export class Files {
@@ -382,3 +382,3 @@ export class Files {
@@ -462,3 +462,3 @@ export class Files {
diff --git a/src/api/resources/foreigndb/client/Client.ts b/src/api/resources/foreigndb/client/Client.ts
index d939212..c5abb2b 100644
--- a/src/api/resources/foreigndb/client/Client.ts
+++ b/src/api/resources/foreigndb/client/Client.ts
@@ -48,3 +48,3 @@ export class Foreigndb {
@@ -132,3 +132,3 @@ export class Foreigndb {
@@ -215,3 +215,3 @@ export class Foreigndb {
@@ -298,3 +298,3 @@ export class Foreigndb {
@@ -382,3 +382,3 @@ export class Foreigndb {
diff --git a/src/api/resources/guests/client/Client.ts b/src/api/resources/guests/client/Client.ts
index bf4c145..d207820 100644
--- a/src/api/resources/guests/client/Client.ts
+++ b/src/api/resources/guests/client/Client.ts
@@ -57,3 +57,3 @@ export class Guests {
@@ -130,3 +130,3 @@ export class Guests {
@@ -192,3 +192,3 @@ export class Guests {
@@ -250,3 +250,3 @@ export class Guests {
@@ -315,3 +315,3 @@ export class Guests {
@@ -384,3 +384,3 @@ export class Guests {
@@ -446,3 +446,3 @@ export class Guests {
@@ -541,3 +541,3 @@ export class Guests {
@@ -639,3 +639,3 @@ export class Guests {
@@ -735,3 +735,3 @@ export class Guests {
diff --git a/src/api/resources/index.ts b/src/api/resources/index.ts
index 21a77dd..58af0ee 100644
--- a/src/api/resources/index.ts
+++ b/src/api/resources/index.ts
@@ -54,2 +54,4 @@ export * as versions from "./versions";
 export * from "./versions/types";
+export * as views from "./views";
+export * from "./views/types";
 export * as workbooks from "./workbooks";
@@ -76,2 +78,3 @@ export * from "./users/client/requests";
 export * from "./versions/client/requests";
+export * from "./views/client/requests";
 export * from "./workbooks/client/requests";
diff --git a/src/api/resources/jobs/client/Client.ts b/src/api/resources/jobs/client/Client.ts
index e9de330..64c9a3e 100644
--- a/src/api/resources/jobs/client/Client.ts
+++ b/src/api/resources/jobs/client/Client.ts
@@ -76,3 +76,3 @@ export class Jobs {
@@ -132,3 +132,3 @@ export class Jobs {
@@ -185,3 +185,3 @@ export class Jobs {
@@ -241,3 +241,3 @@ export class Jobs {
@@ -294,3 +294,3 @@ export class Jobs {
@@ -352,3 +352,3 @@ export class Jobs {
@@ -413,3 +413,3 @@ export class Jobs {
@@ -512,3 +512,3 @@ export class Jobs {
@@ -572,3 +572,3 @@ export class Jobs {
@@ -641,3 +641,3 @@ export class Jobs {
@@ -706,3 +706,3 @@ export class Jobs {
@@ -780,3 +780,3 @@ export class Jobs {
@@ -858,3 +858,3 @@ export class Jobs {
@@ -926,3 +926,3 @@ export class Jobs {
@@ -985,3 +985,3 @@ export class Jobs {
@@ -1043,3 +1043,3 @@ export class Jobs {
@@ -1109,3 +1109,3 @@ export class Jobs {
diff --git a/src/api/resources/mapping/client/Client.ts b/src/api/resources/mapping/client/Client.ts
index 87994fe..e2982a2 100644
--- a/src/api/resources/mapping/client/Client.ts
+++ b/src/api/resources/mapping/client/Client.ts
@@ -47,3 +47,3 @@ export class Mapping {
@@ -131,3 +131,3 @@ export class Mapping {
@@ -269,3 +269,3 @@ export class Mapping {
@@ -343,3 +343,3 @@ export class Mapping {
@@ -427,3 +427,3 @@ export class Mapping {
@@ -511,3 +511,3 @@ export class Mapping {
@@ -595,3 +595,3 @@ export class Mapping {
@@ -682,3 +682,3 @@ export class Mapping {
@@ -771,3 +771,3 @@ export class Mapping {
@@ -865,3 +865,3 @@ export class Mapping {
@@ -950,3 +950,3 @@ export class Mapping {
@@ -1040,3 +1040,3 @@ export class Mapping {
diff --git a/src/api/resources/records/client/Client.ts b/src/api/resources/records/client/Client.ts
index 92f04a5..6ef5915 100644
--- a/src/api/resources/records/client/Client.ts
+++ b/src/api/resources/records/client/Client.ts
@@ -153,3 +153,3 @@ export class Records {
@@ -265,3 +265,3 @@ export class Records {
@@ -369,3 +369,3 @@ export class Records {
@@ -467,3 +467,3 @@ export class Records {
@@ -585,3 +585,3 @@ export class Records {
diff --git a/src/api/resources/roles/client/Client.ts b/src/api/resources/roles/client/Client.ts
index 965dc66..a0ce6a4 100644
--- a/src/api/resources/roles/client/Client.ts
+++ b/src/api/resources/roles/client/Client.ts
@@ -42,3 +42,3 @@ export class Roles {
diff --git a/src/api/resources/secrets/client/Client.ts b/src/api/resources/secrets/client/Client.ts
index 9e2fed1..f313a98 100644
--- a/src/api/resources/secrets/client/Client.ts
+++ b/src/api/resources/secrets/client/Client.ts
@@ -62,3 +62,3 @@ export class Secrets {
@@ -154,3 +154,3 @@ export class Secrets {
@@ -241,3 +241,3 @@ export class Secrets {
diff --git a/src/api/resources/sheets/client/Client.ts b/src/api/resources/sheets/client/Client.ts
index 2501542..4663e4e 100644
--- a/src/api/resources/sheets/client/Client.ts
+++ b/src/api/resources/sheets/client/Client.ts
@@ -54,3 +54,3 @@ export class Sheets {
@@ -116,3 +116,3 @@ export class Sheets {
@@ -176,3 +176,3 @@ export class Sheets {
@@ -262,3 +262,3 @@ export class Sheets {
@@ -406,3 +406,3 @@ export class Sheets {
@@ -519,3 +519,3 @@ export class Sheets {
@@ -581,3 +581,3 @@ export class Sheets {
@@ -673,3 +673,3 @@ export class Sheets {
@@ -737,3 +737,3 @@ export class Sheets {
@@ -823,3 +823,3 @@ export class Sheets {
@@ -964,3 +964,3 @@ export class Sheets {
diff --git a/src/api/resources/snapshots/client/Client.ts b/src/api/resources/snapshots/client/Client.ts
index 7b4b39d..27114b3 100644
--- a/src/api/resources/snapshots/client/Client.ts
+++ b/src/api/resources/snapshots/client/Client.ts
@@ -53,3 +53,3 @@ export class Snapshots {
@@ -145,3 +145,3 @@ export class Snapshots {
@@ -238,3 +238,3 @@ export class Snapshots {
@@ -325,3 +325,3 @@ export class Snapshots {
@@ -416,3 +416,3 @@ export class Snapshots {
@@ -527,3 +527,3 @@ export class Snapshots {
diff --git a/src/api/resources/spaces/client/Client.ts b/src/api/resources/spaces/client/Client.ts
index 52fb830..d13dbe8 100644
--- a/src/api/resources/spaces/client/Client.ts
+++ b/src/api/resources/spaces/client/Client.ts
@@ -99,3 +99,3 @@ export class Spaces {
@@ -181,3 +181,3 @@ export class Spaces {
@@ -268,3 +268,3 @@ export class Spaces {
@@ -351,3 +351,3 @@ export class Spaces {
@@ -447,3 +447,3 @@ export class Spaces {
@@ -537,3 +537,3 @@ export class Spaces {
@@ -624,3 +624,3 @@ export class Spaces {
@@ -707,3 +707,3 @@ export class Spaces {
diff --git a/src/api/resources/users/client/Client.ts b/src/api/resources/users/client/Client.ts
index 69ff49e..b4163e6 100644
--- a/src/api/resources/users/client/Client.ts
+++ b/src/api/resources/users/client/Client.ts
@@ -56,3 +56,3 @@ export class Users {
@@ -128,3 +128,3 @@ export class Users {
@@ -190,3 +190,3 @@ export class Users {
@@ -249,3 +249,3 @@ export class Users {
@@ -304,3 +304,3 @@ export class Users {
@@ -365,3 +365,3 @@ export class Users {
@@ -460,3 +460,3 @@ export class Users {
@@ -558,3 +558,3 @@ export class Users {
@@ -661,3 +661,3 @@ export class Users {
@@ -724,3 +724,3 @@ export class Users {
@@ -783,3 +783,3 @@ export class Users {
diff --git a/src/api/resources/versions/client/Client.ts b/src/api/resources/versions/client/Client.ts
index 7eaab15..a6f9aad 100644
--- a/src/api/resources/versions/client/Client.ts
+++ b/src/api/resources/versions/client/Client.ts
@@ -42,3 +42,3 @@ export class Versions {
diff --git a/src/api/resources/views/client/Client.ts b/src/api/resources/views/client/Client.ts
new file mode 100644
index 0000000..10e0582
--- /dev/null
+++ b/src/api/resources/views/client/Client.ts
@@ -0,0 +1,463 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as environments from "../../../../environments";
+import * as core from "../../../../core";
+import * as Flatfile from "../../..";
+import urlJoin from "url-join";
+import * as serializers from "../../../../serialization";
+import * as errors from "../../../../errors";
+
+export declare namespace Views {
+    interface Options {
+        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
+        token?: core.Supplier<core.BearerToken | undefined>;
+        fetcher?: core.FetchFunction;
+    }
+
+    interface RequestOptions {
+        timeoutInSeconds?: number;
+        maxRetries?: number;
+    }
+}
+
+export class Views {
+    constructor(protected readonly _options: Views.Options = {}) {}
+
+    /**
+     * Returns all views for user and sheet
+     * @throws {@link Flatfile.BadRequestError}
+     * @throws {@link Flatfile.NotFoundError}
+     *
+     * @example
+     *     await flatfile.views.list({
+     *         sheetId: "us_sh_YOUR_ID"
+     *     })
+     */
+    public async list(
+        request: Flatfile.ListViewsRequest,
+        requestOptions?: Views.RequestOptions
+    ): Promise<Flatfile.ListViewsResponse> {
+        const { sheetId } = request;
+        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        _queryParams["sheetId"] = sheetId;
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                "/views"
+            ),
+            method: "GET",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            queryParameters: _queryParams,
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.ListViewsResponse.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            switch (_response.error.statusCode) {
+                case 400:
+                    throw new Flatfile.BadRequestError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                case 404:
+                    throw new Flatfile.NotFoundError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                default:
+                    throw new errors.FlatfileError({
+                        statusCode: _response.error.statusCode,
+                        body: _response.error.body,
+                    });
+            }
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    /**
+     * Add a new view to the space
+     * @throws {@link Flatfile.BadRequestError}
+     * @throws {@link Flatfile.NotFoundError}
+     *
+     * @example
+     *     await flatfile.views.create({
+     *         sheetId: "us_sh_YOUR_ID",
+     *         name: "My View",
+     *         config: {
+     *             filter: Flatfile.Filter.Error,
+     *             filterField: "email",
+     *             q: "firstname like %John%",
+     *             sortField: "email",
+     *             sortDirection: Flatfile.SortDirection.Asc
+     *         }
+     *     })
+     */
+    public async create(
+        request: Flatfile.ViewCreate,
+        requestOptions?: Views.RequestOptions
+    ): Promise<Flatfile.ViewResponse> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                "/views"
+            ),
+            method: "POST",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            body: await serializers.ViewCreate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.ViewResponse.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            switch (_response.error.statusCode) {
+                case 400:
+                    throw new Flatfile.BadRequestError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                case 404:
+                    throw new Flatfile.NotFoundError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                default:
+                    throw new errors.FlatfileError({
+                        statusCode: _response.error.statusCode,
+                        body: _response.error.body,
+                    });
+            }
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    /**
+     * Returns a single view
+     * @throws {@link Flatfile.BadRequestError}
+     * @throws {@link Flatfile.NotFoundError}
+     *
+     * @example
+     *     await flatfile.views.get("us_vi_YOUR_ID")
+     */
+    public async get(viewId: Flatfile.ViewId, requestOptions?: Views.RequestOptions): Promise<Flatfile.ViewResponse> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                `/views/${await serializers.ViewId.jsonOrThrow(viewId)}`
+            ),
+            method: "GET",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.ViewResponse.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            switch (_response.error.statusCode) {
+                case 400:
+                    throw new Flatfile.BadRequestError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                case 404:
+                    throw new Flatfile.NotFoundError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                default:
+                    throw new errors.FlatfileError({
+                        statusCode: _response.error.statusCode,
+                        body: _response.error.body,
+                    });
+            }
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    /**
+     * Updates a single view
+     * @throws {@link Flatfile.BadRequestError}
+     * @throws {@link Flatfile.NotFoundError}
+     *
+     * @example
+     *     await flatfile.views.update("us_vi_YOUR_ID", {
+     *         name: "My View",
+     *         config: {
+     *             filter: Flatfile.Filter.Error,
+     *             filterField: "email",
+     *             q: "firstname like %John%",
+     *             sortField: "email",
+     *             sortDirection: Flatfile.SortDirection.Asc
+     *         }
+     *     })
+     */
+    public async update(
+        viewId: Flatfile.ViewId,
+        request: Flatfile.ViewUpdate,
+        requestOptions?: Views.RequestOptions
+    ): Promise<Flatfile.ViewResponse> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                `/views/${await serializers.ViewId.jsonOrThrow(viewId)}`
+            ),
+            method: "PATCH",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            body: await serializers.ViewUpdate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.ViewResponse.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            switch (_response.error.statusCode) {
+                case 400:
+                    throw new Flatfile.BadRequestError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                case 404:
+                    throw new Flatfile.NotFoundError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                default:
+                    throw new errors.FlatfileError({
+                        statusCode: _response.error.statusCode,
+                        body: _response.error.body,
+                    });
+            }
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    /**
+     * Deletes a single view
+     *
+     * @example
+     *     await flatfile.views.delete("us_vi_YOUR_ID")
+     */
+    public async delete(viewId: Flatfile.ViewId, requestOptions?: Views.RequestOptions): Promise<Flatfile.Success> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                `/views/${await serializers.ViewId.jsonOrThrow(viewId)}`
+            ),
+            method: "DELETE",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.Success.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            throw new errors.FlatfileError({
+                statusCode: _response.error.statusCode,
+                body: _response.error.body,
+            });
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    protected async _getAuthorizationHeader() {
+        const bearer = await core.Supplier.get(this._options.token);
+        if (bearer != null) {
+            return `Bearer ${bearer}`;
+        }
+
+        return undefined;
+    }
+}
diff --git a/src/api/resources/views/client/index.ts b/src/api/resources/views/client/index.ts
new file mode 100644
index 0000000..415726b
--- /dev/null
+++ b/src/api/resources/views/client/index.ts
@@ -0,0 +1 @@
+export * from "./requests";
diff --git a/src/api/resources/views/client/requests/ListViewsRequest.ts b/src/api/resources/views/client/requests/ListViewsRequest.ts
new file mode 100644
index 0000000..87b0341
--- /dev/null
+++ b/src/api/resources/views/client/requests/ListViewsRequest.ts
@@ -0,0 +1,18 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../../..";
+
+/**
+ * @example
+ *     {
+ *         sheetId: "us_sh_YOUR_ID"
+ *     }
+ */
+export interface ListViewsRequest {
+    /**
+     * The associated sheet ID of the view.
+     */
+    sheetId: Flatfile.SheetId;
+}
diff --git a/src/api/resources/views/client/requests/index.ts b/src/api/resources/views/client/requests/index.ts
new file mode 100644
index 0000000..ca751ea
--- /dev/null
+++ b/src/api/resources/views/client/requests/index.ts
@@ -0,0 +1 @@
+export { ListViewsRequest } from "./ListViewsRequest";
diff --git a/src/api/resources/views/index.ts b/src/api/resources/views/index.ts
new file mode 100644
index 0000000..c9240f8
--- /dev/null
+++ b/src/api/resources/views/index.ts
@@ -0,0 +1,2 @@
+export * from "./types";
+export * from "./client";
diff --git a/src/api/resources/views/types/ListViewsResponse.ts b/src/api/resources/views/types/ListViewsResponse.ts
new file mode 100644
index 0000000..d04f9b7
--- /dev/null
+++ b/src/api/resources/views/types/ListViewsResponse.ts
@@ -0,0 +1,32 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+/**
+ * @example
+ *     {
+ *         data: [{
+ *                 id: "us_vi_YOUR_ID",
+ *                 sheetId: "us_sh_YOUR_ID",
+ *                 name: "My View",
+ *                 config: {
+ *                     filter: Flatfile.Filter.Error,
+ *                     filterField: "email",
+ *                     q: "firstname like %John%",
+ *                     sortField: "email",
+ *                     sortDirection: Flatfile.SortDirection.Asc
+ *                 }
+ *             }],
+ *         pagination: {
+ *             currentPage: 3,
+ *             pageCount: 50,
+ *             totalCount: 100
+ *         }
+ *     }
+ */
+export interface ListViewsResponse {
+    pagination?: Flatfile.Pagination;
+    data: Flatfile.View[];
+}
diff --git a/src/api/resources/views/types/View.ts b/src/api/resources/views/types/View.ts
new file mode 100644
index 0000000..acee5c6
--- /dev/null
+++ b/src/api/resources/views/types/View.ts
@@ -0,0 +1,33 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+/**
+ * A view
+ *
+ * @example
+ *     {
+ *         id: "us_vi_YOUR_ID",
+ *         sheetId: "us_sh_YOUR_ID",
+ *         name: "My View",
+ *         config: {
+ *             filter: Flatfile.Filter.Error,
+ *             filterField: "email",
+ *             q: "firstname like %John%",
+ *             sortField: "email",
+ *             sortDirection: Flatfile.SortDirection.Asc
+ *         }
+ *     }
+ */
+export interface View {
+    /** The ID of the view */
+    id: Flatfile.ViewId;
+    /** The associated sheet ID of the view */
+    sheetId: Flatfile.SheetId;
+    /** The name of the view */
+    name: string;
+    /** The view filters of the view */
+    config: Flatfile.ViewConfig;
+}
diff --git a/src/api/resources/views/types/ViewConfig.ts b/src/api/resources/views/types/ViewConfig.ts
new file mode 100644
index 0000000..2176fbc
--- /dev/null
+++ b/src/api/resources/views/types/ViewConfig.ts
@@ -0,0 +1,51 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+/**
+ * The configuration of a view. Filters, sorting, and search query.
+ *
+ * @example
+ *     {
+ *         filter: Flatfile.Filter.Error,
+ *         filterField: "email",
+ *         q: "firstname like %John%",
+ *         sortField: "email",
+ *         sortDirection: Flatfile.SortDirection.Asc
+ *     }
+ */
+export interface ViewConfig {
+    /** Deprecated, use `commitId` instead. */
+    versionId?: Flatfile.VersionId;
+    commitId?: Flatfile.CommitId;
+    /** Deprecated, use `sinceCommitId` instead. */
+    sinceVersionId?: Flatfile.VersionId;
+    sinceCommitId?: Flatfile.CommitId;
+    sortField?: Flatfile.SortField;
+    sortDirection?: Flatfile.SortDirection;
+    filter?: Flatfile.Filter;
+    /** Name of field by which to filter records */
+    filterField?: Flatfile.FilterField;
+    searchValue?: Flatfile.SearchValue;
+    searchField?: Flatfile.SearchField;
+    /** The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records. Maximum of 100 allowed. */
+    ids?: Flatfile.RecordId[];
+    /** Number of records to return in a page (default 10,000) */
+    pageSize?: number;
+    /** Based on pageSize, which page of records to return (Note - numbers start at 1) */
+    pageNumber?: number;
+    /** **DEPRECATED** Use GET /sheets/:sheetId/counts */
+    includeCounts?: boolean;
+    /** The length of the record result set, returned as counts.total */
+    includeLength?: boolean;
+    /** If true, linked records will be included in the results. Defaults to false. */
+    includeLinks?: boolean;
+    /** Include error messages, defaults to false. */
+    includeMessages?: boolean;
+    /** if "for" is provided, the query parameters will be pulled from the event payload */
+    for?: Flatfile.EventId;
+    /** An FFQL query used to filter the result set */
+    q?: string;
+}
diff --git a/src/api/resources/views/types/ViewCreate.ts b/src/api/resources/views/types/ViewCreate.ts
new file mode 100644
index 0000000..5a0144f
--- /dev/null
+++ b/src/api/resources/views/types/ViewCreate.ts
@@ -0,0 +1,25 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+/**
+ * @example
+ *     {
+ *         sheetId: "us_sh_YOUR_ID",
+ *         name: "My View",
+ *         config: {
+ *             filter: Flatfile.Filter.Error,
+ *             filterField: "email",
+ *             q: "firstname like %John%",
+ *             sortField: "email",
+ *             sortDirection: Flatfile.SortDirection.Asc
+ *         }
+ *     }
+ */
+export interface ViewCreate {
+    sheetId: Flatfile.SheetId;
+    name: string;
+    config: Flatfile.ViewConfig;
+}
diff --git a/src/api/resources/views/types/ViewResponse.ts b/src/api/resources/views/types/ViewResponse.ts
new file mode 100644
index 0000000..919cc07
--- /dev/null
+++ b/src/api/resources/views/types/ViewResponse.ts
@@ -0,0 +1,26 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+/**
+ * @example
+ *     {
+ *         data: {
+ *             id: "us_vi_YOUR_ID",
+ *             sheetId: "us_sh_YOUR_ID",
+ *             name: "My View",
+ *             config: {
+ *                 filter: Flatfile.Filter.Error,
+ *                 filterField: "email",
+ *                 q: "firstname like %John%",
+ *                 sortField: "email",
+ *                 sortDirection: Flatfile.SortDirection.Asc
+ *             }
+ *         }
+ *     }
+ */
+export interface ViewResponse {
+    data: Flatfile.View;
+}
diff --git a/src/api/resources/views/types/ViewUpdate.ts b/src/api/resources/views/types/ViewUpdate.ts
new file mode 100644
index 0000000..bafc352
--- /dev/null
+++ b/src/api/resources/views/types/ViewUpdate.ts
@@ -0,0 +1,23 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+/**
+ * @example
+ *     {
+ *         name: "My View",
+ *         config: {
+ *             filter: Flatfile.Filter.Error,
+ *             filterField: "email",
+ *             q: "firstname like %John%",
+ *             sortField: "email",
+ *             sortDirection: Flatfile.SortDirection.Asc
+ *         }
+ *     }
+ */
+export interface ViewUpdate {
+    name?: string;
+    config: Flatfile.ViewConfig;
+}
diff --git a/src/api/resources/views/types/index.ts b/src/api/resources/views/types/index.ts
new file mode 100644
index 0000000..078b651
--- /dev/null
+++ b/src/api/resources/views/types/index.ts
@@ -0,0 +1,6 @@
+export * from "./ViewConfig";
+export * from "./View";
+export * from "./ListViewsResponse";
+export * from "./ViewResponse";
+export * from "./ViewCreate";
+export * from "./ViewUpdate";
diff --git a/src/api/resources/workbooks/client/Client.ts b/src/api/resources/workbooks/client/Client.ts
index 9c3c840..2b89420 100644
--- a/src/api/resources/workbooks/client/Client.ts
+++ b/src/api/resources/workbooks/client/Client.ts
@@ -61,3 +61,3 @@ export class Workbooks {
@@ -168,3 +168,3 @@ export class Workbooks {
@@ -245,3 +245,3 @@ export class Workbooks {
@@ -331,3 +331,3 @@ export class Workbooks {
@@ -428,3 +428,3 @@ export class Workbooks {
@@ -520,3 +520,3 @@ export class Workbooks {
@@ -581,3 +581,3 @@ export class Workbooks {
diff --git a/src/serialization/resources/commons/types/ViewId.ts b/src/serialization/resources/commons/types/ViewId.ts
new file mode 100644
index 0000000..6d7b58d
--- /dev/null
+++ b/src/serialization/resources/commons/types/ViewId.ts
@@ -0,0 +1,13 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+
+export const ViewId: core.serialization.Schema<serializers.ViewId.Raw, Flatfile.ViewId> = core.serialization.string();
+
+export declare namespace ViewId {
+    type Raw = string;
+}
diff --git a/src/serialization/resources/commons/types/index.ts b/src/serialization/resources/commons/types/index.ts
index baa887d..c74eb67 100644
--- a/src/serialization/resources/commons/types/index.ts
+++ b/src/serialization/resources/commons/types/index.ts
@@ -25,2 +25,3 @@ export * from "./FamilyId";
 export * from "./PromptId";
+export * from "./ViewId";
 export * from "./DataRetentionPolicyId";
diff --git a/src/serialization/resources/index.ts b/src/serialization/resources/index.ts
index 5843137..19a6b2a 100644
--- a/src/serialization/resources/index.ts
+++ b/src/serialization/resources/index.ts
@@ -54,2 +54,4 @@ export * as versions from "./versions";
 export * from "./versions/types";
+export * as views from "./views";
+export * from "./views/types";
 export * as workbooks from "./workbooks";
diff --git a/src/serialization/resources/views/index.ts b/src/serialization/resources/views/index.ts
new file mode 100644
index 0000000..eea524d
--- /dev/null
+++ b/src/serialization/resources/views/index.ts
@@ -0,0 +1 @@
+export * from "./types";
diff --git a/src/serialization/resources/views/types/ListViewsResponse.ts b/src/serialization/resources/views/types/ListViewsResponse.ts
new file mode 100644
index 0000000..39f5125
--- /dev/null
+++ b/src/serialization/resources/views/types/ListViewsResponse.ts
@@ -0,0 +1,24 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+import { Pagination } from "../../commons/types/Pagination";
+import { View } from "./View";
+
+export const ListViewsResponse: core.serialization.ObjectSchema<
+    serializers.ListViewsResponse.Raw,
+    Flatfile.ListViewsResponse
+> = core.serialization.object({
+    pagination: Pagination.optional(),
+    data: core.serialization.list(View),
+});
+
+export declare namespace ListViewsResponse {
+    interface Raw {
+        pagination?: Pagination.Raw | null;
+        data: View.Raw[];
+    }
+}
diff --git a/src/serialization/resources/views/types/View.ts b/src/serialization/resources/views/types/View.ts
new file mode 100644
index 0000000..c387b7f
--- /dev/null
+++ b/src/serialization/resources/views/types/View.ts
@@ -0,0 +1,26 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+import { ViewId } from "../../commons/types/ViewId";
+import { SheetId } from "../../commons/types/SheetId";
+import { ViewConfig } from "./ViewConfig";
+
+export const View: core.serialization.ObjectSchema<serializers.View.Raw, Flatfile.View> = core.serialization.object({
+    id: ViewId,
+    sheetId: SheetId,
+    name: core.serialization.string(),
+    config: ViewConfig,
+});
+
+export declare namespace View {
+    interface Raw {
+        id: ViewId.Raw;
+        sheetId: SheetId.Raw;
+        name: string;
+        config: ViewConfig.Raw;
+    }
+}
diff --git a/src/serialization/resources/views/types/ViewConfig.ts b/src/serialization/resources/views/types/ViewConfig.ts
new file mode 100644
index 0000000..809f5b9
--- /dev/null
+++ b/src/serialization/resources/views/types/ViewConfig.ts
@@ -0,0 +1,64 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+import { VersionId } from "../../commons/types/VersionId";
+import { CommitId } from "../../commons/types/CommitId";
+import { SortField } from "../../commons/types/SortField";
+import { SortDirection } from "../../commons/types/SortDirection";
+import { Filter } from "../../commons/types/Filter";
+import { FilterField } from "../../commons/types/FilterField";
+import { SearchValue } from "../../commons/types/SearchValue";
+import { SearchField } from "../../commons/types/SearchField";
+import { RecordId } from "../../commons/types/RecordId";
+import { EventId } from "../../commons/types/EventId";
+
+export const ViewConfig: core.serialization.ObjectSchema<serializers.ViewConfig.Raw, Flatfile.ViewConfig> =
+    core.serialization.object({
+        versionId: VersionId.optional(),
+        commitId: CommitId.optional(),
+        sinceVersionId: VersionId.optional(),
+        sinceCommitId: CommitId.optional(),
+        sortField: SortField.optional(),
+        sortDirection: SortDirection.optional(),
+        filter: Filter.optional(),
+        filterField: FilterField.optional(),
+        searchValue: SearchValue.optional(),
+        searchField: SearchField.optional(),
+        ids: core.serialization.list(RecordId).optional(),
+        pageSize: core.serialization.number().optional(),
+        pageNumber: core.serialization.number().optional(),
+        includeCounts: core.serialization.boolean().optional(),
+        includeLength: core.serialization.boolean().optional(),
+        includeLinks: core.serialization.boolean().optional(),
+        includeMessages: core.serialization.boolean().optional(),
+        for: EventId.optional(),
+        q: core.serialization.string().optional(),
+    });
+
+export declare namespace ViewConfig {
+    interface Raw {
+        versionId?: VersionId.Raw | null;
+        commitId?: CommitId.Raw | null;
+        sinceVersionId?: VersionId.Raw | null;
+        sinceCommitId?: CommitId.Raw | null;
+        sortField?: SortField.Raw | null;
+        sortDirection?: SortDirection.Raw | null;
+        filter?: Filter.Raw | null;
+        filterField?: FilterField.Raw | null;
+        searchValue?: SearchValue.Raw | null;
+        searchField?: SearchField.Raw | null;
+        ids?: RecordId.Raw[] | null;
+        pageSize?: number | null;
+        pageNumber?: number | null;
+        includeCounts?: boolean | null;
+        includeLength?: boolean | null;
+        includeLinks?: boolean | null;
+        includeMessages?: boolean | null;
+        for?: EventId.Raw | null;
+        q?: string | null;
+    }
+}
diff --git a/src/serialization/resources/views/types/ViewCreate.ts b/src/serialization/resources/views/types/ViewCreate.ts
new file mode 100644
index 0000000..d2a3e21
--- /dev/null
+++ b/src/serialization/resources/views/types/ViewCreate.ts
@@ -0,0 +1,24 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+import { SheetId } from "../../commons/types/SheetId";
+import { ViewConfig } from "./ViewConfig";
+
+export const ViewCreate: core.serialization.ObjectSchema<serializers.ViewCreate.Raw, Flatfile.ViewCreate> =
+    core.serialization.object({
+        sheetId: SheetId,
+        name: core.serialization.string(),
+        config: ViewConfig,
+    });
+
+export declare namespace ViewCreate {
+    interface Raw {
+        sheetId: SheetId.Raw;
+        name: string;
+        config: ViewConfig.Raw;
+    }
+}
diff --git a/src/serialization/resources/views/types/ViewResponse.ts b/src/serialization/resources/views/types/ViewResponse.ts
new file mode 100644
index 0000000..c209f95
--- /dev/null
+++ b/src/serialization/resources/views/types/ViewResponse.ts
@@ -0,0 +1,19 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+import { View } from "./View";
+
+export const ViewResponse: core.serialization.ObjectSchema<serializers.ViewResponse.Raw, Flatfile.ViewResponse> =
+    core.serialization.object({
+        data: View,
+    });
+
+export declare namespace ViewResponse {
+    interface Raw {
+        data: View.Raw;
+    }
+}
diff --git a/src/serialization/resources/views/types/ViewUpdate.ts b/src/serialization/resources/views/types/ViewUpdate.ts
new file mode 100644
index 0000000..1c24845
--- /dev/null
+++ b/src/serialization/resources/views/types/ViewUpdate.ts
@@ -0,0 +1,21 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+import { ViewConfig } from "./ViewConfig";
+
+export const ViewUpdate: core.serialization.ObjectSchema<serializers.ViewUpdate.Raw, Flatfile.ViewUpdate> =
+    core.serialization.object({
+        name: core.serialization.string().optional(),
+        config: ViewConfig,
+    });
+
+export declare namespace ViewUpdate {
+    interface Raw {
+        name?: string | null;
+        config: ViewConfig.Raw;
+    }
+}
diff --git a/src/serialization/resources/views/types/index.ts b/src/serialization/resources/views/types/index.ts
new file mode 100644
index 0000000..078b651
--- /dev/null
+++ b/src/serialization/resources/views/types/index.ts
@@ -0,0 +1,6 @@
+export * from "./ViewConfig";
+export * from "./View";
+export * from "./ListViewsResponse";
+export * from "./ViewResponse";
+export * from "./ViewCreate";
+export * from "./ViewUpdate";

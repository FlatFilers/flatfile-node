diff --git a/.fernignore b/.fernignore
index 0ff4608..589017b 100644
--- a/.fernignore
+++ b/.fernignore
@@ -3,2 +3,3 @@
 README.md
+LICENSE.txt
 
@@ -6 +7,2 @@ src/wrapper
 src/index.ts
+
diff --git a/LICENSE.txt b/LICENSE.txt
new file mode 100644
index 0000000..92fa49e
--- /dev/null
+++ b/LICENSE.txt
@@ -0,0 +1,21 @@
+MIT License
+
+Copyright (c) [2024] [Flatfile, Inc.]
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
diff --git a/README.md b/README.md
index 8de0473..d74f93e 100644
--- a/README.md
+++ b/README.md
@@ -136 +136,5 @@ While we value open-source contributions to this SDK, this library is generated
 On the other hand, contributions to the README are always very welcome!
+
+## License
+
+This project is licensed under the MIT License - see the [LICENSE](LICENSE.txt) file for details.
diff --git a/package.json b/package.json
index 60282b1..6a1e2d6 100644
--- a/package.json
+++ b/package.json
@@ -2,3 +2,3 @@
     "name": "@flatfile/api",
-    "version": "1.6.2",
+    "version": "1.6.3",
     "private": false,
diff --git a/src/api/resources/agents/client/Client.ts b/src/api/resources/agents/client/Client.ts
index 7bcbc17..65635e2 100644
--- a/src/api/resources/agents/client/Client.ts
+++ b/src/api/resources/agents/client/Client.ts
@@ -46,3 +46,3 @@ export class Agents {
             },
@@ -126,3 +126,3 @@ export class Agents {
             },
@@ -207,3 +207,3 @@ export class Agents {
             },
@@ -297,3 +297,3 @@ export class Agents {
             },
@@ -387,3 +387,3 @@ export class Agents {
             },
@@ -496,3 +496,3 @@ export class Agents {
             },
@@ -605,3 +605,3 @@ export class Agents {
             },
@@ -696,3 +696,3 @@ export class Agents {
             },
diff --git a/src/api/resources/apps/client/Client.ts b/src/api/resources/apps/client/Client.ts
index ec7c87b..8d65d9d 100644
--- a/src/api/resources/apps/client/Client.ts
+++ b/src/api/resources/apps/client/Client.ts
@@ -43,3 +43,3 @@ export class Apps {
             },
@@ -99,3 +99,3 @@ export class Apps {
             },
@@ -168,3 +168,3 @@ export class Apps {
             },
@@ -238,3 +238,3 @@ export class Apps {
             },
diff --git a/src/api/resources/auth/client/Client.ts b/src/api/resources/auth/client/Client.ts
index ed952f7..891b70a 100644
--- a/src/api/resources/auth/client/Client.ts
+++ b/src/api/resources/auth/client/Client.ts
@@ -55,3 +55,3 @@ export class Auth {
             },
@@ -144,3 +144,3 @@ export class Auth {
             },
@@ -235,3 +235,3 @@ export class Auth {
             },
@@ -326,3 +326,3 @@ export class Auth {
             },
diff --git a/src/api/resources/cells/client/Client.ts b/src/api/resources/cells/client/Client.ts
index 430978c..0932ea5 100644
--- a/src/api/resources/cells/client/Client.ts
+++ b/src/api/resources/cells/client/Client.ts
@@ -108,3 +108,3 @@ export class Cells {
             },
diff --git a/src/api/resources/commits/client/Client.ts b/src/api/resources/commits/client/Client.ts
index dcd1833..f2fecd5 100644
--- a/src/api/resources/commits/client/Client.ts
+++ b/src/api/resources/commits/client/Client.ts
@@ -51,3 +51,3 @@ export class Commits {
             },
@@ -132,3 +132,3 @@ export class Commits {
             },
@@ -213,3 +213,3 @@ export class Commits {
             },
diff --git a/src/api/resources/commons/types/FamilyId.ts b/src/api/resources/commons/types/FamilyId.ts
new file mode 100644
index 0000000..c7e07a9
--- /dev/null
+++ b/src/api/resources/commons/types/FamilyId.ts
@@ -0,0 +1,11 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+/**
+ * Mapping Family ID
+ *
+ * @example
+ *     "us_mf_YOUR_ID"
+ */
+export type FamilyId = string;
diff --git a/src/api/resources/commons/types/InputField.ts b/src/api/resources/commons/types/InputField.ts
index 7b05796..8c61860 100644
--- a/src/api/resources/commons/types/InputField.ts
+++ b/src/api/resources/commons/types/InputField.ts
@@ -15,2 +15,4 @@ export interface InputField {
     type: string;
+    /** Default value for a Field. */
+    defaultValue?: any;
     /** Additional configuration for enum Fields. */
diff --git a/src/api/resources/commons/types/SearchValue.ts b/src/api/resources/commons/types/SearchValue.ts
index 2b13007..b52d270 100644
--- a/src/api/resources/commons/types/SearchValue.ts
+++ b/src/api/resources/commons/types/SearchValue.ts
@@ -5,3 +5,3 @@
 /**
- * Search the entire sheet for the given value, returning matching rows
+ * Search for the given value, returning matching rows. For exact matches, wrap the value in double quotes ("Bob"). To search for null values, send empty double quotes ("")
  */
diff --git a/src/api/resources/commons/types/index.ts b/src/api/resources/commons/types/index.ts
index 66f5304..dd3cab8 100644
--- a/src/api/resources/commons/types/index.ts
+++ b/src/api/resources/commons/types/index.ts
@@ -22,2 +22,3 @@ export * from "./MappingId";
 export * from "./ProgramId";
+export * from "./FamilyId";
 export * from "./DataRetentionPolicyId";
diff --git a/src/api/resources/dataRetentionPolicies/client/Client.ts b/src/api/resources/dataRetentionPolicies/client/Client.ts
index 005a590..0a06eba 100644
--- a/src/api/resources/dataRetentionPolicies/client/Client.ts
+++ b/src/api/resources/dataRetentionPolicies/client/Client.ts
@@ -59,3 +59,3 @@ export class DataRetentionPolicies {
             },
@@ -148,3 +148,3 @@ export class DataRetentionPolicies {
             },
@@ -233,3 +233,3 @@ export class DataRetentionPolicies {
             },
@@ -322,3 +322,3 @@ export class DataRetentionPolicies {
             },
@@ -404,3 +404,3 @@ export class DataRetentionPolicies {
             },
diff --git a/src/api/resources/documents/client/Client.ts b/src/api/resources/documents/client/Client.ts
index 6d8dc94..be2b4af 100644
--- a/src/api/resources/documents/client/Client.ts
+++ b/src/api/resources/documents/client/Client.ts
@@ -51,3 +51,3 @@ export class Documents {
             },
@@ -146,3 +146,3 @@ export class Documents {
             },
@@ -234,3 +234,3 @@ export class Documents {
             },
@@ -325,3 +325,3 @@ export class Documents {
             },
@@ -410,3 +410,3 @@ export class Documents {
             },
diff --git a/src/api/resources/environments/client/Client.ts b/src/api/resources/environments/client/Client.ts
index 1b59d28..a0cffe3 100644
--- a/src/api/resources/environments/client/Client.ts
+++ b/src/api/resources/environments/client/Client.ts
@@ -59,3 +59,3 @@ export class Environments {
             },
@@ -127,3 +127,3 @@ export class Environments {
             },
@@ -194,3 +194,3 @@ export class Environments {
             },
@@ -279,3 +279,3 @@ export class Environments {
             },
@@ -370,3 +370,3 @@ export class Environments {
             },
@@ -429,3 +429,3 @@ export class Environments {
             },
diff --git a/src/api/resources/events/client/Client.ts b/src/api/resources/events/client/Client.ts
index 965b852..1f6a8fe 100644
--- a/src/api/resources/events/client/Client.ts
+++ b/src/api/resources/events/client/Client.ts
@@ -83,3 +83,3 @@ export class Events {
             },
@@ -157,3 +157,3 @@ export class Events {
             },
@@ -234,3 +234,3 @@ export class Events {
             },
@@ -284,3 +284,3 @@ export class Events {
             },
@@ -355,3 +355,3 @@ export class Events {
             },
diff --git a/src/api/resources/events/types/Domain.ts b/src/api/resources/events/types/Domain.ts
index 4f025e5..36b10c1 100644
--- a/src/api/resources/events/types/Domain.ts
+++ b/src/api/resources/events/types/Domain.ts
@@ -10,3 +10,3 @@
  */
-export type Domain = "file" | "space" | "workbook" | "job" | "document" | "sheet" | "program";
+export type Domain = "file" | "space" | "workbook" | "job" | "document" | "sheet" | "program" | "secret";
 
@@ -20,2 +20,3 @@ export const Domain = {
     Program: "program",
+    Secret: "secret",
 } as const;
diff --git a/src/api/resources/events/types/Event.ts b/src/api/resources/events/types/Event.ts
index ddb1c06..1ec89fd 100644
--- a/src/api/resources/events/types/Event.ts
+++ b/src/api/resources/events/types/Event.ts
@@ -40,3 +40,6 @@ export type Event =
     | Flatfile.Event.SpaceDeleted
+    | Flatfile.Event.SpaceArchived
     | Flatfile.Event.SpaceExpired
+    | Flatfile.Event.SpaceGuestAdded
+    | Flatfile.Event.SpaceGuestRemoved
     | Flatfile.Event.DocumentCreated
@@ -73,2 +76,5 @@ export type Event =
     | Flatfile.Event.CommitCompleted
+    | Flatfile.Event.SecretCreated
+    | Flatfile.Event.SecretUpdated
+    | Flatfile.Event.SecretDeleted
     | Flatfile.Event.LayerCreated;
@@ -100,2 +106,6 @@ export declare namespace Event {
 
+    interface SpaceArchived extends Flatfile.GenericEvent {
+        topic: "space:archived";
+    }
+
     interface SpaceExpired extends Flatfile.GenericEvent {
@@ -104,2 +114,10 @@ export declare namespace Event {
 
+    interface SpaceGuestAdded extends Flatfile.GenericEvent {
+        topic: "space:guestAdded";
+    }
+
+    interface SpaceGuestRemoved extends Flatfile.GenericEvent {
+        topic: "space:guestRemoved";
+    }
+
     interface DocumentCreated extends Flatfile.GenericEvent {
@@ -232,2 +250,14 @@ export declare namespace Event {
 
+    interface SecretCreated extends Flatfile.GenericEvent {
+        topic: "secret:created";
+    }
+
+    interface SecretUpdated extends Flatfile.GenericEvent {
+        topic: "secret:updated";
+    }
+
+    interface SecretDeleted extends Flatfile.GenericEvent {
+        topic: "secret:deleted";
+    }
+
     interface LayerCreated extends Flatfile.GenericEvent {
diff --git a/src/api/resources/events/types/EventTopic.ts b/src/api/resources/events/types/EventTopic.ts
index 6712c22..9fdb9a0 100644
--- a/src/api/resources/events/types/EventTopic.ts
+++ b/src/api/resources/events/types/EventTopic.ts
@@ -17,3 +17,6 @@ export type EventTopic =
     | "space:deleted"
+    | "space:archived"
     | "space:expired"
+    | "space:guestAdded"
+    | "space:guestRemoved"
     | "document:created"
@@ -50,3 +53,6 @@ export type EventTopic =
     | "commit:completed"
-    | "layer:created";
+    | "layer:created"
+    | "secret:created"
+    | "secret:updated"
+    | "secret:deleted";
 
@@ -59,3 +65,6 @@ export const EventTopic = {
     SpaceDeleted: "space:deleted",
+    SpaceArchived: "space:archived",
     SpaceExpired: "space:expired",
+    SpaceGuestAdded: "space:guestAdded",
+    SpaceGuestRemoved: "space:guestRemoved",
     DocumentCreated: "document:created",
@@ -93,2 +102,5 @@ export const EventTopic = {
     LayerCreated: "layer:created",
+    SecretCreated: "secret:created",
+    SecretUpdated: "secret:updated",
+    SecretDeleted: "secret:deleted",
 } as const;
diff --git a/src/api/resources/files/client/Client.ts b/src/api/resources/files/client/Client.ts
index 9a87e46..b733f6a 100644
--- a/src/api/resources/files/client/Client.ts
+++ b/src/api/resources/files/client/Client.ts
@@ -64,3 +64,3 @@ export class Files {
             },
@@ -136,3 +136,3 @@ export class Files {
                 "Content-Length": (await core.getFormDataContentLength(_request)).toString(),
@@ -208,3 +208,3 @@ export class Files {
             },
@@ -285,3 +285,3 @@ export class Files {
             },
@@ -372,3 +372,3 @@ export class Files {
             },
@@ -446,3 +446,3 @@ export class Files {
             },
diff --git a/src/api/resources/guests/client/Client.ts b/src/api/resources/guests/client/Client.ts
index 2f6eb0d..3a1ef4e 100644
--- a/src/api/resources/guests/client/Client.ts
+++ b/src/api/resources/guests/client/Client.ts
@@ -58,3 +58,3 @@ export class Guests {
             },
@@ -129,3 +129,3 @@ export class Guests {
             },
@@ -189,3 +189,3 @@ export class Guests {
             },
@@ -245,3 +245,3 @@ export class Guests {
             },
@@ -308,3 +308,3 @@ export class Guests {
             },
@@ -375,3 +375,3 @@ export class Guests {
             },
@@ -437,3 +437,3 @@ export class Guests {
             },
diff --git a/src/api/resources/jobs/client/Client.ts b/src/api/resources/jobs/client/Client.ts
index b577a24..9aeeb14 100644
--- a/src/api/resources/jobs/client/Client.ts
+++ b/src/api/resources/jobs/client/Client.ts
@@ -77,3 +77,3 @@ export class Jobs {
             },
@@ -131,3 +131,3 @@ export class Jobs {
             },
@@ -182,3 +182,3 @@ export class Jobs {
             },
@@ -236,3 +236,3 @@ export class Jobs {
             },
@@ -287,3 +287,3 @@ export class Jobs {
             },
@@ -343,3 +343,3 @@ export class Jobs {
             },
@@ -402,3 +402,3 @@ export class Jobs {
             },
@@ -445,5 +445,36 @@ export class Jobs {
      *     await flatfile.jobs.updateExecutionPlan("us_jb_YOUR_ID", {
-     *         fieldMapping: [{}, {}],
-     *         unmappedSourceFields: [{}],
-     *         unmappedDestinationFields: [{}],
+     *         fieldMapping: [{
+     *                 sourceField: {
+     *                     type: "string",
+     *                     key: "firstName"
+     *                 },
+     *                 destinationField: {
+     *                     type: "string",
+     *                     key: "firstName",
+     *                     label: "First Name"
+     *                 }
+     *             }, {
+     *                 sourceField: {
+     *                     type: "string",
+     *                     key: "lastName"
+     *                 },
+     *                 destinationField: {
+     *                     type: "string",
+     *                     key: "lastName",
+     *                     label: "Last Name"
+     *                 }
+     *             }],
+     *         unmappedSourceFields: [{
+     *                 sourceField: {
+     *                     type: "string",
+     *                     key: "email"
+     *                 }
+     *             }],
+     *         unmappedDestinationFields: [{
+     *                 destinationField: {
+     *                     type: "string",
+     *                     key: "email",
+     *                     label: "Email"
+     *                 }
+     *             }],
      *         fileId: "us_fl_YOUR_ID",
@@ -468,3 +499,3 @@ export class Jobs {
             },
@@ -526,3 +557,3 @@ export class Jobs {
             },
@@ -593,3 +624,3 @@ export class Jobs {
             },
@@ -656,3 +687,3 @@ export class Jobs {
             },
@@ -728,3 +759,3 @@ export class Jobs {
             },
@@ -804,3 +835,3 @@ export class Jobs {
             },
@@ -870,3 +901,3 @@ export class Jobs {
             },
@@ -927,3 +958,3 @@ export class Jobs {
             },
@@ -983,3 +1014,3 @@ export class Jobs {
             },
@@ -1046,3 +1077,3 @@ export class Jobs {
             },
diff --git a/src/api/resources/jobs/types/Job.ts b/src/api/resources/jobs/types/Job.ts
index f8a1a73..7aba335 100644
--- a/src/api/resources/jobs/types/Job.ts
+++ b/src/api/resources/jobs/types/Job.ts
@@ -21,2 +21,3 @@ import * as Flatfile from "../../..";
  *         destination: "us_wb_YOUR_ID",
+ *         config: undefined,
  *         trigger: Flatfile.Trigger.Immediate,
diff --git a/src/api/resources/jobs/types/JobExecutionPlan.ts b/src/api/resources/jobs/types/JobExecutionPlan.ts
index 9f6eb5b..4798527 100644
--- a/src/api/resources/jobs/types/JobExecutionPlan.ts
+++ b/src/api/resources/jobs/types/JobExecutionPlan.ts
@@ -12,2 +12,11 @@ import * as Flatfile from "../../..";
  *         fieldMapping: [{
+ *                 sourceField: {
+ *                     type: "string",
+ *                     key: "firstName"
+ *                 },
+ *                 destinationField: {
+ *                     type: "string",
+ *                     key: "firstName",
+ *                     label: "First Name"
+ *                 },
  *                 preview: ["John", "Suzy", "Joe"],
@@ -19,2 +28,11 @@ import * as Flatfile from "../../..";
  *             }, {
+ *                 sourceField: {
+ *                     type: "string",
+ *                     key: "lastName"
+ *                 },
+ *                 destinationField: {
+ *                     type: "string",
+ *                     key: "lastName",
+ *                     label: "Last Name"
+ *                 },
  *                 preview: ["Smith", "Que", "Montana"],
diff --git a/src/api/resources/jobs/types/JobExecutionPlanRequest.ts b/src/api/resources/jobs/types/JobExecutionPlanRequest.ts
index 9c663fe..92d2cc2 100644
--- a/src/api/resources/jobs/types/JobExecutionPlanRequest.ts
+++ b/src/api/resources/jobs/types/JobExecutionPlanRequest.ts
@@ -9,5 +9,36 @@ import * as Flatfile from "../../..";
  *     {
- *         fieldMapping: [{}, {}],
- *         unmappedSourceFields: [{}],
- *         unmappedDestinationFields: [{}],
+ *         fieldMapping: [{
+ *                 sourceField: {
+ *                     type: "string",
+ *                     key: "firstName"
+ *                 },
+ *                 destinationField: {
+ *                     type: "string",
+ *                     key: "firstName",
+ *                     label: "First Name"
+ *                 }
+ *             }, {
+ *                 sourceField: {
+ *                     type: "string",
+ *                     key: "lastName"
+ *                 },
+ *                 destinationField: {
+ *                     type: "string",
+ *                     key: "lastName",
+ *                     label: "Last Name"
+ *                 }
+ *             }],
+ *         unmappedSourceFields: [{
+ *                 sourceField: {
+ *                     type: "string",
+ *                     key: "email"
+ *                 }
+ *             }],
+ *         unmappedDestinationFields: [{
+ *                 destinationField: {
+ *                     type: "string",
+ *                     key: "email",
+ *                     label: "Email"
+ *                 }
+ *             }],
  *         fileId: "us_fl_YOUR_ID",
diff --git a/src/api/resources/jobs/types/JobPlan.ts b/src/api/resources/jobs/types/JobPlan.ts
index 62d7c65..3702174 100644
--- a/src/api/resources/jobs/types/JobPlan.ts
+++ b/src/api/resources/jobs/types/JobPlan.ts
@@ -22,2 +22,3 @@ import * as Flatfile from "../../..";
  *             destination: "us_wb_YOUR_ID",
+ *             config: undefined,
  *             trigger: Flatfile.Trigger.Immediate,
@@ -40,2 +41,11 @@ import * as Flatfile from "../../..";
  *             fieldMapping: [{
+ *                     sourceField: {
+ *                         type: "string",
+ *                         key: "firstName"
+ *                     },
+ *                     destinationField: {
+ *                         type: "string",
+ *                         key: "firstName",
+ *                         label: "First Name"
+ *                     },
  *                     preview: ["John", "Suzy", "Joe"],
@@ -47,2 +57,11 @@ import * as Flatfile from "../../..";
  *                 }, {
+ *                     sourceField: {
+ *                         type: "string",
+ *                         key: "lastName"
+ *                     },
+ *                     destinationField: {
+ *                         type: "string",
+ *                         key: "lastName",
+ *                         label: "Last Name"
+ *                     },
  *                     preview: ["Smith", "Que", "Montana"],
diff --git a/src/api/resources/jobs/types/JobPlanResponse.ts b/src/api/resources/jobs/types/JobPlanResponse.ts
index 0e6805a..40723bb 100644
--- a/src/api/resources/jobs/types/JobPlanResponse.ts
+++ b/src/api/resources/jobs/types/JobPlanResponse.ts
@@ -21,2 +21,3 @@ import * as Flatfile from "../../..";
  *                 destination: "us_wb_YOUR_ID",
+ *                 config: undefined,
  *                 trigger: Flatfile.Trigger.Immediate,
@@ -39,2 +40,11 @@ import * as Flatfile from "../../..";
  *                 fieldMapping: [{
+ *                         sourceField: {
+ *                             type: "string",
+ *                             key: "firstName"
+ *                         },
+ *                         destinationField: {
+ *                             type: "string",
+ *                             key: "firstName",
+ *                             label: "First Name"
+ *                         },
  *                         preview: ["John", "Suzy", "Joe"],
@@ -46,2 +56,11 @@ import * as Flatfile from "../../..";
  *                     }, {
+ *                         sourceField: {
+ *                             type: "string",
+ *                             key: "lastName"
+ *                         },
+ *                         destinationField: {
+ *                             type: "string",
+ *                             key: "lastName",
+ *                             label: "Last Name"
+ *                         },
  *                         preview: ["Smith", "Que", "Montana"],
diff --git a/src/api/resources/jobs/types/JobResponse.ts b/src/api/resources/jobs/types/JobResponse.ts
index 1526607..eb4b4ab 100644
--- a/src/api/resources/jobs/types/JobResponse.ts
+++ b/src/api/resources/jobs/types/JobResponse.ts
@@ -20,2 +20,3 @@ import * as Flatfile from "../../..";
  *             destination: "us_wb_YOUR_ID",
+ *             config: undefined,
  *             trigger: Flatfile.Trigger.Immediate,
diff --git a/src/api/resources/jobs/types/JobUpdate.ts b/src/api/resources/jobs/types/JobUpdate.ts
index 2e8334e..dc23f9c 100644
--- a/src/api/resources/jobs/types/JobUpdate.ts
+++ b/src/api/resources/jobs/types/JobUpdate.ts
@@ -11,2 +11,3 @@ import * as Flatfile from "../../..";
  *     {
+ *         config: undefined,
  *         status: Flatfile.JobStatus.Complete,
diff --git a/src/api/resources/jobs/types/ListJobsResponse.ts b/src/api/resources/jobs/types/ListJobsResponse.ts
index c9970a4..eb997d2 100644
--- a/src/api/resources/jobs/types/ListJobsResponse.ts
+++ b/src/api/resources/jobs/types/ListJobsResponse.ts
@@ -25,2 +25,3 @@ import * as Flatfile from "../../..";
  *                 destination: "us_wb_YOUR_ID",
+ *                 config: undefined,
  *                 trigger: Flatfile.Trigger.Immediate,
diff --git a/src/api/resources/mapping/client/Client.ts b/src/api/resources/mapping/client/Client.ts
index e3675ef..b208b2f 100644
--- a/src/api/resources/mapping/client/Client.ts
+++ b/src/api/resources/mapping/client/Client.ts
@@ -33,3 +33,3 @@ export class Mapping {
      */
-    public async createMapping(
+    public async createMappingProgram(
         request: Flatfile.ProgramConfig,
@@ -48,3 +48,3 @@ export class Mapping {
             },
@@ -125,2 +125,3 @@ export class Mapping {
             environmentId,
+            namespace,
             sourceKeys,
@@ -153,2 +154,6 @@ export class Mapping {
 
+        if (namespace != null) {
+            _queryParams["namespace"] = namespace;
+        }
+
         if (sourceKeys != null) {
@@ -172,3 +177,3 @@ export class Mapping {
             },
@@ -225,3 +230,3 @@ export class Mapping {
     /**
-     * Add mapping rules to a program
+     * Get a mapping program
      * @throws {@link Flatfile.BadRequestError}
@@ -229,7 +234,6 @@ export class Mapping {
      */
-    public async createRules(
+    public async getMappingProgram(
         programId: Flatfile.ProgramId,
-        request: Flatfile.CreateMappingRulesRequest,
         requestOptions?: Mapping.RequestOptions
-    ): Promise<Flatfile.MappingRulesResponse> {
+    ): Promise<Flatfile.ProgramResponse> {
         const _response = await (this._options.fetcher ?? core.fetcher)({
@@ -237,5 +241,5 @@ export class Mapping {
                 (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
-                `/mapping/${await serializers.ProgramId.jsonOrThrow(programId)}/rules`
+                `/mapping/${await serializers.ProgramId.jsonOrThrow(programId)}`
             ),
-            method: "POST",
+            method: "GET",
             headers: {
@@ -245,6 +249,5 @@ export class Mapping {
             },
             contentType: "application/json",
-            body: await serializers.CreateMappingRulesRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
             timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
@@ -253,3 +256,3 @@ export class Mapping {
         if (_response.ok) {
-            return await serializers.MappingRulesResponse.parseOrThrow(_response.body, {
+            return await serializers.ProgramResponse.parseOrThrow(_response.body, {
                 unrecognizedObjectKeys: "passthrough",
@@ -308,11 +311,173 @@ export class Mapping {
     /**
-     * List all mapping rules in a program
+     * Updates a mapping program
      * @throws {@link Flatfile.BadRequestError}
      * @throws {@link Flatfile.NotFoundError}
-     *
-     * @example
-     *     await flatfile.mapping.listRules("us_mp_YOUR_ID")
      */
-    public async listRules(
+    public async updateMappingProgram(
+        programId: Flatfile.ProgramId,
+        request: Flatfile.ProgramConfig,
+        requestOptions?: Mapping.RequestOptions
+    ): Promise<Flatfile.ProgramResponse> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                `/mapping/${await serializers.ProgramId.jsonOrThrow(programId)}`
+            ),
+            method: "PATCH",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            body: await serializers.ProgramConfig.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.ProgramResponse.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            switch (_response.error.statusCode) {
+                case 400:
+                    throw new Flatfile.BadRequestError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                case 404:
+                    throw new Flatfile.NotFoundError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                default:
+                    throw new errors.FlatfileError({
+                        statusCode: _response.error.statusCode,
+                        body: _response.error.body,
+                    });
+            }
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    /**
+     * Deletes a mapping program
+     * @throws {@link Flatfile.BadRequestError}
+     * @throws {@link Flatfile.NotFoundError}
+     */
+    public async deleteMappingProgram(
+        programId: Flatfile.ProgramId,
+        requestOptions?: Mapping.RequestOptions
+    ): Promise<Flatfile.Success> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                `/mapping/${await serializers.ProgramId.jsonOrThrow(programId)}`
+            ),
+            method: "DELETE",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.Success.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            switch (_response.error.statusCode) {
+                case 400:
+                    throw new Flatfile.BadRequestError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                case 404:
+                    throw new Flatfile.NotFoundError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                default:
+                    throw new errors.FlatfileError({
+                        statusCode: _response.error.statusCode,
+                        body: _response.error.body,
+                    });
+            }
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    /**
+     * Add mapping rules to a program
+     * @throws {@link Flatfile.BadRequestError}
+     * @throws {@link Flatfile.NotFoundError}
+     */
+    public async createRules(
         programId: Flatfile.ProgramId,
+        request: Flatfile.CreateMappingRulesRequest,
         requestOptions?: Mapping.RequestOptions
@@ -324,3 +489,3 @@ export class Mapping {
             ),
-            method: "GET",
+            method: "POST",
             headers: {
@@ -330,5 +495,6 @@ export class Mapping {
             },
             contentType: "application/json",
+            body: await serializers.CreateMappingRulesRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
             timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
@@ -392,3 +558,3 @@ export class Mapping {
     /**
-     * Deletes a mapping rule from a program
+     * List all mapping rules in a program
      * @throws {@link Flatfile.BadRequestError}
@@ -397,9 +563,8 @@ export class Mapping {
      * @example
-     *     await flatfile.mapping.deleteMapping("us_mp_YOUR_ID", "us_mr_YOUR_ID")
+     *     await flatfile.mapping.listRules("us_mp_YOUR_ID")
      */
-    public async deleteMapping(
+    public async listRules(
         programId: Flatfile.ProgramId,
-        mappingId: Flatfile.MappingId,
         requestOptions?: Mapping.RequestOptions
-    ): Promise<Flatfile.MappingRuleResponse> {
+    ): Promise<Flatfile.MappingRulesResponse> {
         const _response = await (this._options.fetcher ?? core.fetcher)({
@@ -407,7 +572,5 @@ export class Mapping {
                 (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
-                `/mapping/${await serializers.ProgramId.jsonOrThrow(
-                    programId
-                )}/rules/${await serializers.MappingId.jsonOrThrow(mappingId)}`
+                `/mapping/${await serializers.ProgramId.jsonOrThrow(programId)}/rules`
             ),
-            method: "DELETE",
+            method: "GET",
             headers: {
@@ -417,3 +580,3 @@ export class Mapping {
             },
@@ -424,3 +587,3 @@ export class Mapping {
         if (_response.ok) {
-            return await serializers.MappingRuleResponse.parseOrThrow(_response.body, {
+            return await serializers.MappingRulesResponse.parseOrThrow(_response.body, {
                 unrecognizedObjectKeys: "passthrough",
@@ -479,3 +642,3 @@ export class Mapping {
     /**
-     * Updates a mapping rule in a program
+     * Get a mapping rule from a program
      * @throws {@link Flatfile.BadRequestError}
@@ -484,12 +647,7 @@ export class Mapping {
      * @example
-     *     await flatfile.mapping.updateMapping("us_mp_YOUR_ID", "us_mr_YOUR_ID", {
-     *         name: "Assign mapping rule",
-     *         type: "assign",
-     *         config: {}
-     *     })
+     *     await flatfile.mapping.getRule("us_mp_YOUR_ID", "us_mr_YOUR_ID")
      */
-    public async updateMapping(
+    public async getRule(
         programId: Flatfile.ProgramId,
         mappingId: Flatfile.MappingId,
-        request: Flatfile.MappingRuleConfig,
         requestOptions?: Mapping.RequestOptions
@@ -503,3 +661,3 @@ export class Mapping {
             ),
-            method: "PATCH",
+            method: "GET",
             headers: {
@@ -509,6 +667,5 @@ export class Mapping {
             },
             contentType: "application/json",
-            body: await serializers.MappingRuleConfig.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
             timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
@@ -572,9 +729,19 @@ export class Mapping {
     /**
-     * Get Weights
+     * Updates a mapping rule in a program
      * @throws {@link Flatfile.BadRequestError}
+     * @throws {@link Flatfile.NotFoundError}
+     *
+     * @example
+     *     await flatfile.mapping.updateRule("us_mp_YOUR_ID", "us_mr_YOUR_ID", {
+     *         name: "Assign mapping rule",
+     *         type: "assign",
+     *         config: {}
+     *     })
      */
-    public async getFieldWeights(
-        request: Flatfile.GetFieldWeightsRequest,
+    public async updateRule(
+        programId: Flatfile.ProgramId,
+        mappingId: Flatfile.MappingId,
+        request: Flatfile.MappingRuleConfig,
         requestOptions?: Mapping.RequestOptions
-    ): Promise<Flatfile.SourceDestinationWeightsResponse> {
+    ): Promise<Flatfile.MappingRuleResponse> {
         const _response = await (this._options.fetcher ?? core.fetcher)({
@@ -582,5 +749,7 @@ export class Mapping {
                 (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
-                "/mapping/field-weights"
+                `/mapping/${await serializers.ProgramId.jsonOrThrow(
+                    programId
+                )}/rules/${await serializers.MappingId.jsonOrThrow(mappingId)}`
             ),
-            method: "POST",
+            method: "PATCH",
             headers: {
@@ -590,6 +759,6 @@ export class Mapping {
             },
             contentType: "application/json",
-            body: await serializers.GetFieldWeightsRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
+            body: await serializers.MappingRuleConfig.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
             timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
@@ -598,3 +767,3 @@ export class Mapping {
         if (_response.ok) {
-            return await serializers.SourceDestinationWeightsResponse.parseOrThrow(_response.body, {
+            return await serializers.MappingRuleResponse.parseOrThrow(_response.body, {
                 unrecognizedObjectKeys: "passthrough",
@@ -619,2 +788,12 @@ export class Mapping {
                     );
+                case 404:
+                    throw new Flatfile.NotFoundError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
                 default:
@@ -643,9 +822,14 @@ export class Mapping {
     /**
-     * Get Enum Weights
+     * Deletes a mapping rule from a program
      * @throws {@link Flatfile.BadRequestError}
+     * @throws {@link Flatfile.NotFoundError}
+     *
+     * @example
+     *     await flatfile.mapping.deleteRule("us_mp_YOUR_ID", "us_mr_YOUR_ID")
      */
-    public async getEnumWeights(
-        request: Flatfile.GetEnumWeightsRequest,
+    public async deleteRule(
+        programId: Flatfile.ProgramId,
+        mappingId: Flatfile.MappingId,
         requestOptions?: Mapping.RequestOptions
-    ): Promise<Flatfile.SourceDestinationWeightsResponse> {
+    ): Promise<Flatfile.Success> {
         const _response = await (this._options.fetcher ?? core.fetcher)({
@@ -653,5 +837,7 @@ export class Mapping {
                 (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
-                "/mapping/enum-weights"
+                `/mapping/${await serializers.ProgramId.jsonOrThrow(
+                    programId
+                )}/rules/${await serializers.MappingId.jsonOrThrow(mappingId)}`
             ),
-            method: "POST",
+            method: "DELETE",
             headers: {
@@ -661,6 +847,5 @@ export class Mapping {
             },
             contentType: "application/json",
-            body: await serializers.GetEnumWeightsRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
             timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
@@ -669,3 +854,3 @@ export class Mapping {
         if (_response.ok) {
-            return await serializers.SourceDestinationWeightsResponse.parseOrThrow(_response.body, {
+            return await serializers.Success.parseOrThrow(_response.body, {
                 unrecognizedObjectKeys: "passthrough",
@@ -690,2 +875,12 @@ export class Mapping {
                     );
+                case 404:
+                    throw new Flatfile.NotFoundError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
                 default:
diff --git a/src/api/resources/mapping/client/requests/ListProgramsRequest.ts b/src/api/resources/mapping/client/requests/ListProgramsRequest.ts
index 53938fb..215c8d0 100644
--- a/src/api/resources/mapping/client/requests/ListProgramsRequest.ts
+++ b/src/api/resources/mapping/client/requests/ListProgramsRequest.ts
@@ -8,3 +8,3 @@ export interface ListProgramsRequest {
     /**
-     * Number of spaces to return in a page (default 10)
+     * Number of programs to return in a page (default 10)
      */
@@ -31,2 +31,6 @@ export interface ListProgramsRequest {
     environmentId?: Flatfile.EnvironmentId;
+    /**
+     * Filter by namespace
+     */
+    namespace?: string;
     /**
diff --git a/src/api/resources/mapping/types/GetEnumWeightsRequest.ts b/src/api/resources/mapping/types/GetEnumWeightsRequest.ts
deleted file mode 100644
index e4471d8..0000000
--- a/src/api/resources/mapping/types/GetEnumWeightsRequest.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-export interface GetEnumWeightsRequest {
-    /** Source field key */
-    sourceField: string;
-    /** Source field values */
-    sourceValues: string[];
-    /** Destination field key */
-    destinationField: string;
-    /** Destination field values */
-    destinationValues: string[];
-}
diff --git a/src/api/resources/mapping/types/GetFieldWeightsRequest.ts b/src/api/resources/mapping/types/GetFieldWeightsRequest.ts
deleted file mode 100644
index 2243384..0000000
--- a/src/api/resources/mapping/types/GetFieldWeightsRequest.ts
+++ /dev/null
@@ -1,10 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-export interface GetFieldWeightsRequest {
-    /** Source field keys */
-    sourceFields: string[];
-    /** Destination field keys */
-    destinationFields: string[];
-}
diff --git a/src/api/resources/mapping/types/Program.ts b/src/api/resources/mapping/types/Program.ts
index a1cb7df..b9295b6 100644
--- a/src/api/resources/mapping/types/Program.ts
+++ b/src/api/resources/mapping/types/Program.ts
@@ -11,2 +11,6 @@ export interface Program {
     id?: string;
+    /** Namespace of the program */
+    namespace?: string;
+    /** Family ID of the program, if it belongs to a family */
+    familyId?: Flatfile.FamilyId;
     /** If this program was saved, this is the time it was created */
diff --git a/src/api/resources/mapping/types/ProgramConfig.ts b/src/api/resources/mapping/types/ProgramConfig.ts
index a749606..40da4eb 100644
--- a/src/api/resources/mapping/types/ProgramConfig.ts
+++ b/src/api/resources/mapping/types/ProgramConfig.ts
@@ -11,2 +11,6 @@ export interface ProgramConfig {
     destination: Flatfile.SheetConfig;
+    /** ID of the family to add the program to */
+    familyId?: Flatfile.FamilyId;
+    /** Namespace of the program */
+    namespace?: string;
     /** Whether to save the program for editing later. Defaults to false. If true, the response will contain an ID and access token. */
diff --git a/src/api/resources/mapping/types/SourceDestinationWeight.ts b/src/api/resources/mapping/types/SourceDestinationWeight.ts
deleted file mode 100644
index 0da0bd1..0000000
--- a/src/api/resources/mapping/types/SourceDestinationWeight.ts
+++ /dev/null
@@ -1,12 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-export interface SourceDestinationWeight {
-    /** Source key */
-    source: string;
-    /** Destination key */
-    destination: string;
-    /** Weight of the pair */
-    weight: number;
-}
diff --git a/src/api/resources/mapping/types/SourceDestinationWeights.ts b/src/api/resources/mapping/types/SourceDestinationWeights.ts
deleted file mode 100644
index 226608a..0000000
--- a/src/api/resources/mapping/types/SourceDestinationWeights.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as Flatfile from "../../..";
-
-export interface SourceDestinationWeights {
-    weights: Flatfile.SourceDestinationWeight[];
-}
diff --git a/src/api/resources/mapping/types/SourceDestinationWeightsResponse.ts b/src/api/resources/mapping/types/SourceDestinationWeightsResponse.ts
deleted file mode 100644
index 597442d..0000000
--- a/src/api/resources/mapping/types/SourceDestinationWeightsResponse.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as Flatfile from "../../..";
-
-export interface SourceDestinationWeightsResponse {
-    data: Flatfile.SourceDestinationWeights;
-}
diff --git a/src/api/resources/mapping/types/index.ts b/src/api/resources/mapping/types/index.ts
index d665108..e680b72 100644
--- a/src/api/resources/mapping/types/index.ts
+++ b/src/api/resources/mapping/types/index.ts
@@ -5,3 +5,2 @@ export * from "./Program";
 export * from "./ProgramSummary";
-export * from "./CreateMappingRulesRequest";
 export * from "./MappingRuleConfig";
@@ -9,8 +8,4 @@ export * from "./MappingRule";
 export * from "./MappingRuleOrConfig";
+export * from "./CreateMappingRulesRequest";
 export * from "./MappingRuleResponse";
 export * from "./MappingRulesResponse";
-export * from "./GetFieldWeightsRequest";
-export * from "./GetEnumWeightsRequest";
-export * from "./SourceDestinationWeight";
-export * from "./SourceDestinationWeights";
-export * from "./SourceDestinationWeightsResponse";
diff --git a/src/api/resources/property/types/BaseProperty.ts b/src/api/resources/property/types/BaseProperty.ts
index 86ea6a4..31e1ff8 100644
--- a/src/api/resources/property/types/BaseProperty.ts
+++ b/src/api/resources/property/types/BaseProperty.ts
@@ -10,2 +10,3 @@ export interface BaseProperty {
     label?: string;
+    /** A short description of the field. Markdown syntax is supported. */
     description?: string;
diff --git a/src/api/resources/property/types/NumberConfig.ts b/src/api/resources/property/types/NumberConfig.ts
index 9b37377..cf3543b 100644
--- a/src/api/resources/property/types/NumberConfig.ts
+++ b/src/api/resources/property/types/NumberConfig.ts
@@ -12,3 +12,3 @@ export interface NumberConfig {
     /** Number of decimal places to round data to */
-    decimalPlaces: number;
+    decimalPlaces?: number;
 }
diff --git a/src/api/resources/records/client/Client.ts b/src/api/resources/records/client/Client.ts
index 979768d..0d1bfc8 100644
--- a/src/api/resources/records/client/Client.ts
+++ b/src/api/resources/records/client/Client.ts
@@ -154,3 +154,3 @@ export class Records {
             },
@@ -228,2 +228,3 @@ export class Records {
      *                 "firstName": {
+     *                     value: undefined,
      *                     messages: [],
@@ -232,2 +233,3 @@ export class Records {
      *                 "lastName": {
+     *                     value: undefined,
      *                     messages: [],
@@ -236,2 +238,3 @@ export class Records {
      *                 "email": {
+     *                     value: undefined,
      *                     messages: [],
@@ -260,3 +263,3 @@ export class Records {
             },
@@ -330,2 +333,3 @@ export class Records {
      *             "firstName": {
+     *                 value: undefined,
      *                 messages: [],
@@ -334,2 +338,3 @@ export class Records {
      *             "lastName": {
+     *                 value: undefined,
      *                 messages: [],
@@ -338,2 +343,3 @@ export class Records {
      *             "email": {
+     *                 value: undefined,
      *                 messages: [],
@@ -359,3 +365,3 @@ export class Records {
             },
@@ -457,3 +463,3 @@ export class Records {
             },
@@ -569,3 +575,3 @@ export class Records {
             },
diff --git a/src/api/resources/records/client/requests/FindAndReplaceRecordRequest.ts b/src/api/resources/records/client/requests/FindAndReplaceRecordRequest.ts
index 5841e74..c8bc80f 100644
--- a/src/api/resources/records/client/requests/FindAndReplaceRecordRequest.ts
+++ b/src/api/resources/records/client/requests/FindAndReplaceRecordRequest.ts
@@ -25,3 +25,3 @@ export interface FindAndReplaceRecordRequest {
     ids?: Flatfile.RecordId | Flatfile.RecordId[];
-    /** A value to find for a given field in a sheet. Wrap the value in "" for exact match */
+    /** A value to find for a given field in a sheet. For exact matches, wrap the value in double quotes ("Bob") */
     find?: Flatfile.CellValueUnion;
diff --git a/src/api/resources/records/types/DiffRecord.ts b/src/api/resources/records/types/DiffRecord.ts
index 01fc56d..cd297a6 100644
--- a/src/api/resources/records/types/DiffRecord.ts
+++ b/src/api/resources/records/types/DiffRecord.ts
@@ -11,5 +11,14 @@ import * as Flatfile from "../../..";
  *         values: {
- *             "firstName": {},
- *             "lastName": {},
- *             "email": {}
+ *             "firstName": {
+ *                 snapshotValue: undefined,
+ *                 value: undefined
+ *             },
+ *             "lastName": {
+ *                 snapshotValue: undefined,
+ *                 value: undefined
+ *             },
+ *             "email": {
+ *                 snapshotValue: undefined,
+ *                 value: undefined
+ *             }
  *         }
diff --git a/src/api/resources/records/types/DiffRecords.ts b/src/api/resources/records/types/DiffRecords.ts
index f6aea81..9d9bf91 100644
--- a/src/api/resources/records/types/DiffRecords.ts
+++ b/src/api/resources/records/types/DiffRecords.ts
@@ -13,5 +13,14 @@ import * as Flatfile from "../../..";
  *             values: {
- *                 "firstName": {},
- *                 "lastName": {},
- *                 "email": {}
+ *                 "firstName": {
+ *                     snapshotValue: undefined,
+ *                     value: undefined
+ *                 },
+ *                 "lastName": {
+ *                     snapshotValue: undefined,
+ *                     value: undefined
+ *                 },
+ *                 "email": {
+ *                     snapshotValue: undefined,
+ *                     value: undefined
+ *                 }
  *             }
diff --git a/src/api/resources/records/types/DiffRecordsResponse.ts b/src/api/resources/records/types/DiffRecordsResponse.ts
index 20fd232..2f1a25d 100644
--- a/src/api/resources/records/types/DiffRecordsResponse.ts
+++ b/src/api/resources/records/types/DiffRecordsResponse.ts
@@ -12,5 +12,14 @@ import * as Flatfile from "../../..";
  *                 values: {
- *                     "firstName": {},
- *                     "lastName": {},
- *                     "email": {}
+ *                     "firstName": {
+ *                         snapshotValue: undefined,
+ *                         value: undefined
+ *                     },
+ *                     "lastName": {
+ *                         snapshotValue: undefined,
+ *                         value: undefined
+ *                     },
+ *                     "email": {
+ *                         snapshotValue: undefined,
+ *                         value: undefined
+ *                     }
  *                 }
diff --git a/src/api/resources/records/types/GetRecordsResponse.ts b/src/api/resources/records/types/GetRecordsResponse.ts
index d37fe57..160b2ba 100644
--- a/src/api/resources/records/types/GetRecordsResponse.ts
+++ b/src/api/resources/records/types/GetRecordsResponse.ts
@@ -14,2 +14,3 @@ import * as Flatfile from "../../..";
  *                         "firstName": {
+ *                             value: undefined,
  *                             messages: [],
@@ -19,2 +20,3 @@ import * as Flatfile from "../../..";
  *                         "lastName": {
+ *                             value: undefined,
  *                             messages: [],
@@ -24,2 +26,3 @@ import * as Flatfile from "../../..";
  *                         "email": {
+ *                             value: undefined,
  *                             messages: [],
diff --git a/src/api/resources/records/types/GetRecordsResponseData.ts b/src/api/resources/records/types/GetRecordsResponseData.ts
index 325c918..df58c87 100644
--- a/src/api/resources/records/types/GetRecordsResponseData.ts
+++ b/src/api/resources/records/types/GetRecordsResponseData.ts
@@ -15,2 +15,3 @@ import * as Flatfile from "../../..";
  *                     "firstName": {
+ *                         value: undefined,
  *                         messages: [],
@@ -20,2 +21,3 @@ import * as Flatfile from "../../..";
  *                     "lastName": {
+ *                         value: undefined,
  *                         messages: [],
@@ -25,2 +27,3 @@ import * as Flatfile from "../../..";
  *                     "email": {
+ *                         value: undefined,
  *                         messages: [],
diff --git a/src/api/resources/records/types/RecordData.ts b/src/api/resources/records/types/RecordData.ts
index ae070fc..6860670 100644
--- a/src/api/resources/records/types/RecordData.ts
+++ b/src/api/resources/records/types/RecordData.ts
@@ -12,2 +12,3 @@ import * as Flatfile from "../../..";
  *         "firstName": {
+ *             value: undefined,
  *             messages: [],
@@ -16,2 +17,3 @@ import * as Flatfile from "../../..";
  *         "lastName": {
+ *             value: undefined,
  *             messages: [],
@@ -20,2 +22,3 @@ import * as Flatfile from "../../..";
  *         "email": {
+ *             value: undefined,
  *             messages: [],
diff --git a/src/api/resources/records/types/RecordDataWithLinks.ts b/src/api/resources/records/types/RecordDataWithLinks.ts
index f67f8dc..0005027 100644
--- a/src/api/resources/records/types/RecordDataWithLinks.ts
+++ b/src/api/resources/records/types/RecordDataWithLinks.ts
@@ -12,2 +12,3 @@ import * as Flatfile from "../../..";
  *         "firstName": {
+ *             value: undefined,
  *             messages: [],
@@ -17,2 +18,3 @@ import * as Flatfile from "../../..";
  *         "lastName": {
+ *             value: undefined,
  *             messages: [],
@@ -22,2 +24,3 @@ import * as Flatfile from "../../..";
  *         "email": {
+ *             value: undefined,
  *             messages: [],
@@ -31,2 +34,3 @@ import * as Flatfile from "../../..";
  *         "firstName": {
+ *             value: undefined,
  *             messages: [],
@@ -36,2 +40,3 @@ import * as Flatfile from "../../..";
  *         "lastName": {
+ *             value: undefined,
  *             messages: [],
@@ -41,2 +46,3 @@ import * as Flatfile from "../../..";
  *         "email": {
+ *             value: undefined,
  *             messages: [],
diff --git a/src/api/resources/records/types/RecordWithLinks.ts b/src/api/resources/records/types/RecordWithLinks.ts
index 198e402..267987a 100644
--- a/src/api/resources/records/types/RecordWithLinks.ts
+++ b/src/api/resources/records/types/RecordWithLinks.ts
@@ -14,2 +14,3 @@ import * as Flatfile from "../../..";
  *             "firstName": {
+ *                 value: undefined,
  *                 messages: [],
@@ -19,2 +20,3 @@ import * as Flatfile from "../../..";
  *             "lastName": {
+ *                 value: undefined,
  *                 messages: [],
@@ -24,2 +26,3 @@ import * as Flatfile from "../../..";
  *             "email": {
+ *                 value: undefined,
  *                 messages: [],
@@ -38,2 +41,3 @@ import * as Flatfile from "../../..";
  *             "firstName": {
+ *                 value: undefined,
  *                 messages: [],
@@ -43,2 +47,3 @@ import * as Flatfile from "../../..";
  *             "lastName": {
+ *                 value: undefined,
  *                 messages: [],
@@ -48,2 +53,3 @@ import * as Flatfile from "../../..";
  *             "email": {
+ *                 value: undefined,
  *                 messages: [],
diff --git a/src/api/resources/records/types/Record_.ts b/src/api/resources/records/types/Record_.ts
index 8c7f5ed..bd6b1e4 100644
--- a/src/api/resources/records/types/Record_.ts
+++ b/src/api/resources/records/types/Record_.ts
@@ -16,2 +16,3 @@ import * as Flatfile from "../../..";
  *             "firstName": {
+ *                 value: undefined,
  *                 messages: [],
@@ -20,2 +21,3 @@ import * as Flatfile from "../../..";
  *             "lastName": {
+ *                 value: undefined,
  *                 messages: [],
@@ -24,2 +26,3 @@ import * as Flatfile from "../../..";
  *             "email": {
+ *                 value: undefined,
  *                 messages: [],
diff --git a/src/api/resources/records/types/Records.ts b/src/api/resources/records/types/Records.ts
index aa66ee2..ac4adbd 100644
--- a/src/api/resources/records/types/Records.ts
+++ b/src/api/resources/records/types/Records.ts
@@ -16,2 +16,3 @@ import * as Flatfile from "../../..";
  *                 "firstName": {
+ *                     value: undefined,
  *                     messages: [],
@@ -20,2 +21,3 @@ import * as Flatfile from "../../..";
  *                 "lastName": {
+ *                     value: undefined,
  *                     messages: [],
@@ -24,2 +26,3 @@ import * as Flatfile from "../../..";
  *                 "email": {
+ *                     value: undefined,
  *                     messages: [],
diff --git a/src/api/resources/records/types/RecordsResponse.ts b/src/api/resources/records/types/RecordsResponse.ts
index 34a5540..c1add59 100644
--- a/src/api/resources/records/types/RecordsResponse.ts
+++ b/src/api/resources/records/types/RecordsResponse.ts
@@ -14,2 +14,3 @@ import * as Flatfile from "../../..";
  *                         "firstName": {
+ *                             value: undefined,
  *                             messages: [],
@@ -19,2 +20,3 @@ import * as Flatfile from "../../..";
  *                         "lastName": {
+ *                             value: undefined,
  *                             messages: [],
@@ -24,2 +26,3 @@ import * as Flatfile from "../../..";
  *                         "email": {
+ *                             value: undefined,
  *                             messages: [],
diff --git a/src/api/resources/records/types/RecordsResponseData.ts b/src/api/resources/records/types/RecordsResponseData.ts
index 5018032..ef6f3a8 100644
--- a/src/api/resources/records/types/RecordsResponseData.ts
+++ b/src/api/resources/records/types/RecordsResponseData.ts
@@ -13,2 +13,3 @@ import * as Flatfile from "../../..";
  *                     "firstName": {
+ *                         value: undefined,
  *                         messages: [],
@@ -18,2 +19,3 @@ import * as Flatfile from "../../..";
  *                     "lastName": {
+ *                         value: undefined,
  *                         messages: [],
@@ -23,2 +25,3 @@ import * as Flatfile from "../../..";
  *                     "email": {
+ *                         value: undefined,
  *                         messages: [],
diff --git a/src/api/resources/records/types/RecordsWithLinks.ts b/src/api/resources/records/types/RecordsWithLinks.ts
index 5ae391f..1bb3f2a 100644
--- a/src/api/resources/records/types/RecordsWithLinks.ts
+++ b/src/api/resources/records/types/RecordsWithLinks.ts
@@ -14,2 +14,3 @@ import * as Flatfile from "../../..";
  *                 "firstName": {
+ *                     value: undefined,
  *                     messages: [],
@@ -19,2 +20,3 @@ import * as Flatfile from "../../..";
  *                 "lastName": {
+ *                     value: undefined,
  *                     messages: [],
@@ -24,2 +26,3 @@ import * as Flatfile from "../../..";
  *                 "email": {
+ *                     value: undefined,
  *                     messages: [],
diff --git a/src/api/resources/roles/client/Client.ts b/src/api/resources/roles/client/Client.ts
index 8f4d8f7..868b958 100644
--- a/src/api/resources/roles/client/Client.ts
+++ b/src/api/resources/roles/client/Client.ts
@@ -49,3 +49,3 @@ export class Roles {
             },
diff --git a/src/api/resources/secrets/client/Client.ts b/src/api/resources/secrets/client/Client.ts
index bd4f5fc..d1d5b7e 100644
--- a/src/api/resources/secrets/client/Client.ts
+++ b/src/api/resources/secrets/client/Client.ts
@@ -60,3 +60,3 @@ export class Secrets {
             },
@@ -150,3 +150,3 @@ export class Secrets {
             },
@@ -235,3 +235,3 @@ export class Secrets {
             },
diff --git a/src/api/resources/sheets/client/Client.ts b/src/api/resources/sheets/client/Client.ts
index b730c32..0a9773c 100644
--- a/src/api/resources/sheets/client/Client.ts
+++ b/src/api/resources/sheets/client/Client.ts
@@ -55,3 +55,3 @@ export class Sheets {
             },
@@ -115,3 +115,3 @@ export class Sheets {
             },
@@ -173,3 +173,3 @@ export class Sheets {
             },
@@ -257,3 +257,3 @@ export class Sheets {
             },
@@ -399,3 +399,3 @@ export class Sheets {
             },
@@ -484,3 +484,3 @@ export class Sheets {
             },
@@ -544,3 +544,3 @@ export class Sheets {
             },
@@ -634,3 +634,3 @@ export class Sheets {
             },
@@ -696,3 +696,3 @@ export class Sheets {
             },
@@ -780,3 +780,3 @@ export class Sheets {
             },
@@ -921,3 +921,3 @@ export class Sheets {
             },
diff --git a/src/api/resources/sheets/types/FieldConfigResponse.ts b/src/api/resources/sheets/types/FieldConfigResponse.ts
index bbda140..a8d4d90 100644
--- a/src/api/resources/sheets/types/FieldConfigResponse.ts
+++ b/src/api/resources/sheets/types/FieldConfigResponse.ts
@@ -8,3 +8,9 @@ import * as Flatfile from "../../..";
  * @example
- *     {}
+ *     {
+ *         data: {
+ *             type: "string",
+ *             key: "firstName",
+ *             label: "First Name"
+ *         }
+ *     }
  */
diff --git a/src/api/resources/sheets/types/RecordCountsResponse.ts b/src/api/resources/sheets/types/RecordCountsResponse.ts
index ef30ac0..34f6377 100644
--- a/src/api/resources/sheets/types/RecordCountsResponse.ts
+++ b/src/api/resources/sheets/types/RecordCountsResponse.ts
@@ -10,2 +10,7 @@ import * as Flatfile from "../../..";
  *         data: {
+ *             counts: {
+ *                 valid: 1000,
+ *                 error: 0,
+ *                 total: 1000
+ *             },
  *             success: true
diff --git a/src/api/resources/sheets/types/RecordCountsResponseData.ts b/src/api/resources/sheets/types/RecordCountsResponseData.ts
index 8d1f0db..a2e9966 100644
--- a/src/api/resources/sheets/types/RecordCountsResponseData.ts
+++ b/src/api/resources/sheets/types/RecordCountsResponseData.ts
@@ -9,2 +9,7 @@ import * as Flatfile from "../../..";
  *     {
+ *         counts: {
+ *             valid: 1000,
+ *             error: 0,
+ *             total: 1000
+ *         },
  *         success: true
diff --git a/src/api/resources/snapshots/client/Client.ts b/src/api/resources/snapshots/client/Client.ts
index c5d11c9..20b3847 100644
--- a/src/api/resources/snapshots/client/Client.ts
+++ b/src/api/resources/snapshots/client/Client.ts
@@ -54,3 +54,3 @@ export class Snapshots {
             },
@@ -144,3 +144,3 @@ export class Snapshots {
             },
@@ -235,3 +235,3 @@ export class Snapshots {
             },
@@ -320,3 +320,3 @@ export class Snapshots {
             },
@@ -409,3 +409,3 @@ export class Snapshots {
             },
@@ -518,3 +518,3 @@ export class Snapshots {
             },
diff --git a/src/api/resources/spaces/client/Client.ts b/src/api/resources/spaces/client/Client.ts
index 6cfff4d..9e373e1 100644
--- a/src/api/resources/spaces/client/Client.ts
+++ b/src/api/resources/spaces/client/Client.ts
@@ -100,3 +100,3 @@ export class Spaces {
             },
@@ -180,3 +180,3 @@ export class Spaces {
             },
@@ -265,3 +265,3 @@ export class Spaces {
             },
@@ -346,3 +346,3 @@ export class Spaces {
             },
@@ -440,3 +440,3 @@ export class Spaces {
             },
@@ -528,3 +528,3 @@ export class Spaces {
             },
@@ -613,3 +613,3 @@ export class Spaces {
             },
diff --git a/src/api/resources/users/client/Client.ts b/src/api/resources/users/client/Client.ts
index 68695e1..181115b 100644
--- a/src/api/resources/users/client/Client.ts
+++ b/src/api/resources/users/client/Client.ts
@@ -57,3 +57,3 @@ export class Users {
             },
@@ -114,3 +114,3 @@ export class Users {
             },
@@ -182,3 +182,3 @@ export class Users {
             },
@@ -243,3 +243,3 @@ export class Users {
             },
@@ -300,3 +300,3 @@ export class Users {
             },
diff --git a/src/api/resources/users/types/ListUsersResponse.ts b/src/api/resources/users/types/ListUsersResponse.ts
index 8a30716..51ec119 100644
--- a/src/api/resources/users/types/ListUsersResponse.ts
+++ b/src/api/resources/users/types/ListUsersResponse.ts
@@ -15,2 +15,5 @@ import * as Flatfile from "../../..";
  *                 idp: "FRONTEGG",
+ *                 idpRef: "ab1cf38e-e617-4547-b37d-376a7ac9e554",
+ *                 metadata: {},
+ *                 createdAt: new Date("2023-10-30T16:59:45.735Z"),
  *                 updatedAt: new Date("2023-10-30T16:59:45.735Z")
diff --git a/src/api/resources/users/types/User.ts b/src/api/resources/users/types/User.ts
index 266782f..996f272 100644
--- a/src/api/resources/users/types/User.ts
+++ b/src/api/resources/users/types/User.ts
@@ -16,2 +16,5 @@ import * as Flatfile from "../../..";
  *         idp: "FRONTEGG",
+ *         idpRef: "ab1cf38e-e617-4547-b37d-376a7ac9e554",
+ *         metadata: {},
+ *         createdAt: new Date("2023-10-30T16:59:45.735Z"),
  *         updatedAt: new Date("2023-10-30T16:59:45.735Z")
@@ -23,2 +26,4 @@ export interface User extends Flatfile.UserConfig {
     idpRef?: string;
+    metadata: Record<string, any>;
+    createdAt: Date;
     updatedAt: Date;
diff --git a/src/api/resources/users/types/UserResponse.ts b/src/api/resources/users/types/UserResponse.ts
index 234b751..7045914 100644
--- a/src/api/resources/users/types/UserResponse.ts
+++ b/src/api/resources/users/types/UserResponse.ts
@@ -15,2 +15,5 @@ import * as Flatfile from "../../..";
  *             idp: "FRONTEGG",
+ *             idpRef: "ab1cf38e-e617-4547-b37d-376a7ac9e554",
+ *             metadata: {},
+ *             createdAt: new Date("2023-10-30T16:59:45.735Z"),
  *             updatedAt: new Date("2023-10-30T16:59:45.735Z")
diff --git a/src/api/resources/versions/client/Client.ts b/src/api/resources/versions/client/Client.ts
index c5cea24..f5429fe 100644
--- a/src/api/resources/versions/client/Client.ts
+++ b/src/api/resources/versions/client/Client.ts
@@ -43,3 +43,3 @@ export class Versions {
             },
diff --git a/src/api/resources/workbooks/client/Client.ts b/src/api/resources/workbooks/client/Client.ts
index 75ee388..e6e0abc 100644
--- a/src/api/resources/workbooks/client/Client.ts
+++ b/src/api/resources/workbooks/client/Client.ts
@@ -63,3 +63,3 @@ export class Workbooks {
             },
@@ -168,3 +168,3 @@ export class Workbooks {
             },
@@ -243,3 +243,3 @@ export class Workbooks {
             },
@@ -327,3 +327,3 @@ export class Workbooks {
             },
@@ -422,3 +422,3 @@ export class Workbooks {
             },
@@ -512,3 +512,3 @@ export class Workbooks {
             },
@@ -571,3 +571,3 @@ export class Workbooks {
             },
diff --git a/src/serialization/resources/commons/types/FamilyId.ts b/src/serialization/resources/commons/types/FamilyId.ts
new file mode 100644
index 0000000..5c1913b
--- /dev/null
+++ b/src/serialization/resources/commons/types/FamilyId.ts
@@ -0,0 +1,14 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+
+export const FamilyId: core.serialization.Schema<serializers.FamilyId.Raw, Flatfile.FamilyId> =
+    core.serialization.string();
+
+export declare namespace FamilyId {
+    type Raw = string;
+}
diff --git a/src/serialization/resources/commons/types/InputField.ts b/src/serialization/resources/commons/types/InputField.ts
index e78efff..94b29bc 100644
--- a/src/serialization/resources/commons/types/InputField.ts
+++ b/src/serialization/resources/commons/types/InputField.ts
@@ -14,2 +14,3 @@ export const InputField: core.serialization.ObjectSchema<serializers.InputField.
         type: core.serialization.string(),
+        defaultValue: core.serialization.any().optional(),
         config: core.serialization.lazyObject(async () => (await import("../../..")).InputConfig).optional(),
@@ -26,2 +27,3 @@ export declare namespace InputField {
         type: string;
+        defaultValue?: any | null;
         config?: serializers.InputConfig.Raw | null;
diff --git a/src/serialization/resources/commons/types/index.ts b/src/serialization/resources/commons/types/index.ts
index 66f5304..dd3cab8 100644
--- a/src/serialization/resources/commons/types/index.ts
+++ b/src/serialization/resources/commons/types/index.ts
@@ -22,2 +22,3 @@ export * from "./MappingId";
 export * from "./ProgramId";
+export * from "./FamilyId";
 export * from "./DataRetentionPolicyId";
diff --git a/src/serialization/resources/events/types/Domain.ts b/src/serialization/resources/events/types/Domain.ts
index 1512c8b..e35b638 100644
--- a/src/serialization/resources/events/types/Domain.ts
+++ b/src/serialization/resources/events/types/Domain.ts
@@ -16,2 +16,3 @@ export const Domain: core.serialization.Schema<serializers.Domain.Raw, Flatfile.
     "program",
+    "secret",
 ]);
@@ -19,3 +20,3 @@ export const Domain: core.serialization.Schema<serializers.Domain.Raw, Flatfile.
 export declare namespace Domain {
-    type Raw = "file" | "space" | "workbook" | "job" | "document" | "sheet" | "program";
+    type Raw = "file" | "space" | "workbook" | "job" | "document" | "sheet" | "program" | "secret";
 }
diff --git a/src/serialization/resources/events/types/Event.ts b/src/serialization/resources/events/types/Event.ts
index ec4ed01..4ece7a3 100644
--- a/src/serialization/resources/events/types/Event.ts
+++ b/src/serialization/resources/events/types/Event.ts
@@ -16,3 +16,6 @@ export const Event: core.serialization.Schema<serializers.Event.Raw, Flatfile.Ev
         "space:deleted": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "space:archived": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
         "space:expired": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "space:guestAdded": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "space:guestRemoved": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
         "document:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
@@ -49,2 +52,5 @@ export const Event: core.serialization.Schema<serializers.Event.Raw, Flatfile.Ev
         "commit:completed": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "secret:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "secret:updated": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "secret:deleted": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
         "layer:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
@@ -64,3 +70,6 @@ export declare namespace Event {
         | Event.SpaceDeleted
+        | Event.SpaceArchived
         | Event.SpaceExpired
+        | Event.SpaceGuestAdded
+        | Event.SpaceGuestRemoved
         | Event.DocumentCreated
@@ -97,2 +106,5 @@ export declare namespace Event {
         | Event.CommitCompleted
+        | Event.SecretCreated
+        | Event.SecretUpdated
+        | Event.SecretDeleted
         | Event.LayerCreated;
@@ -123,2 +135,6 @@ export declare namespace Event {
 
+    interface SpaceArchived extends serializers.GenericEvent.Raw {
+        topic: "space:archived";
+    }
+
     interface SpaceExpired extends serializers.GenericEvent.Raw {
@@ -127,2 +143,10 @@ export declare namespace Event {
 
+    interface SpaceGuestAdded extends serializers.GenericEvent.Raw {
+        topic: "space:guestAdded";
+    }
+
+    interface SpaceGuestRemoved extends serializers.GenericEvent.Raw {
+        topic: "space:guestRemoved";
+    }
+
     interface DocumentCreated extends serializers.GenericEvent.Raw {
@@ -255,2 +279,14 @@ export declare namespace Event {
 
+    interface SecretCreated extends serializers.GenericEvent.Raw {
+        topic: "secret:created";
+    }
+
+    interface SecretUpdated extends serializers.GenericEvent.Raw {
+        topic: "secret:updated";
+    }
+
+    interface SecretDeleted extends serializers.GenericEvent.Raw {
+        topic: "secret:deleted";
+    }
+
     interface LayerCreated extends serializers.GenericEvent.Raw {
diff --git a/src/serialization/resources/events/types/EventTopic.ts b/src/serialization/resources/events/types/EventTopic.ts
index e2a8780..8302ee9 100644
--- a/src/serialization/resources/events/types/EventTopic.ts
+++ b/src/serialization/resources/events/types/EventTopic.ts
@@ -16,3 +16,6 @@ export const EventTopic: core.serialization.Schema<serializers.EventTopic.Raw, F
         "space:deleted",
+        "space:archived",
         "space:expired",
+        "space:guestAdded",
+        "space:guestRemoved",
         "document:created",
@@ -50,2 +53,5 @@ export const EventTopic: core.serialization.Schema<serializers.EventTopic.Raw, F
         "layer:created",
+        "secret:created",
+        "secret:updated",
+        "secret:deleted",
     ]);
@@ -60,3 +66,6 @@ export declare namespace EventTopic {
         | "space:deleted"
+        | "space:archived"
         | "space:expired"
+        | "space:guestAdded"
+        | "space:guestRemoved"
         | "document:created"
@@ -93,3 +102,6 @@ export declare namespace EventTopic {
         | "commit:completed"
-        | "layer:created";
+        | "layer:created"
+        | "secret:created"
+        | "secret:updated"
+        | "secret:deleted";
 }
diff --git a/src/serialization/resources/mapping/types/GetEnumWeightsRequest.ts b/src/serialization/resources/mapping/types/GetEnumWeightsRequest.ts
deleted file mode 100644
index e22d038..0000000
--- a/src/serialization/resources/mapping/types/GetEnumWeightsRequest.ts
+++ /dev/null
@@ -1,26 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as serializers from "../../..";
-import * as Flatfile from "../../../../api";
-import * as core from "../../../../core";
-
-export const GetEnumWeightsRequest: core.serialization.ObjectSchema<
-    serializers.GetEnumWeightsRequest.Raw,
-    Flatfile.GetEnumWeightsRequest
-> = core.serialization.object({
-    sourceField: core.serialization.string(),
-    sourceValues: core.serialization.list(core.serialization.string()),
-    destinationField: core.serialization.string(),
-    destinationValues: core.serialization.list(core.serialization.string()),
-});
-
-export declare namespace GetEnumWeightsRequest {
-    interface Raw {
-        sourceField: string;
-        sourceValues: string[];
-        destinationField: string;
-        destinationValues: string[];
-    }
-}
diff --git a/src/serialization/resources/mapping/types/GetFieldWeightsRequest.ts b/src/serialization/resources/mapping/types/GetFieldWeightsRequest.ts
deleted file mode 100644
index 8b1c7d5..0000000
--- a/src/serialization/resources/mapping/types/GetFieldWeightsRequest.ts
+++ /dev/null
@@ -1,22 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as serializers from "../../..";
-import * as Flatfile from "../../../../api";
-import * as core from "../../../../core";
-
-export const GetFieldWeightsRequest: core.serialization.ObjectSchema<
-    serializers.GetFieldWeightsRequest.Raw,
-    Flatfile.GetFieldWeightsRequest
-> = core.serialization.object({
-    sourceFields: core.serialization.list(core.serialization.string()),
-    destinationFields: core.serialization.list(core.serialization.string()),
-});
-
-export declare namespace GetFieldWeightsRequest {
-    interface Raw {
-        sourceFields: string[];
-        destinationFields: string[];
-    }
-}
diff --git a/src/serialization/resources/mapping/types/Program.ts b/src/serialization/resources/mapping/types/Program.ts
index bb4202a..2355da9 100644
--- a/src/serialization/resources/mapping/types/Program.ts
+++ b/src/serialization/resources/mapping/types/Program.ts
@@ -14,2 +14,4 @@ export const Program: core.serialization.ObjectSchema<serializers.Program.Raw, F
         id: core.serialization.string().optional(),
+        namespace: core.serialization.string().optional(),
+        familyId: core.serialization.lazy(async () => (await import("../../..")).FamilyId).optional(),
         createdAt: core.serialization.date().optional(),
@@ -26,2 +28,4 @@ export declare namespace Program {
         id?: string | null;
+        namespace?: string | null;
+        familyId?: serializers.FamilyId.Raw | null;
         createdAt?: string | null;
diff --git a/src/serialization/resources/mapping/types/ProgramConfig.ts b/src/serialization/resources/mapping/types/ProgramConfig.ts
index a0269a2..5526272 100644
--- a/src/serialization/resources/mapping/types/ProgramConfig.ts
+++ b/src/serialization/resources/mapping/types/ProgramConfig.ts
@@ -12,2 +12,4 @@ export const ProgramConfig: core.serialization.ObjectSchema<serializers.ProgramC
         destination: core.serialization.lazyObject(async () => (await import("../../..")).SheetConfig),
+        familyId: core.serialization.lazy(async () => (await import("../../..")).FamilyId).optional(),
+        namespace: core.serialization.string().optional(),
         save: core.serialization.boolean().optional(),
@@ -19,2 +21,4 @@ export declare namespace ProgramConfig {
         destination: serializers.SheetConfig.Raw;
+        familyId?: serializers.FamilyId.Raw | null;
+        namespace?: string | null;
         save?: boolean | null;
diff --git a/src/serialization/resources/mapping/types/SourceDestinationWeight.ts b/src/serialization/resources/mapping/types/SourceDestinationWeight.ts
deleted file mode 100644
index 5a7bb4e..0000000
--- a/src/serialization/resources/mapping/types/SourceDestinationWeight.ts
+++ /dev/null
@@ -1,24 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as serializers from "../../..";
-import * as Flatfile from "../../../../api";
-import * as core from "../../../../core";
-
-export const SourceDestinationWeight: core.serialization.ObjectSchema<
-    serializers.SourceDestinationWeight.Raw,
-    Flatfile.SourceDestinationWeight
-> = core.serialization.object({
-    source: core.serialization.string(),
-    destination: core.serialization.string(),
-    weight: core.serialization.number(),
-});
-
-export declare namespace SourceDestinationWeight {
-    interface Raw {
-        source: string;
-        destination: string;
-        weight: number;
-    }
-}
diff --git a/src/serialization/resources/mapping/types/SourceDestinationWeights.ts b/src/serialization/resources/mapping/types/SourceDestinationWeights.ts
deleted file mode 100644
index 443eaaf..0000000
--- a/src/serialization/resources/mapping/types/SourceDestinationWeights.ts
+++ /dev/null
@@ -1,22 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as serializers from "../../..";
-import * as Flatfile from "../../../../api";
-import * as core from "../../../../core";
-
-export const SourceDestinationWeights: core.serialization.ObjectSchema<
-    serializers.SourceDestinationWeights.Raw,
-    Flatfile.SourceDestinationWeights
-> = core.serialization.object({
-    weights: core.serialization.list(
-        core.serialization.lazyObject(async () => (await import("../../..")).SourceDestinationWeight)
-    ),
-});
-
-export declare namespace SourceDestinationWeights {
-    interface Raw {
-        weights: serializers.SourceDestinationWeight.Raw[];
-    }
-}
diff --git a/src/serialization/resources/mapping/types/SourceDestinationWeightsResponse.ts b/src/serialization/resources/mapping/types/SourceDestinationWeightsResponse.ts
deleted file mode 100644
index 4e36fc2..0000000
--- a/src/serialization/resources/mapping/types/SourceDestinationWeightsResponse.ts
+++ /dev/null
@@ -1,20 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as serializers from "../../..";
-import * as Flatfile from "../../../../api";
-import * as core from "../../../../core";
-
-export const SourceDestinationWeightsResponse: core.serialization.ObjectSchema<
-    serializers.SourceDestinationWeightsResponse.Raw,
-    Flatfile.SourceDestinationWeightsResponse
-> = core.serialization.object({
-    data: core.serialization.lazyObject(async () => (await import("../../..")).SourceDestinationWeights),
-});
-
-export declare namespace SourceDestinationWeightsResponse {
-    interface Raw {
-        data: serializers.SourceDestinationWeights.Raw;
-    }
-}
diff --git a/src/serialization/resources/mapping/types/index.ts b/src/serialization/resources/mapping/types/index.ts
index d665108..e680b72 100644
--- a/src/serialization/resources/mapping/types/index.ts
+++ b/src/serialization/resources/mapping/types/index.ts
@@ -5,3 +5,2 @@ export * from "./Program";
 export * from "./ProgramSummary";
-export * from "./CreateMappingRulesRequest";
 export * from "./MappingRuleConfig";
@@ -9,8 +8,4 @@ export * from "./MappingRule";
 export * from "./MappingRuleOrConfig";
+export * from "./CreateMappingRulesRequest";
 export * from "./MappingRuleResponse";
 export * from "./MappingRulesResponse";
-export * from "./GetFieldWeightsRequest";
-export * from "./GetEnumWeightsRequest";
-export * from "./SourceDestinationWeight";
-export * from "./SourceDestinationWeights";
-export * from "./SourceDestinationWeightsResponse";
diff --git a/src/serialization/resources/property/types/NumberConfig.ts b/src/serialization/resources/property/types/NumberConfig.ts
index 99f0b9c..829d94e 100644
--- a/src/serialization/resources/property/types/NumberConfig.ts
+++ b/src/serialization/resources/property/types/NumberConfig.ts
@@ -10,3 +10,3 @@ export const NumberConfig: core.serialization.ObjectSchema<serializers.NumberCon
     core.serialization.object({
-        decimalPlaces: core.serialization.number(),
+        decimalPlaces: core.serialization.number().optional(),
     });
@@ -15,3 +15,3 @@ export declare namespace NumberConfig {
     interface Raw {
-        decimalPlaces: number;
+        decimalPlaces?: number | null;
     }
diff --git a/src/serialization/resources/users/types/User.ts b/src/serialization/resources/users/types/User.ts
index cbdb90a..26fa357 100644
--- a/src/serialization/resources/users/types/User.ts
+++ b/src/serialization/resources/users/types/User.ts
@@ -13,2 +13,4 @@ export const User: core.serialization.ObjectSchema<serializers.User.Raw, Flatfil
         idpRef: core.serialization.string().optional(),
+        metadata: core.serialization.record(core.serialization.string(), core.serialization.any()),
+        createdAt: core.serialization.date(),
         updatedAt: core.serialization.date(),
@@ -22,2 +24,4 @@ export declare namespace User {
         idpRef?: string | null;
+        metadata: Record<string, any>;
+        createdAt: string;
         updatedAt: string;
diff --git a/src/wrapper/FlatfileClient.ts b/src/wrapper/FlatfileClient.ts
index f106da0..b6681bb 100644
--- a/src/wrapper/FlatfileClient.ts
+++ b/src/wrapper/FlatfileClient.ts
@@ -27,3 +27,3 @@ export class FlatfileClient extends FernClient {
             environment: (options.environment || options.apiUrl) ?? environmentSupplier,
-            token: options.token ?? tokenSupplier
+            token: options.token ?? tokenSupplier,
         });

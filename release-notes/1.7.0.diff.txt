diff --git a/package.json b/package.json
index 4dd7120..baaeded 100644
--- a/package.json
+++ b/package.json
@@ -2,3 +2,3 @@
     "name": "@flatfile/api",
-    "version": "1.6.7",
+    "version": "1.7.0",
     "private": false,
@@ -14,7 +14,5 @@
         "url-join": "4.0.1",
-        "@types/url-join": "4.0.1",
         "form-data": "4.0.0",
-        "axios": "0.27.2",
+        "node-fetch": "2.7.0",
         "qs": "6.11.2",
-        "@types/qs": "6.9.8",
         "js-base64": "3.7.2",
@@ -25,2 +23,5 @@
     "devDependencies": {
+        "@types/url-join": "4.0.1",
+        "@types/qs": "6.9.8",
+        "@types/node-fetch": "2.6.9",
         "@types/node": "17.0.33",
diff --git a/src/Client.ts b/src/Client.ts
index 7848676..815eab8 100644
--- a/src/Client.ts
+++ b/src/Client.ts
@@ -35,3 +35,2 @@ export declare namespace FlatfileClient {
         fetcher?: core.FetchFunction;
-        streamingFetcher?: core.StreamingFetchFunction;
     }
diff --git a/src/api/resources/agents/client/Client.ts b/src/api/resources/agents/client/Client.ts
index 29611fa..0274431 100644
--- a/src/api/resources/agents/client/Client.ts
+++ b/src/api/resources/agents/client/Client.ts
@@ -16,3 +16,2 @@ export declare namespace Agents {
         fetcher?: core.FetchFunction;
-        streamingFetcher?: core.StreamingFetchFunction;
     }
@@ -46,3 +45,3 @@ export class Agents {
             },
@@ -126,3 +125,3 @@ export class Agents {
             },
@@ -207,3 +206,3 @@ export class Agents {
             },
@@ -297,3 +296,3 @@ export class Agents {
             },
@@ -387,3 +386,3 @@ export class Agents {
             },
@@ -496,3 +495,3 @@ export class Agents {
             },
@@ -605,3 +604,3 @@ export class Agents {
             },
@@ -696,3 +695,3 @@ export class Agents {
             },
diff --git a/src/api/resources/apps/client/Client.ts b/src/api/resources/apps/client/Client.ts
index de4f604..cb05eed 100644
--- a/src/api/resources/apps/client/Client.ts
+++ b/src/api/resources/apps/client/Client.ts
@@ -16,3 +16,2 @@ export declare namespace Apps {
         fetcher?: core.FetchFunction;
-        streamingFetcher?: core.StreamingFetchFunction;
     }
@@ -43,3 +42,3 @@ export class Apps {
             },
@@ -99,3 +98,3 @@ export class Apps {
             },
@@ -168,3 +167,3 @@ export class Apps {
             },
@@ -238,3 +237,3 @@ export class Apps {
             },
diff --git a/src/api/resources/auth/client/Client.ts b/src/api/resources/auth/client/Client.ts
index b9ed64b..8f09a1f 100644
--- a/src/api/resources/auth/client/Client.ts
+++ b/src/api/resources/auth/client/Client.ts
@@ -16,3 +16,2 @@ export declare namespace Auth {
         fetcher?: core.FetchFunction;
-        streamingFetcher?: core.StreamingFetchFunction;
     }
@@ -55,3 +54,3 @@ export class Auth {
             },
@@ -144,3 +143,3 @@ export class Auth {
             },
@@ -235,3 +234,3 @@ export class Auth {
             },
@@ -326,3 +325,3 @@ export class Auth {
             },
diff --git a/src/api/resources/cells/client/Client.ts b/src/api/resources/cells/client/Client.ts
index da589eb..bb8ecaf 100644
--- a/src/api/resources/cells/client/Client.ts
+++ b/src/api/resources/cells/client/Client.ts
@@ -16,3 +16,2 @@ export declare namespace Cells {
         fetcher?: core.FetchFunction;
-        streamingFetcher?: core.StreamingFetchFunction;
     }
@@ -108,3 +107,3 @@ export class Cells {
             },
diff --git a/src/api/resources/commits/client/Client.ts b/src/api/resources/commits/client/Client.ts
index 399a46d..5511db9 100644
--- a/src/api/resources/commits/client/Client.ts
+++ b/src/api/resources/commits/client/Client.ts
@@ -16,3 +16,2 @@ export declare namespace Commits {
         fetcher?: core.FetchFunction;
-        streamingFetcher?: core.StreamingFetchFunction;
     }
@@ -51,3 +50,3 @@ export class Commits {
             },
@@ -132,3 +131,3 @@ export class Commits {
             },
@@ -213,3 +212,3 @@ export class Commits {
             },
diff --git a/src/api/resources/commons/errors/ForbiddenError.ts b/src/api/resources/commons/errors/ForbiddenError.ts
new file mode 100644
index 0000000..590b5d8
--- /dev/null
+++ b/src/api/resources/commons/errors/ForbiddenError.ts
@@ -0,0 +1,17 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as errors from "../../../../errors";
+import * as Flatfile from "../../..";
+
+export class ForbiddenError extends errors.FlatfileError {
+    constructor(body: Flatfile.Errors) {
+        super({
+            message: "ForbiddenError",
+            statusCode: 403,
+            body: body,
+        });
+        Object.setPrototypeOf(this, ForbiddenError.prototype);
+    }
+}
diff --git a/src/api/resources/commons/errors/index.ts b/src/api/resources/commons/errors/index.ts
index 80aa556..ea200a2 100644
--- a/src/api/resources/commons/errors/index.ts
+++ b/src/api/resources/commons/errors/index.ts
@@ -2 +2,2 @@ export * from "./BadRequestError";
 export * from "./NotFoundError";
+export * from "./ForbiddenError";
diff --git a/src/api/resources/commons/types/ActorRoleId.ts b/src/api/resources/commons/types/ActorRoleId.ts
new file mode 100644
index 0000000..f6f4950
--- /dev/null
+++ b/src/api/resources/commons/types/ActorRoleId.ts
@@ -0,0 +1,11 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+/**
+ * Actor Role ID
+ *
+ * @example
+ *     "us_acr_YOUR_ID"
+ */
+export type ActorRoleId = string;
diff --git a/src/api/resources/commons/types/RoleId.ts b/src/api/resources/commons/types/RoleId.ts
index 1514407..c4180b4 100644
--- a/src/api/resources/commons/types/RoleId.ts
+++ b/src/api/resources/commons/types/RoleId.ts
@@ -8,3 +8,3 @@
  * @example
- *     "us_rol_a7Ws9cue"
+ *     "us_rol_YOUR_ID"
  */
diff --git a/src/api/resources/commons/types/index.ts b/src/api/resources/commons/types/index.ts
index 53f1ff7..d92ca92 100644
--- a/src/api/resources/commons/types/index.ts
+++ b/src/api/resources/commons/types/index.ts
@@ -16,2 +16,3 @@ export * from "./JobId";
 export * from "./UserId";
+export * from "./ActorRoleId";
 export * from "./RoleId";
diff --git a/src/api/resources/dataRetentionPolicies/client/Client.ts b/src/api/resources/dataRetentionPolicies/client/Client.ts
index c81a152..eccb902 100644
--- a/src/api/resources/dataRetentionPolicies/client/Client.ts
+++ b/src/api/resources/dataRetentionPolicies/client/Client.ts
@@ -16,3 +16,2 @@ export declare namespace DataRetentionPolicies {
         fetcher?: core.FetchFunction;
-        streamingFetcher?: core.StreamingFetchFunction;
     }
@@ -59,3 +58,3 @@ export class DataRetentionPolicies {
             },
@@ -148,3 +147,3 @@ export class DataRetentionPolicies {
             },
@@ -233,3 +232,3 @@ export class DataRetentionPolicies {
             },
@@ -322,3 +321,3 @@ export class DataRetentionPolicies {
             },
@@ -404,3 +403,3 @@ export class DataRetentionPolicies {
             },
diff --git a/src/api/resources/documents/client/Client.ts b/src/api/resources/documents/client/Client.ts
index 59b1136..ab803ca 100644
--- a/src/api/resources/documents/client/Client.ts
+++ b/src/api/resources/documents/client/Client.ts
@@ -16,3 +16,2 @@ export declare namespace Documents {
         fetcher?: core.FetchFunction;
-        streamingFetcher?: core.StreamingFetchFunction;
     }
@@ -51,3 +50,3 @@ export class Documents {
             },
@@ -146,3 +145,3 @@ export class Documents {
             },
@@ -234,3 +233,3 @@ export class Documents {
             },
@@ -325,3 +324,3 @@ export class Documents {
             },
@@ -410,3 +409,3 @@ export class Documents {
             },
diff --git a/src/api/resources/entitlements/client/Client.ts b/src/api/resources/entitlements/client/Client.ts
index 7e6cb8d..bbe3755 100644
--- a/src/api/resources/entitlements/client/Client.ts
+++ b/src/api/resources/entitlements/client/Client.ts
@@ -16,3 +16,2 @@ export declare namespace Entitlements {
         fetcher?: core.FetchFunction;
-        streamingFetcher?: core.StreamingFetchFunction;
     }
@@ -56,3 +55,3 @@ export class Entitlements {
             },
diff --git a/src/api/resources/entitlements/types/Entitlement.ts b/src/api/resources/entitlements/types/Entitlement.ts
index a633714..71ff367 100644
--- a/src/api/resources/entitlements/types/Entitlement.ts
+++ b/src/api/resources/entitlements/types/Entitlement.ts
@@ -10,9 +10,5 @@
  *         key: "snapshots",
- *         description: "When enabled, snapshots to be taken.",
- *         influencesPrivileges: ["snapshot:create"],
  *         metadata: {
  *             "files": 10
- *         },
- *         createdAt: new Date("2023-11-15T19:31:33.015Z"),
- *         updatedAt: new Date("2023-11-15T19:31:33.015Z")
+ *         }
  *     }
@@ -22,12 +18,4 @@ export interface Entitlement {
     key: string;
-    /** Description for the entitlement */
-    description: string;
-    /** List of privilege names impacted by this entitlement */
-    influencesPrivileges: string[];
     /** Contains conditions or limits for an entitlement */
     metadata?: any;
-    /** Date the entitlement was created */
-    createdAt: Date;
-    /** Date the entitlement was last updated */
-    updatedAt: Date;
 }
diff --git a/src/api/resources/entitlements/types/ListEntitlementsResponse.ts b/src/api/resources/entitlements/types/ListEntitlementsResponse.ts
index f2aac92..251458e 100644
--- a/src/api/resources/entitlements/types/ListEntitlementsResponse.ts
+++ b/src/api/resources/entitlements/types/ListEntitlementsResponse.ts
@@ -11,9 +11,5 @@ import * as Flatfile from "../../..";
  *                 key: "snapshots",
- *                 description: "When enabled, snapshots to be taken.",
- *                 influencesPrivileges: ["snapshot:create"],
  *                 metadata: {
  *                     "files": 10
- *                 },
- *                 createdAt: new Date("2023-11-15T19:31:33.015Z"),
- *                 updatedAt: new Date("2023-11-15T19:31:33.015Z")
+ *                 }
  *             }]
diff --git a/src/api/resources/environments/client/Client.ts b/src/api/resources/environments/client/Client.ts
index dd46650..3a7e964 100644
--- a/src/api/resources/environments/client/Client.ts
+++ b/src/api/resources/environments/client/Client.ts
@@ -16,3 +16,2 @@ export declare namespace Environments {
         fetcher?: core.FetchFunction;
-        streamingFetcher?: core.StreamingFetchFunction;
     }
@@ -59,3 +58,3 @@ export class Environments {
             },
@@ -127,3 +126,3 @@ export class Environments {
             },
@@ -194,3 +193,3 @@ export class Environments {
             },
@@ -279,3 +278,3 @@ export class Environments {
             },
@@ -370,3 +369,3 @@ export class Environments {
             },
@@ -429,3 +428,3 @@ export class Environments {
             },
diff --git a/src/api/resources/events/client/Client.ts b/src/api/resources/events/client/Client.ts
index 2d11a49..526fc41 100644
--- a/src/api/resources/events/client/Client.ts
+++ b/src/api/resources/events/client/Client.ts
@@ -16,3 +16,2 @@ export declare namespace Events {
         fetcher?: core.FetchFunction;
-        streamingFetcher?: core.StreamingFetchFunction;
     }
@@ -83,3 +82,3 @@ export class Events {
             },
@@ -157,3 +156,3 @@ export class Events {
             },
@@ -234,3 +233,3 @@ export class Events {
             },
@@ -284,3 +283,3 @@ export class Events {
             },
@@ -355,3 +354,3 @@ export class Events {
             },
diff --git a/src/api/resources/files/client/Client.ts b/src/api/resources/files/client/Client.ts
index a426fc4..c9df648 100644
--- a/src/api/resources/files/client/Client.ts
+++ b/src/api/resources/files/client/Client.ts
@@ -19,3 +19,2 @@ export declare namespace Files {
         fetcher?: core.FetchFunction;
-        streamingFetcher?: core.StreamingFetchFunction;
     }
@@ -64,3 +63,3 @@ export class Files {
             },
@@ -136,4 +135,3 @@ export class Files {
-                "Content-Length": (await core.getFormDataContentLength(_request)).toString(),
             },
@@ -208,3 +206,3 @@ export class Files {
             },
@@ -285,3 +283,3 @@ export class Files {
             },
@@ -372,3 +370,3 @@ export class Files {
             },
@@ -434,4 +432,8 @@ export class Files {
 
+    /**
+     * @throws {@link Flatfile.BadRequestError}
+     * @throws {@link Flatfile.NotFoundError}
+     */
     public async download(fileId: Flatfile.FileId, requestOptions?: Files.RequestOptions): Promise<stream.Readable> {
-        const _response = await (this._options.streamingFetcher ?? core.streamingFetcher)({
+        const _response = await (this._options.fetcher ?? core.fetcher)<stream.Readable>({
             url: urlJoin(
@@ -446,7 +448,56 @@ export class Files {
             },
+            contentType: "application/json",
+            responseType: "streaming",
             timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
         });
-        return _response.data;
+        if (_response.ok) {
+            return _response.body;
+        }
+
+        if (_response.error.reason === "status-code") {
+            switch (_response.error.statusCode) {
+                case 400:
+                    throw new Flatfile.BadRequestError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                case 404:
+                    throw new Flatfile.NotFoundError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                default:
+                    throw new errors.FlatfileError({
+                        statusCode: _response.error.statusCode,
+                        body: _response.error.body,
+                    });
+            }
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
     }
diff --git a/src/api/resources/guests/client/Client.ts b/src/api/resources/guests/client/Client.ts
index fcfe6c5..244441e 100644
--- a/src/api/resources/guests/client/Client.ts
+++ b/src/api/resources/guests/client/Client.ts
@@ -16,3 +16,2 @@ export declare namespace Guests {
         fetcher?: core.FetchFunction;
-        streamingFetcher?: core.StreamingFetchFunction;
     }
@@ -58,3 +57,3 @@ export class Guests {
             },
@@ -129,3 +128,3 @@ export class Guests {
             },
@@ -189,3 +188,3 @@ export class Guests {
             },
@@ -245,3 +244,3 @@ export class Guests {
             },
@@ -308,3 +307,3 @@ export class Guests {
             },
@@ -375,3 +374,3 @@ export class Guests {
             },
@@ -414,2 +413,283 @@ export class Guests {
 
+    /**
+     * Lists roles assigned to a guest.
+     * @throws {@link Flatfile.BadRequestError}
+     * @throws {@link Flatfile.NotFoundError}
+     * @throws {@link Flatfile.ForbiddenError}
+     */
+    public async listGuestRoles(
+        guestId: Flatfile.GuestId,
+        requestOptions?: Guests.RequestOptions
+    ): Promise<Flatfile.ListActorRolesResponse> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                `guests/${await serializers.GuestId.jsonOrThrow(guestId)}/roles`
+            ),
+            method: "GET",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.ListActorRolesResponse.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            switch (_response.error.statusCode) {
+                case 400:
+                    throw new Flatfile.BadRequestError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                case 404:
+                    throw new Flatfile.NotFoundError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                case 403:
+                    throw new Flatfile.ForbiddenError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                default:
+                    throw new errors.FlatfileError({
+                        statusCode: _response.error.statusCode,
+                        body: _response.error.body,
+                    });
+            }
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    /**
+     * Assigns a role to a guest.
+     * @throws {@link Flatfile.BadRequestError}
+     * @throws {@link Flatfile.NotFoundError}
+     * @throws {@link Flatfile.ForbiddenError}
+     */
+    public async assignGuestRole(
+        guestId: Flatfile.GuestId,
+        request: Flatfile.AssignActorRoleRequest,
+        requestOptions?: Guests.RequestOptions
+    ): Promise<Flatfile.AssignRoleResponse> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                `guests/${await serializers.GuestId.jsonOrThrow(guestId)}/roles`
+            ),
+            method: "POST",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            body: await serializers.AssignActorRoleRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.AssignRoleResponse.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            switch (_response.error.statusCode) {
+                case 400:
+                    throw new Flatfile.BadRequestError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                case 404:
+                    throw new Flatfile.NotFoundError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                case 403:
+                    throw new Flatfile.ForbiddenError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                default:
+                    throw new errors.FlatfileError({
+                        statusCode: _response.error.statusCode,
+                        body: _response.error.body,
+                    });
+            }
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    /**
+     * Removes a role from a guest.
+     * @throws {@link Flatfile.BadRequestError}
+     * @throws {@link Flatfile.NotFoundError}
+     * @throws {@link Flatfile.ForbiddenError}
+     */
+    public async deleteGuestRole(
+        guestId: Flatfile.GuestId,
+        actorRoleId: Flatfile.ActorRoleId,
+        requestOptions?: Guests.RequestOptions
+    ): Promise<Flatfile.Success> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                `guests/${await serializers.GuestId.jsonOrThrow(
+                    guestId
+                )}/roles/${await serializers.ActorRoleId.jsonOrThrow(actorRoleId)}`
+            ),
+            method: "DELETE",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.Success.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            switch (_response.error.statusCode) {
+                case 400:
+                    throw new Flatfile.BadRequestError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                case 404:
+                    throw new Flatfile.NotFoundError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                case 403:
+                    throw new Flatfile.ForbiddenError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                default:
+                    throw new errors.FlatfileError({
+                        statusCode: _response.error.statusCode,
+                        body: _response.error.body,
+                    });
+            }
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
     /**
@@ -437,3 +717,3 @@ export class Guests {
             },
diff --git a/src/api/resources/index.ts b/src/api/resources/index.ts
index da8e64d..080ee96 100644
--- a/src/api/resources/index.ts
+++ b/src/api/resources/index.ts
@@ -63,3 +63,2 @@ export * from "./mapping/client/requests";
 export * from "./records/client/requests";
-export * from "./roles/client/requests";
 export * from "./secrets/client/requests";
diff --git a/src/api/resources/jobs/client/Client.ts b/src/api/resources/jobs/client/Client.ts
index 0a6e4fd..9e49188 100644
--- a/src/api/resources/jobs/client/Client.ts
+++ b/src/api/resources/jobs/client/Client.ts
@@ -16,3 +16,2 @@ export declare namespace Jobs {
         fetcher?: core.FetchFunction;
-        streamingFetcher?: core.StreamingFetchFunction;
     }
@@ -77,3 +76,3 @@ export class Jobs {
             },
@@ -131,3 +130,3 @@ export class Jobs {
             },
@@ -182,3 +181,3 @@ export class Jobs {
             },
@@ -236,3 +235,3 @@ export class Jobs {
             },
@@ -287,3 +286,3 @@ export class Jobs {
             },
@@ -343,3 +342,3 @@ export class Jobs {
             },
@@ -402,3 +401,3 @@ export class Jobs {
             },
@@ -499,3 +498,3 @@ export class Jobs {
             },
@@ -557,3 +556,3 @@ export class Jobs {
             },
@@ -624,3 +623,3 @@ export class Jobs {
             },
@@ -687,3 +686,3 @@ export class Jobs {
             },
@@ -759,3 +758,3 @@ export class Jobs {
             },
@@ -835,3 +834,3 @@ export class Jobs {
             },
@@ -901,3 +900,3 @@ export class Jobs {
             },
@@ -958,3 +957,3 @@ export class Jobs {
             },
@@ -1014,3 +1013,3 @@ export class Jobs {
             },
@@ -1077,3 +1076,3 @@ export class Jobs {
             },
diff --git a/src/api/resources/jobs/types/JobOutcome.ts b/src/api/resources/jobs/types/JobOutcome.ts
index b28019e..0fa0bdd 100644
--- a/src/api/resources/jobs/types/JobOutcome.ts
+++ b/src/api/resources/jobs/types/JobOutcome.ts
@@ -27,2 +27,3 @@ export interface JobOutcome {
     message?: string;
+    hideDefaultButton?: boolean;
 }
diff --git a/src/api/resources/jobs/types/JobUpdate.ts b/src/api/resources/jobs/types/JobUpdate.ts
index dc23f9c..0f938e5 100644
--- a/src/api/resources/jobs/types/JobUpdate.ts
+++ b/src/api/resources/jobs/types/JobUpdate.ts
@@ -24,2 +24,4 @@ export interface JobUpdate {
     outcomeAcknowledgedAt?: Date;
+    /** Current status of job in text */
+    info?: string;
 }
diff --git a/src/api/resources/mapping/client/Client.ts b/src/api/resources/mapping/client/Client.ts
index 049ffe4..cd4b4b1 100644
--- a/src/api/resources/mapping/client/Client.ts
+++ b/src/api/resources/mapping/client/Client.ts
@@ -16,3 +16,2 @@ export declare namespace Mapping {
         fetcher?: core.FetchFunction;
-        streamingFetcher?: core.StreamingFetchFunction;
     }
@@ -48,3 +47,3 @@ export class Mapping {
             },
@@ -110,2 +109,80 @@ export class Mapping {
 
+    /**
+     * Deletes all history for the authenticated user
+     * @throws {@link Flatfile.BadRequestError}
+     * @throws {@link Flatfile.NotFoundError}
+     */
+    public async deleteAllHistoryForUser(requestOptions?: Mapping.RequestOptions): Promise<Flatfile.Success> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                "/mapping"
+            ),
+            method: "DELETE",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.Success.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            switch (_response.error.statusCode) {
+                case 400:
+                    throw new Flatfile.BadRequestError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                case 404:
+                    throw new Flatfile.NotFoundError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                default:
+                    throw new errors.FlatfileError({
+                        statusCode: _response.error.statusCode,
+                        body: _response.error.body,
+                    });
+            }
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
     /**
@@ -182,3 +259,3 @@ export class Mapping {
             },
@@ -254,3 +331,3 @@ export class Mapping {
             },
@@ -336,3 +413,3 @@ export class Mapping {
             },
@@ -418,3 +495,3 @@ export class Mapping {
             },
@@ -500,3 +577,3 @@ export class Mapping {
             },
@@ -585,3 +662,3 @@ export class Mapping {
             },
@@ -672,3 +749,3 @@ export class Mapping {
             },
@@ -764,3 +841,3 @@ export class Mapping {
             },
@@ -826,2 +903,85 @@ export class Mapping {
 
+    /**
+     * Updates a list of mapping rules in a program
+     * @throws {@link Flatfile.BadRequestError}
+     * @throws {@link Flatfile.NotFoundError}
+     */
+    public async updateRules(
+        programId: Flatfile.ProgramId,
+        request: Flatfile.UpdateMappingRulesRequest,
+        requestOptions?: Mapping.RequestOptions
+    ): Promise<Flatfile.MappingRulesResponse> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                `/mapping/${await serializers.ProgramId.jsonOrThrow(programId)}/rules`
+            ),
+            method: "PATCH",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            body: await serializers.UpdateMappingRulesRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.MappingRulesResponse.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            switch (_response.error.statusCode) {
+                case 400:
+                    throw new Flatfile.BadRequestError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                case 404:
+                    throw new Flatfile.NotFoundError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                default:
+                    throw new errors.FlatfileError({
+                        statusCode: _response.error.statusCode,
+                        body: _response.error.body,
+                    });
+            }
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
     /**
@@ -852,3 +1012,3 @@ export class Mapping {
             },
diff --git a/src/api/resources/mapping/types/MappingRule.ts b/src/api/resources/mapping/types/MappingRule.ts
index 2d3e2ad..bb2d6c1 100644
--- a/src/api/resources/mapping/types/MappingRule.ts
+++ b/src/api/resources/mapping/types/MappingRule.ts
@@ -22,3 +22,5 @@ export interface MappingRule extends Flatfile.MappingRuleConfig {
     id: Flatfile.MappingId;
-    /** User ID of the creator of the mapping rule */
+    /** Confidence of the mapping rule */
+    confidence?: number;
+    /** User ID of the user who suggested the mapping rule */
     createdBy?: Flatfile.UserId;
diff --git a/src/api/resources/mapping/types/MappingRuleConfig.ts b/src/api/resources/mapping/types/MappingRuleConfig.ts
index 8b23690..4067f44 100644
--- a/src/api/resources/mapping/types/MappingRuleConfig.ts
+++ b/src/api/resources/mapping/types/MappingRuleConfig.ts
@@ -19,6 +19,6 @@ export interface MappingRuleConfig {
     config?: any;
-    /** Confidence of the mapping rule */
-    confidence?: number;
+    /** Time the mapping rule was last updated */
+    acceptedAt?: Date;
     /** User ID of the contributor of the mapping rule */
-    contributor?: Flatfile.UserId;
+    acceptedBy?: Flatfile.UserId;
 }
diff --git a/src/api/resources/mapping/types/MappingRuleOrConfig.ts b/src/api/resources/mapping/types/MappingRuleOrConfig.ts
index 0b08604..72e07d1 100644
--- a/src/api/resources/mapping/types/MappingRuleOrConfig.ts
+++ b/src/api/resources/mapping/types/MappingRuleOrConfig.ts
@@ -9,2 +9,4 @@ export interface MappingRuleOrConfig extends Flatfile.MappingRuleConfig {
     id?: Flatfile.MappingId;
+    /** Confidence of the mapping rule */
+    confidence?: number;
     /** User ID of the creator of the mapping rule */
diff --git a/src/api/resources/mapping/types/UpdateMappingRulesRequest.ts b/src/api/resources/mapping/types/UpdateMappingRulesRequest.ts
new file mode 100644
index 0000000..3626c07
--- /dev/null
+++ b/src/api/resources/mapping/types/UpdateMappingRulesRequest.ts
@@ -0,0 +1,7 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+export type UpdateMappingRulesRequest = Flatfile.MappingRule[];
diff --git a/src/api/resources/mapping/types/index.ts b/src/api/resources/mapping/types/index.ts
index e680b72..14ef3a7 100644
--- a/src/api/resources/mapping/types/index.ts
+++ b/src/api/resources/mapping/types/index.ts
@@ -9,2 +9,3 @@ export * from "./MappingRuleOrConfig";
 export * from "./CreateMappingRulesRequest";
+export * from "./UpdateMappingRulesRequest";
 export * from "./MappingRuleResponse";
diff --git a/src/api/resources/records/client/Client.ts b/src/api/resources/records/client/Client.ts
index 60fec6d..d432093 100644
--- a/src/api/resources/records/client/Client.ts
+++ b/src/api/resources/records/client/Client.ts
@@ -16,3 +16,2 @@ export declare namespace Records {
         fetcher?: core.FetchFunction;
-        streamingFetcher?: core.StreamingFetchFunction;
     }
@@ -154,3 +153,3 @@ export class Records {
             },
@@ -263,3 +262,3 @@ export class Records {
             },
@@ -365,3 +364,3 @@ export class Records {
             },
@@ -463,3 +462,3 @@ export class Records {
             },
@@ -575,3 +574,3 @@ export class Records {
             },
diff --git a/src/api/resources/records/types/FieldRecordCounts.ts b/src/api/resources/records/types/FieldRecordCounts.ts
new file mode 100644
index 0000000..eddda0d
--- /dev/null
+++ b/src/api/resources/records/types/FieldRecordCounts.ts
@@ -0,0 +1,19 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+/**
+ * @example
+ *     {
+ *         valid: 1000,
+ *         error: 0,
+ *         total: 1000,
+ *         empty: 0
+ *     }
+ */
+export interface FieldRecordCounts {
+    total: number;
+    valid: number;
+    error: number;
+    empty: number;
+}
diff --git a/src/api/resources/records/types/RecordCounts.ts b/src/api/resources/records/types/RecordCounts.ts
index ca54327..5b538e2 100644
--- a/src/api/resources/records/types/RecordCounts.ts
+++ b/src/api/resources/records/types/RecordCounts.ts
@@ -4,2 +4,4 @@
 
+import * as Flatfile from "../../..";
+
 /**
@@ -17,2 +19,4 @@ export interface RecordCounts {
     errorsByField?: Record<string, number>;
+    /** Counts for valid, error, and total records grouped by field key */
+    byField?: Record<string, Flatfile.FieldRecordCounts>;
 }
diff --git a/src/api/resources/records/types/index.ts b/src/api/resources/records/types/index.ts
index 937d372..4b1f724 100644
--- a/src/api/resources/records/types/index.ts
+++ b/src/api/resources/records/types/index.ts
@@ -4,2 +4,3 @@ export * from "./GetRecordsResponse";
 export * from "./GetRecordsResponseData";
+export * from "./FieldRecordCounts";
 export * from "./RecordCounts";
diff --git a/src/api/resources/roles/client/Client.ts b/src/api/resources/roles/client/Client.ts
index d34b962..f236c1d 100644
--- a/src/api/resources/roles/client/Client.ts
+++ b/src/api/resources/roles/client/Client.ts
@@ -7,4 +7,4 @@ import * as core from "../../../../core";
 import * as Flatfile from "../../..";
-import * as serializers from "../../../../serialization";
 import urlJoin from "url-join";
+import * as serializers from "../../../../serialization";
 import * as errors from "../../../../errors";
@@ -16,3 +16,2 @@ export declare namespace Roles {
         fetcher?: core.FetchFunction;
-        streamingFetcher?: core.StreamingFetchFunction;
     }
@@ -29,11 +28,5 @@ export class Roles {
     /**
-     * Assign an existing role to the specified actor in the specified resource context
-     * @throws {@link Flatfile.BadRequestError}
-     * @throws {@link Flatfile.NotFoundError}
+     * List all roles for an account
      */
-    public async assign(
-        roleId: string,
-        request: Flatfile.AssignRoleRequest,
-        requestOptions?: Roles.RequestOptions
-    ): Promise<Flatfile.AssignRoleResponse> {
+    public async list(requestOptions?: Roles.RequestOptions): Promise<Flatfile.ListRolesResponse> {
         const _response = await (this._options.fetcher ?? core.fetcher)({
@@ -41,5 +34,5 @@ export class Roles {
                 (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
-                `/roles/${roleId}`
+                "/roles"
             ),
-            method: "POST",
+            method: "GET",
             headers: {
@@ -49,6 +42,5 @@ export class Roles {
             },
             contentType: "application/json",
-            body: await serializers.AssignRoleRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
             timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
@@ -57,3 +49,3 @@ export class Roles {
         if (_response.ok) {
-            return await serializers.AssignRoleResponse.parseOrThrow(_response.body, {
+            return await serializers.ListRolesResponse.parseOrThrow(_response.body, {
                 unrecognizedObjectKeys: "passthrough",
@@ -67,29 +59,6 @@ export class Roles {
         if (_response.error.reason === "status-code") {
-            switch (_response.error.statusCode) {
-                case 400:
-                    throw new Flatfile.BadRequestError(
-                        await serializers.Errors.parseOrThrow(_response.error.body, {
-                            unrecognizedObjectKeys: "passthrough",
-                            allowUnrecognizedUnionMembers: true,
-                            allowUnrecognizedEnumValues: true,
-                            skipValidation: true,
-                            breadcrumbsPrefix: ["response"],
-                        })
-                    );
-                case 404:
-                    throw new Flatfile.NotFoundError(
-                        await serializers.Errors.parseOrThrow(_response.error.body, {
-                            unrecognizedObjectKeys: "passthrough",
-                            allowUnrecognizedUnionMembers: true,
-                            allowUnrecognizedEnumValues: true,
-                            skipValidation: true,
-                            breadcrumbsPrefix: ["response"],
-                        })
-                    );
-                default:
-                    throw new errors.FlatfileError({
-                        statusCode: _response.error.statusCode,
-                        body: _response.error.body,
-                    });
-            }
+            throw new errors.FlatfileError({
+                statusCode: _response.error.statusCode,
+                body: _response.error.body,
+            });
         }
diff --git a/src/api/resources/roles/client/index.ts b/src/api/resources/roles/client/index.ts
index 415726b..cb0ff5c 100644
--- a/src/api/resources/roles/client/index.ts
+++ b/src/api/resources/roles/client/index.ts
@@ -1 +1 @@
-export * from "./requests";
+export {};
diff --git a/src/api/resources/roles/client/requests/AssignRoleRequest.ts b/src/api/resources/roles/client/requests/AssignRoleRequest.ts
deleted file mode 100644
index 71805ce..0000000
--- a/src/api/resources/roles/client/requests/AssignRoleRequest.ts
+++ /dev/null
@@ -1,12 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as Flatfile from "../../../..";
-
-export interface AssignRoleRequest {
-    /** The user, agent, or guest to assign the role to */
-    actorId: Flatfile.ActorIdUnion;
-    /** The account, environment, or space context for the role assignment */
-    resourceId: Flatfile.ResourceIdUnion;
-}
diff --git a/src/api/resources/roles/client/requests/index.ts b/src/api/resources/roles/client/requests/index.ts
deleted file mode 100644
index 3da530d..0000000
--- a/src/api/resources/roles/client/requests/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export { AssignRoleRequest } from "./AssignRoleRequest";
diff --git a/src/api/resources/roles/types/ActorRoleResponse.ts b/src/api/resources/roles/types/ActorRoleResponse.ts
new file mode 100644
index 0000000..fbc4e6d
--- /dev/null
+++ b/src/api/resources/roles/types/ActorRoleResponse.ts
@@ -0,0 +1,14 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+export interface ActorRoleResponse {
+    id: Flatfile.ActorRoleId;
+    roleId: Flatfile.RoleId;
+    actorId: Flatfile.ActorIdUnion;
+    resourceId: Flatfile.ResourceIdUnion;
+    createdAt: Date;
+    updatedAt: Date;
+}
diff --git a/src/api/resources/roles/types/AssignActorRoleRequest.ts b/src/api/resources/roles/types/AssignActorRoleRequest.ts
new file mode 100644
index 0000000..9ee92d0
--- /dev/null
+++ b/src/api/resources/roles/types/AssignActorRoleRequest.ts
@@ -0,0 +1,10 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+export interface AssignActorRoleRequest {
+    roleId: Flatfile.RoleId;
+    resourceId: Flatfile.ResourceIdUnion;
+}
diff --git a/src/api/resources/roles/types/AssignRoleResponseData.ts b/src/api/resources/roles/types/AssignRoleResponseData.ts
index ac7434b..57e6ca5 100644
--- a/src/api/resources/roles/types/AssignRoleResponseData.ts
+++ b/src/api/resources/roles/types/AssignRoleResponseData.ts
@@ -6,3 +6,4 @@ import * as Flatfile from "../../..";
 
-export interface AssignRoleResponseData extends Flatfile.SuccessData {
+export interface AssignRoleResponseData {
+    id: Flatfile.ActorRoleId;
     roleId: Flatfile.RoleId;
@@ -10,2 +11,4 @@ export interface AssignRoleResponseData extends Flatfile.SuccessData {
     resourceId: Flatfile.ResourceIdUnion;
+    createdAt: Date;
+    updatedAt: Date;
 }
diff --git a/src/api/resources/roles/types/ListActorRolesResponse.ts b/src/api/resources/roles/types/ListActorRolesResponse.ts
new file mode 100644
index 0000000..6db3976
--- /dev/null
+++ b/src/api/resources/roles/types/ListActorRolesResponse.ts
@@ -0,0 +1,9 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+export interface ListActorRolesResponse {
+    data: Flatfile.ActorRoleResponse[];
+}
diff --git a/src/api/resources/roles/types/ListRolesResponse.ts b/src/api/resources/roles/types/ListRolesResponse.ts
new file mode 100644
index 0000000..c97d75d
--- /dev/null
+++ b/src/api/resources/roles/types/ListRolesResponse.ts
@@ -0,0 +1,9 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+export interface ListRolesResponse {
+    data: Flatfile.RoleResponse[];
+}
diff --git a/src/api/resources/roles/types/RoleResponse.ts b/src/api/resources/roles/types/RoleResponse.ts
new file mode 100644
index 0000000..6ee4702
--- /dev/null
+++ b/src/api/resources/roles/types/RoleResponse.ts
@@ -0,0 +1,13 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+export interface RoleResponse {
+    id: Flatfile.RoleId;
+    name: string;
+    accountId: Flatfile.AccountId;
+    createdAt: Date;
+    updatedAt: Date;
+}
diff --git a/src/api/resources/roles/types/index.ts b/src/api/resources/roles/types/index.ts
index a863095..3f3be0a 100644
--- a/src/api/resources/roles/types/index.ts
+++ b/src/api/resources/roles/types/index.ts
@@ -1 +1,6 @@
+export * from "./ListRolesResponse";
+export * from "./RoleResponse";
+export * from "./ListActorRolesResponse";
+export * from "./ActorRoleResponse";
+export * from "./AssignActorRoleRequest";
 export * from "./ActorIdUnion";
diff --git a/src/api/resources/secrets/client/Client.ts b/src/api/resources/secrets/client/Client.ts
index 7679d5c..04943f4 100644
--- a/src/api/resources/secrets/client/Client.ts
+++ b/src/api/resources/secrets/client/Client.ts
@@ -16,3 +16,2 @@ export declare namespace Secrets {
         fetcher?: core.FetchFunction;
-        streamingFetcher?: core.StreamingFetchFunction;
     }
@@ -63,3 +62,3 @@ export class Secrets {
             },
@@ -153,3 +152,3 @@ export class Secrets {
             },
@@ -238,3 +237,3 @@ export class Secrets {
             },
diff --git a/src/api/resources/sheets/client/Client.ts b/src/api/resources/sheets/client/Client.ts
index 3952fd9..c487f45 100644
--- a/src/api/resources/sheets/client/Client.ts
+++ b/src/api/resources/sheets/client/Client.ts
@@ -17,3 +17,2 @@ export declare namespace Sheets {
         fetcher?: core.FetchFunction;
-        streamingFetcher?: core.StreamingFetchFunction;
     }
@@ -55,3 +54,3 @@ export class Sheets {
             },
@@ -115,3 +114,3 @@ export class Sheets {
             },
@@ -173,3 +172,3 @@ export class Sheets {
             },
@@ -257,3 +256,3 @@ export class Sheets {
             },
@@ -388,3 +387,3 @@ export class Sheets {
 
-        const _response = await (this._options.streamingFetcher ?? core.streamingFetcher)({
+        const _response = await (this._options.fetcher ?? core.fetcher)<stream.Readable>({
             url: urlJoin(
@@ -399,8 +398,34 @@ export class Sheets {
             },
+            contentType: "application/json",
             queryParameters: _queryParams,
+            responseType: "streaming",
             timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
         });
-        return _response.data;
+        if (_response.ok) {
+            return _response.body;
+        }
+
+        if (_response.error.reason === "status-code") {
+            throw new errors.FlatfileError({
+                statusCode: _response.error.statusCode,
+                body: _response.error.body,
+            });
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
     }
@@ -484,3 +509,3 @@ export class Sheets {
             },
@@ -544,3 +569,3 @@ export class Sheets {
             },
@@ -634,3 +659,3 @@ export class Sheets {
             },
@@ -696,3 +721,3 @@ export class Sheets {
             },
@@ -780,3 +805,3 @@ export class Sheets {
             },
@@ -921,3 +946,3 @@ export class Sheets {
             },
diff --git a/src/api/resources/sheets/client/requests/GetRecordCountsRequest.ts b/src/api/resources/sheets/client/requests/GetRecordCountsRequest.ts
index 2b303a1..5d0af9e 100644
--- a/src/api/resources/sheets/client/requests/GetRecordCountsRequest.ts
+++ b/src/api/resources/sheets/client/requests/GetRecordCountsRequest.ts
@@ -46,3 +46,3 @@ export interface GetRecordCountsRequest {
     /**
-     * If true, the error counts for each field will also be returned
+     * If true, the counts for each field will also be returned
      */
diff --git a/src/api/resources/snapshots/client/Client.ts b/src/api/resources/snapshots/client/Client.ts
index ca81e52..caebc05 100644
--- a/src/api/resources/snapshots/client/Client.ts
+++ b/src/api/resources/snapshots/client/Client.ts
@@ -16,3 +16,2 @@ export declare namespace Snapshots {
         fetcher?: core.FetchFunction;
-        streamingFetcher?: core.StreamingFetchFunction;
     }
@@ -54,3 +53,3 @@ export class Snapshots {
             },
@@ -144,3 +143,3 @@ export class Snapshots {
             },
@@ -235,3 +234,3 @@ export class Snapshots {
             },
@@ -320,3 +319,3 @@ export class Snapshots {
             },
@@ -409,3 +408,3 @@ export class Snapshots {
             },
@@ -518,3 +517,3 @@ export class Snapshots {
             },
diff --git a/src/api/resources/spaces/client/Client.ts b/src/api/resources/spaces/client/Client.ts
index fa569d0..49c6138 100644
--- a/src/api/resources/spaces/client/Client.ts
+++ b/src/api/resources/spaces/client/Client.ts
@@ -16,3 +16,2 @@ export declare namespace Spaces {
         fetcher?: core.FetchFunction;
-        streamingFetcher?: core.StreamingFetchFunction;
     }
@@ -100,3 +99,3 @@ export class Spaces {
             },
@@ -180,3 +179,3 @@ export class Spaces {
             },
@@ -265,3 +264,3 @@ export class Spaces {
             },
@@ -346,3 +345,3 @@ export class Spaces {
             },
@@ -440,3 +439,3 @@ export class Spaces {
             },
@@ -528,3 +527,3 @@ export class Spaces {
             },
@@ -613,3 +612,3 @@ export class Spaces {
             },
diff --git a/src/api/resources/users/client/Client.ts b/src/api/resources/users/client/Client.ts
index c4271e5..74e691f 100644
--- a/src/api/resources/users/client/Client.ts
+++ b/src/api/resources/users/client/Client.ts
@@ -16,3 +16,2 @@ export declare namespace Users {
         fetcher?: core.FetchFunction;
-        streamingFetcher?: core.StreamingFetchFunction;
     }
@@ -57,3 +56,3 @@ export class Users {
             },
@@ -114,3 +113,3 @@ export class Users {
             },
@@ -182,3 +181,3 @@ export class Users {
             },
@@ -243,3 +242,3 @@ export class Users {
             },
@@ -300,3 +299,3 @@ export class Users {
             },
diff --git a/src/api/resources/versions/client/Client.ts b/src/api/resources/versions/client/Client.ts
index e84ae80..85001c3 100644
--- a/src/api/resources/versions/client/Client.ts
+++ b/src/api/resources/versions/client/Client.ts
@@ -16,3 +16,2 @@ export declare namespace Versions {
         fetcher?: core.FetchFunction;
-        streamingFetcher?: core.StreamingFetchFunction;
     }
@@ -43,3 +42,3 @@ export class Versions {
             },
diff --git a/src/api/resources/workbooks/client/Client.ts b/src/api/resources/workbooks/client/Client.ts
index 0409222..7dc38a4 100644
--- a/src/api/resources/workbooks/client/Client.ts
+++ b/src/api/resources/workbooks/client/Client.ts
@@ -16,3 +16,2 @@ export declare namespace Workbooks {
         fetcher?: core.FetchFunction;
-        streamingFetcher?: core.StreamingFetchFunction;
     }
@@ -63,3 +62,3 @@ export class Workbooks {
             },
@@ -168,3 +167,3 @@ export class Workbooks {
             },
@@ -243,3 +242,3 @@ export class Workbooks {
             },
@@ -327,3 +326,3 @@ export class Workbooks {
             },
@@ -422,3 +421,3 @@ export class Workbooks {
             },
@@ -512,3 +511,3 @@ export class Workbooks {
             },
@@ -571,3 +570,3 @@ export class Workbooks {
             },
diff --git a/src/core/fetcher/APIResponse.ts b/src/core/fetcher/APIResponse.ts
index ea838f3..3664d09 100644
--- a/src/core/fetcher/APIResponse.ts
+++ b/src/core/fetcher/APIResponse.ts
@@ -5,2 +5,3 @@ export interface SuccessfulResponse<T> {
     body: T;
+    headers?: Record<string, any>;
 }
diff --git a/src/core/fetcher/Fetcher.ts b/src/core/fetcher/Fetcher.ts
index d2d54ef..19de5d4 100644
--- a/src/core/fetcher/Fetcher.ts
+++ b/src/core/fetcher/Fetcher.ts
@@ -1,2 +1,2 @@
-import axios, { AxiosAdapter, AxiosError, AxiosResponse } from "axios";
+import { default as FormData } from "form-data";
 import qs from "qs";
@@ -17,5 +17,3 @@ export declare namespace Fetcher {
         withCredentials?: boolean;
-        responseType?: "json" | "blob";
-        adapter?: AxiosAdapter;
-        onUploadProgress?: (event: ProgressEvent) => void;
+        responseType?: "json" | "blob" | "streaming";
     }
@@ -64,25 +62,35 @@ async function fetcherImpl<R = unknown>(args: Fetcher.Args): Promise<APIResponse
 
-    const makeRequest = async (): Promise<AxiosResponse> =>
-        await axios({
-            url: args.url,
-            params: args.queryParameters,
-            paramsSerializer: (params) => {
-                return qs.stringify(params, { arrayFormat: "repeat" });
-            },
+    const url =
+        Object.keys(args.queryParameters ?? {}).length > 0
+            ? `${args.url}?${qs.stringify(args.queryParameters, { arrayFormat: "repeat" })}`
+            : args.url;
+
+    let body: BodyInit | undefined = undefined;
+    if (args.body instanceof FormData) {
+        // @ts-expect-error
+        body = args.body;
+    } else {
+        body = JSON.stringify(args.body);
+    }
+
+    const fetchFn = typeof fetch == "function" ? fetch : require("node-fetch");
+
+    const makeRequest = async (): Promise<Response> => {
+        const controller = new AbortController();
+        let abortId = undefined;
+        if (args.timeoutMs != null) {
+            abortId = setTimeout(() => controller.abort(), args.timeoutMs);
+        }
+        const response = await fetchFn(url, {
             method: args.method,
             headers,
-            data: args.body,
-            validateStatus: () => true,
-            transformResponse: (response) => response,
-            timeout: args.timeoutMs,
-            transitional: {
-                clarifyTimeoutError: true,
-            },
-            withCredentials: args.withCredentials,
-            adapter: args.adapter,
-            onUploadProgress: args.onUploadProgress,
-            maxBodyLength: Infinity,
-            maxContentLength: Infinity,
-            responseType: args.responseType ?? "json",
+            body,
+            signal: controller.signal,
+            credentials: args.withCredentials ? "include" : undefined,
         });
+        if (abortId != null) {
+            clearTimeout(abortId);
+        }
+        return response;
+    };
 
@@ -107,16 +115,21 @@ async function fetcherImpl<R = unknown>(args: Fetcher.Args): Promise<APIResponse
         let body: unknown;
-        if (args.responseType === "blob") {
-            body = response.data;
-        } else if (response.data != null && response.data.length > 0) {
-            try {
-                body = JSON.parse(response.data) ?? undefined;
-            } catch {
-                return {
-                    ok: false,
-                    error: {
-                        reason: "non-json",
-                        statusCode: response.status,
-                        rawBody: response.data,
-                    },
-                };
+        if (response.body != null && args.responseType === "blob") {
+            body = await response.blob();
+        } else if (response.body != null && args.responseType === "streaming") {
+            body = response.body;
+        } else {
+            const text = await response.text();
+            if (text.length > 0) {
+                try {
+                    body = JSON.parse(text);
+                } catch (err) {
+                    return {
+                        ok: false,
+                        error: {
+                            reason: "non-json",
+                            statusCode: response.status,
+                            rawBody: text,
+                        },
+                    };
+                }
             }
@@ -128,2 +141,3 @@ async function fetcherImpl<R = unknown>(args: Fetcher.Args): Promise<APIResponse
                 body: body as R,
+                headers: response.headers,
             };
@@ -140,3 +154,3 @@ async function fetcherImpl<R = unknown>(args: Fetcher.Args): Promise<APIResponse
     } catch (error) {
-        if ((error as AxiosError).code === "ETIMEDOUT") {
+        if (error instanceof Error && error.name === "AbortError") {
             return {
@@ -147,2 +161,10 @@ async function fetcherImpl<R = unknown>(args: Fetcher.Args): Promise<APIResponse
             };
+        } else if (error instanceof Error) {
+            return {
+                ok: false,
+                error: {
+                    reason: "unknown",
+                    errorMessage: error.message,
+                },
+            };
         }
@@ -153,3 +175,3 @@ async function fetcherImpl<R = unknown>(args: Fetcher.Args): Promise<APIResponse
                 reason: "unknown",
-                errorMessage: (error as AxiosError).message,
+                errorMessage: JSON.stringify(error),
             },
diff --git a/src/core/fetcher/getHeader.ts b/src/core/fetcher/getHeader.ts
new file mode 100644
index 0000000..50f922b
--- /dev/null
+++ b/src/core/fetcher/getHeader.ts
@@ -0,0 +1,8 @@
+export function getHeader(headers: Record<string, any>, header: string): string | undefined {
+    for (const [headerKey, headerValue] of Object.entries(headers)) {
+        if (headerKey.toLowerCase() === header.toLowerCase()) {
+            return headerValue;
+        }
+    }
+    return undefined;
+}
diff --git a/src/core/fetcher/index.ts b/src/core/fetcher/index.ts
index 6becab2..2d658ca 100644
--- a/src/core/fetcher/index.ts
+++ b/src/core/fetcher/index.ts
@@ -3,2 +3,3 @@ export { fetcher } from "./Fetcher";
 export type { Fetcher, FetchFunction } from "./Fetcher";
+export { getHeader } from "./getHeader";
 export { Supplier } from "./Supplier";
diff --git a/src/core/form-data-utils/getFormDataContentLength.ts b/src/core/form-data-utils/getFormDataContentLength.ts
deleted file mode 100644
index fb2a1a0..0000000
--- a/src/core/form-data-utils/getFormDataContentLength.ts
+++ /dev/null
@@ -1,13 +0,0 @@
-import { default as FormData } from "form-data";
-
-export async function getFormDataContentLength(formData: FormData): Promise<number> {
-    return new Promise((resolve, reject) => {
-        formData.getLength((err, length) => {
-            if (err != null) {
-                reject(err);
-            } else {
-                resolve(length);
-            }
-        });
-    });
-}
diff --git a/src/core/form-data-utils/index.ts b/src/core/form-data-utils/index.ts
deleted file mode 100644
index 0ebc6c9..0000000
--- a/src/core/form-data-utils/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export { getFormDataContentLength } from "./getFormDataContentLength";
diff --git a/src/core/index.ts b/src/core/index.ts
index c26940d..e2eb66e 100644
--- a/src/core/index.ts
+++ b/src/core/index.ts
@@ -2,4 +2,2 @@ export * from "./fetcher";
 export * from "./auth";
-export * from "./streaming-fetcher";
-export * from "./form-data-utils";
 export * as serialization from "./schemas";
diff --git a/src/core/streaming-fetcher/Stream.ts b/src/core/streaming-fetcher/Stream.ts
deleted file mode 100644
index 216be48..0000000
--- a/src/core/streaming-fetcher/Stream.ts
+++ /dev/null
@@ -1,43 +0,0 @@
-import { Readable } from "stream";
-
-export class Stream<T> implements AsyncIterable<T> {
-    private stream: Readable;
-    private parse: (val: unknown) => Promise<T>;
-    private terminator: string;
-
-    constructor({
-        stream,
-        parse,
-        terminator,
-    }: {
-        stream: Readable;
-        parse: (val: unknown) => Promise<T>;
-        terminator: string;
-    }) {
-        this.stream = stream;
-        this.parse = parse;
-        this.terminator = terminator;
-    }
-
-    private async *iterMessages(): AsyncGenerator<T, void> {
-        let previous = "";
-        for await (const chunk of this.stream) {
-            const bufferChunk = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk);
-            previous += bufferChunk;
-            let terminatorIndex: number;
-
-            while ((terminatorIndex = previous.indexOf(this.terminator)) >= 0) {
-                const line = previous.slice(0, terminatorIndex).trimEnd();
-                const message = await this.parse(JSON.parse(line));
-                yield message;
-                previous = previous.slice(terminatorIndex + 1);
-            }
-        }
-    }
-
-    async *[Symbol.asyncIterator](): AsyncIterator<T, void, unknown> {
-        for await (const message of this.iterMessages()) {
-            yield message;
-        }
-    }
-}
diff --git a/src/core/streaming-fetcher/StreamingFetcher.ts b/src/core/streaming-fetcher/StreamingFetcher.ts
deleted file mode 100644
index d08f9fc..0000000
--- a/src/core/streaming-fetcher/StreamingFetcher.ts
+++ /dev/null
@@ -1,69 +0,0 @@
-import axios, { AxiosAdapter } from "axios";
-import qs from "qs";
-import { Readable } from "stream";
-
-export type StreamingFetchFunction = (args: StreamingFetcher.Args) => Promise<StreamingFetcher.Response>;
-
-export declare namespace StreamingFetcher {
-    export interface Args {
-        url: string;
-        method: string;
-        headers?: Record<string, string | undefined>;
-        queryParameters?: Record<string, string | string[]>;
-        body?: unknown;
-        timeoutMs?: number;
-        withCredentials?: boolean;
-        adapter?: AxiosAdapter;
-        onUploadProgress?: (event: ProgressEvent) => void;
-        onDownloadProgress?: (event: ProgressEvent) => void;
-
-        abortController?: AbortController;
-    }
-
-    export interface Response {
-        data: Readable;
-        headers: Record<string, any>;
-    }
-}
-
-export const streamingFetcher: StreamingFetchFunction = async (args) => {
-    const headers: Record<string, string> = {};
-    if (args.body !== undefined) {
-        headers["Content-Type"] = "application/json";
-    }
-    if (args.headers != null) {
-        for (const [key, value] of Object.entries(args.headers)) {
-            if (value != null) {
-                headers[key] = value;
-            }
-        }
-    }
-
-    const response = await axios({
-        url: args.url,
-        params: args.queryParameters,
-        paramsSerializer: (params) => {
-            return qs.stringify(params, { arrayFormat: "repeat" });
-        },
-        method: args.method,
-        headers,
-        data: args.body,
-        timeout: args.timeoutMs,
-        transitional: {
-            clarifyTimeoutError: true,
-        },
-        withCredentials: args.withCredentials,
-        maxBodyLength: Infinity,
-        maxContentLength: Infinity,
-        onUploadProgress: args.onUploadProgress,
-        onDownloadProgress: args.onDownloadProgress,
-        signal: args.abortController?.signal,
-        responseType: "stream",
-        adapter: args.adapter,
-    });
-
-    return {
-        data: response.data,
-        headers: response.headers,
-    };
-};
diff --git a/src/core/streaming-fetcher/getHeader.ts b/src/core/streaming-fetcher/getHeader.ts
deleted file mode 100644
index e59189c..0000000
--- a/src/core/streaming-fetcher/getHeader.ts
+++ /dev/null
@@ -1,10 +0,0 @@
-import { StreamingFetcher } from "./StreamingFetcher";
-
-export function getHeader(response: StreamingFetcher.Response, header: string): string | undefined {
-    for (const [headerKey, headerValue] of Object.entries(response.headers)) {
-        if (headerKey.toLowerCase() === header.toLowerCase()) {
-            return headerValue;
-        }
-    }
-    return undefined;
-}
diff --git a/src/core/streaming-fetcher/index.ts b/src/core/streaming-fetcher/index.ts
deleted file mode 100644
index b4188da..0000000
--- a/src/core/streaming-fetcher/index.ts
+++ /dev/null
@@ -1,4 +0,0 @@
-export { getHeader } from "./getHeader";
-export { Stream } from "./Stream";
-export { streamingFetcher } from "./StreamingFetcher";
-export type { StreamingFetcher, StreamingFetchFunction } from "./StreamingFetcher";
diff --git a/src/serialization/resources/commons/types/ActorRoleId.ts b/src/serialization/resources/commons/types/ActorRoleId.ts
new file mode 100644
index 0000000..a39ea56
--- /dev/null
+++ b/src/serialization/resources/commons/types/ActorRoleId.ts
@@ -0,0 +1,14 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+
+export const ActorRoleId: core.serialization.Schema<serializers.ActorRoleId.Raw, Flatfile.ActorRoleId> =
+    core.serialization.string();
+
+export declare namespace ActorRoleId {
+    type Raw = string;
+}
diff --git a/src/serialization/resources/commons/types/index.ts b/src/serialization/resources/commons/types/index.ts
index 53f1ff7..d92ca92 100644
--- a/src/serialization/resources/commons/types/index.ts
+++ b/src/serialization/resources/commons/types/index.ts
@@ -16,2 +16,3 @@ export * from "./JobId";
 export * from "./UserId";
+export * from "./ActorRoleId";
 export * from "./RoleId";
diff --git a/src/serialization/resources/entitlements/types/Entitlement.ts b/src/serialization/resources/entitlements/types/Entitlement.ts
index 40ff26d..8c819bd 100644
--- a/src/serialization/resources/entitlements/types/Entitlement.ts
+++ b/src/serialization/resources/entitlements/types/Entitlement.ts
@@ -11,7 +11,3 @@ export const Entitlement: core.serialization.ObjectSchema<serializers.Entitlemen
         key: core.serialization.string(),
-        description: core.serialization.string(),
-        influencesPrivileges: core.serialization.list(core.serialization.string()),
         metadata: core.serialization.any(),
-        createdAt: core.serialization.date(),
-        updatedAt: core.serialization.date(),
     });
@@ -21,7 +17,3 @@ export declare namespace Entitlement {
         key: string;
-        description: string;
-        influencesPrivileges: string[];
         metadata?: any;
-        createdAt: string;
-        updatedAt: string;
     }
diff --git a/src/serialization/resources/index.ts b/src/serialization/resources/index.ts
index f8f4d23..06437e8 100644
--- a/src/serialization/resources/index.ts
+++ b/src/serialization/resources/index.ts
@@ -52,3 +52,2 @@ export * from "./files/client/requests";
 export * from "./records/client/requests";
-export * from "./roles/client/requests";
 export * from "./snapshots/client/requests";
diff --git a/src/serialization/resources/jobs/types/JobOutcome.ts b/src/serialization/resources/jobs/types/JobOutcome.ts
index ed92384..fc3fd24 100644
--- a/src/serialization/resources/jobs/types/JobOutcome.ts
+++ b/src/serialization/resources/jobs/types/JobOutcome.ts
@@ -15,2 +15,3 @@ export const JobOutcome: core.serialization.ObjectSchema<serializers.JobOutcome.
         message: core.serialization.string().optional(),
+        hideDefaultButton: core.serialization.boolean().optional(),
     });
@@ -24,2 +25,3 @@ export declare namespace JobOutcome {
         message?: string | null;
+        hideDefaultButton?: boolean | null;
     }
diff --git a/src/serialization/resources/jobs/types/JobUpdate.ts b/src/serialization/resources/jobs/types/JobUpdate.ts
index da71b45..f4d6a2a 100644
--- a/src/serialization/resources/jobs/types/JobUpdate.ts
+++ b/src/serialization/resources/jobs/types/JobUpdate.ts
@@ -14,2 +14,3 @@ export const JobUpdate: core.serialization.ObjectSchema<serializers.JobUpdate.Ra
         outcomeAcknowledgedAt: core.serialization.date().optional(),
+        info: core.serialization.string().optional(),
     });
@@ -22,2 +23,3 @@ export declare namespace JobUpdate {
         outcomeAcknowledgedAt?: string | null;
+        info?: string | null;
     }
diff --git a/src/serialization/resources/mapping/types/MappingRule.ts b/src/serialization/resources/mapping/types/MappingRule.ts
index 604aaed..105b773 100644
--- a/src/serialization/resources/mapping/types/MappingRule.ts
+++ b/src/serialization/resources/mapping/types/MappingRule.ts
@@ -12,2 +12,3 @@ export const MappingRule: core.serialization.ObjectSchema<serializers.MappingRul
             id: core.serialization.lazy(async () => (await import("../../..")).MappingId),
+            confidence: core.serialization.number().optional(),
             createdBy: core.serialization.lazy(async () => (await import("../../..")).UserId).optional(),
@@ -22,2 +23,3 @@ export declare namespace MappingRule {
         id: serializers.MappingId.Raw;
+        confidence?: number | null;
         createdBy?: serializers.UserId.Raw | null;
diff --git a/src/serialization/resources/mapping/types/MappingRuleConfig.ts b/src/serialization/resources/mapping/types/MappingRuleConfig.ts
index 278bb13..a7bf3b8 100644
--- a/src/serialization/resources/mapping/types/MappingRuleConfig.ts
+++ b/src/serialization/resources/mapping/types/MappingRuleConfig.ts
@@ -15,4 +15,4 @@ export const MappingRuleConfig: core.serialization.ObjectSchema<
     config: core.serialization.any().optional(),
-    confidence: core.serialization.number().optional(),
-    contributor: core.serialization.lazy(async () => (await import("../../..")).UserId).optional(),
+    acceptedAt: core.serialization.date().optional(),
+    acceptedBy: core.serialization.lazy(async () => (await import("../../..")).UserId).optional(),
 });
@@ -24,4 +24,4 @@ export declare namespace MappingRuleConfig {
         config?: any | null;
-        confidence?: number | null;
-        contributor?: serializers.UserId.Raw | null;
+        acceptedAt?: string | null;
+        acceptedBy?: serializers.UserId.Raw | null;
     }
diff --git a/src/serialization/resources/mapping/types/MappingRuleOrConfig.ts b/src/serialization/resources/mapping/types/MappingRuleOrConfig.ts
index 7750029..2a9f566 100644
--- a/src/serialization/resources/mapping/types/MappingRuleOrConfig.ts
+++ b/src/serialization/resources/mapping/types/MappingRuleOrConfig.ts
@@ -14,2 +14,3 @@ export const MappingRuleOrConfig: core.serialization.ObjectSchema<
         id: core.serialization.lazy(async () => (await import("../../..")).MappingId).optional(),
+        confidence: core.serialization.number().optional(),
         createdBy: core.serialization.lazy(async () => (await import("../../..")).UserId).optional(),
@@ -24,2 +25,3 @@ export declare namespace MappingRuleOrConfig {
         id?: serializers.MappingId.Raw | null;
+        confidence?: number | null;
         createdBy?: serializers.UserId.Raw | null;
diff --git a/src/serialization/resources/mapping/types/UpdateMappingRulesRequest.ts b/src/serialization/resources/mapping/types/UpdateMappingRulesRequest.ts
new file mode 100644
index 0000000..1096d42
--- /dev/null
+++ b/src/serialization/resources/mapping/types/UpdateMappingRulesRequest.ts
@@ -0,0 +1,16 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+
+export const UpdateMappingRulesRequest: core.serialization.Schema<
+    serializers.UpdateMappingRulesRequest.Raw,
+    Flatfile.UpdateMappingRulesRequest
+> = core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).MappingRule));
+
+export declare namespace UpdateMappingRulesRequest {
+    type Raw = serializers.MappingRule.Raw[];
+}
diff --git a/src/serialization/resources/mapping/types/index.ts b/src/serialization/resources/mapping/types/index.ts
index e680b72..14ef3a7 100644
--- a/src/serialization/resources/mapping/types/index.ts
+++ b/src/serialization/resources/mapping/types/index.ts
@@ -9,2 +9,3 @@ export * from "./MappingRuleOrConfig";
 export * from "./CreateMappingRulesRequest";
+export * from "./UpdateMappingRulesRequest";
 export * from "./MappingRuleResponse";
diff --git a/src/serialization/resources/records/types/FieldRecordCounts.ts b/src/serialization/resources/records/types/FieldRecordCounts.ts
new file mode 100644
index 0000000..d58ed71
--- /dev/null
+++ b/src/serialization/resources/records/types/FieldRecordCounts.ts
@@ -0,0 +1,26 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+
+export const FieldRecordCounts: core.serialization.ObjectSchema<
+    serializers.FieldRecordCounts.Raw,
+    Flatfile.FieldRecordCounts
+> = core.serialization.object({
+    total: core.serialization.number(),
+    valid: core.serialization.number(),
+    error: core.serialization.number(),
+    empty: core.serialization.number(),
+});
+
+export declare namespace FieldRecordCounts {
+    interface Raw {
+        total: number;
+        valid: number;
+        error: number;
+        empty: number;
+    }
+}
diff --git a/src/serialization/resources/records/types/RecordCounts.ts b/src/serialization/resources/records/types/RecordCounts.ts
index 39f0d43..0ab7c36 100644
--- a/src/serialization/resources/records/types/RecordCounts.ts
+++ b/src/serialization/resources/records/types/RecordCounts.ts
@@ -14,2 +14,8 @@ export const RecordCounts: core.serialization.ObjectSchema<serializers.RecordCou
         errorsByField: core.serialization.record(core.serialization.string(), core.serialization.number()).optional(),
+        byField: core.serialization
+            .record(
+                core.serialization.string(),
+                core.serialization.lazyObject(async () => (await import("../../..")).FieldRecordCounts)
+            )
+            .optional(),
     });
@@ -22,2 +28,3 @@ export declare namespace RecordCounts {
         errorsByField?: Record<string, number> | null;
+        byField?: Record<string, serializers.FieldRecordCounts.Raw> | null;
     }
diff --git a/src/serialization/resources/records/types/index.ts b/src/serialization/resources/records/types/index.ts
index 937d372..4b1f724 100644
--- a/src/serialization/resources/records/types/index.ts
+++ b/src/serialization/resources/records/types/index.ts
@@ -4,2 +4,3 @@ export * from "./GetRecordsResponse";
 export * from "./GetRecordsResponseData";
+export * from "./FieldRecordCounts";
 export * from "./RecordCounts";
diff --git a/src/serialization/resources/roles/client/index.ts b/src/serialization/resources/roles/client/index.ts
deleted file mode 100644
index 415726b..0000000
--- a/src/serialization/resources/roles/client/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export * from "./requests";
diff --git a/src/serialization/resources/roles/client/requests/AssignRoleRequest.ts b/src/serialization/resources/roles/client/requests/AssignRoleRequest.ts
deleted file mode 100644
index bf3de45..0000000
--- a/src/serialization/resources/roles/client/requests/AssignRoleRequest.ts
+++ /dev/null
@@ -1,22 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as serializers from "../../../..";
-import * as Flatfile from "../../../../../api";
-import * as core from "../../../../../core";
-
-export const AssignRoleRequest: core.serialization.Schema<
-    serializers.AssignRoleRequest.Raw,
-    Flatfile.AssignRoleRequest
-> = core.serialization.object({
-    actorId: core.serialization.lazy(async () => (await import("../../../..")).ActorIdUnion),
-    resourceId: core.serialization.lazy(async () => (await import("../../../..")).ResourceIdUnion),
-});
-
-export declare namespace AssignRoleRequest {
-    interface Raw {
-        actorId: serializers.ActorIdUnion.Raw;
-        resourceId: serializers.ResourceIdUnion.Raw;
-    }
-}
diff --git a/src/serialization/resources/roles/client/requests/index.ts b/src/serialization/resources/roles/client/requests/index.ts
deleted file mode 100644
index 3da530d..0000000
--- a/src/serialization/resources/roles/client/requests/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export { AssignRoleRequest } from "./AssignRoleRequest";
diff --git a/src/serialization/resources/roles/index.ts b/src/serialization/resources/roles/index.ts
index c9240f8..eea524d 100644
--- a/src/serialization/resources/roles/index.ts
+++ b/src/serialization/resources/roles/index.ts
@@ -1,2 +1 @@
 export * from "./types";
-export * from "./client";
diff --git a/src/serialization/resources/roles/types/ActorRoleResponse.ts b/src/serialization/resources/roles/types/ActorRoleResponse.ts
new file mode 100644
index 0000000..0027449
--- /dev/null
+++ b/src/serialization/resources/roles/types/ActorRoleResponse.ts
@@ -0,0 +1,30 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+
+export const ActorRoleResponse: core.serialization.ObjectSchema<
+    serializers.ActorRoleResponse.Raw,
+    Flatfile.ActorRoleResponse
+> = core.serialization.object({
+    id: core.serialization.lazy(async () => (await import("../../..")).ActorRoleId),
+    roleId: core.serialization.lazy(async () => (await import("../../..")).RoleId),
+    actorId: core.serialization.lazy(async () => (await import("../../..")).ActorIdUnion),
+    resourceId: core.serialization.lazy(async () => (await import("../../..")).ResourceIdUnion),
+    createdAt: core.serialization.date(),
+    updatedAt: core.serialization.date(),
+});
+
+export declare namespace ActorRoleResponse {
+    interface Raw {
+        id: serializers.ActorRoleId.Raw;
+        roleId: serializers.RoleId.Raw;
+        actorId: serializers.ActorIdUnion.Raw;
+        resourceId: serializers.ResourceIdUnion.Raw;
+        createdAt: string;
+        updatedAt: string;
+    }
+}
diff --git a/src/serialization/resources/roles/types/AssignActorRoleRequest.ts b/src/serialization/resources/roles/types/AssignActorRoleRequest.ts
new file mode 100644
index 0000000..fad27ea
--- /dev/null
+++ b/src/serialization/resources/roles/types/AssignActorRoleRequest.ts
@@ -0,0 +1,22 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+
+export const AssignActorRoleRequest: core.serialization.ObjectSchema<
+    serializers.AssignActorRoleRequest.Raw,
+    Flatfile.AssignActorRoleRequest
+> = core.serialization.object({
+    roleId: core.serialization.lazy(async () => (await import("../../..")).RoleId),
+    resourceId: core.serialization.lazy(async () => (await import("../../..")).ResourceIdUnion),
+});
+
+export declare namespace AssignActorRoleRequest {
+    interface Raw {
+        roleId: serializers.RoleId.Raw;
+        resourceId: serializers.ResourceIdUnion.Raw;
+    }
+}
diff --git a/src/serialization/resources/roles/types/AssignRoleResponseData.ts b/src/serialization/resources/roles/types/AssignRoleResponseData.ts
index c2f6ae9..6cd2a5a 100644
--- a/src/serialization/resources/roles/types/AssignRoleResponseData.ts
+++ b/src/serialization/resources/roles/types/AssignRoleResponseData.ts
@@ -11,12 +11,14 @@ export const AssignRoleResponseData: core.serialization.ObjectSchema<
     Flatfile.AssignRoleResponseData
-> = core.serialization
-    .object({
-        roleId: core.serialization.lazy(async () => (await import("../../..")).RoleId),
-        actorId: core.serialization.lazy(async () => (await import("../../..")).ActorIdUnion),
-        resourceId: core.serialization.lazy(async () => (await import("../../..")).ResourceIdUnion),
-    })
-    .extend(core.serialization.lazyObject(async () => (await import("../../..")).SuccessData));
+> = core.serialization.object({
+    id: core.serialization.lazy(async () => (await import("../../..")).ActorRoleId),
+    roleId: core.serialization.lazy(async () => (await import("../../..")).RoleId),
+    actorId: core.serialization.lazy(async () => (await import("../../..")).ActorIdUnion),
+    resourceId: core.serialization.lazy(async () => (await import("../../..")).ResourceIdUnion),
+    createdAt: core.serialization.date(),
+    updatedAt: core.serialization.date(),
+});
 
 export declare namespace AssignRoleResponseData {
-    interface Raw extends serializers.SuccessData.Raw {
+    interface Raw {
+        id: serializers.ActorRoleId.Raw;
         roleId: serializers.RoleId.Raw;
@@ -24,2 +26,4 @@ export declare namespace AssignRoleResponseData {
         resourceId: serializers.ResourceIdUnion.Raw;
+        createdAt: string;
+        updatedAt: string;
     }
diff --git a/src/serialization/resources/roles/types/ListActorRolesResponse.ts b/src/serialization/resources/roles/types/ListActorRolesResponse.ts
new file mode 100644
index 0000000..21b0571
--- /dev/null
+++ b/src/serialization/resources/roles/types/ListActorRolesResponse.ts
@@ -0,0 +1,22 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+
+export const ListActorRolesResponse: core.serialization.ObjectSchema<
+    serializers.ListActorRolesResponse.Raw,
+    Flatfile.ListActorRolesResponse
+> = core.serialization.object({
+    data: core.serialization.list(
+        core.serialization.lazyObject(async () => (await import("../../..")).ActorRoleResponse)
+    ),
+});
+
+export declare namespace ListActorRolesResponse {
+    interface Raw {
+        data: serializers.ActorRoleResponse.Raw[];
+    }
+}
diff --git a/src/serialization/resources/roles/types/ListRolesResponse.ts b/src/serialization/resources/roles/types/ListRolesResponse.ts
new file mode 100644
index 0000000..988fc50
--- /dev/null
+++ b/src/serialization/resources/roles/types/ListRolesResponse.ts
@@ -0,0 +1,20 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+
+export const ListRolesResponse: core.serialization.ObjectSchema<
+    serializers.ListRolesResponse.Raw,
+    Flatfile.ListRolesResponse
+> = core.serialization.object({
+    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).RoleResponse)),
+});
+
+export declare namespace ListRolesResponse {
+    interface Raw {
+        data: serializers.RoleResponse.Raw[];
+    }
+}
diff --git a/src/serialization/resources/roles/types/RoleResponse.ts b/src/serialization/resources/roles/types/RoleResponse.ts
new file mode 100644
index 0000000..a96138a
--- /dev/null
+++ b/src/serialization/resources/roles/types/RoleResponse.ts
@@ -0,0 +1,26 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+
+export const RoleResponse: core.serialization.ObjectSchema<serializers.RoleResponse.Raw, Flatfile.RoleResponse> =
+    core.serialization.object({
+        id: core.serialization.lazy(async () => (await import("../../..")).RoleId),
+        name: core.serialization.string(),
+        accountId: core.serialization.lazy(async () => (await import("../../..")).AccountId),
+        createdAt: core.serialization.date(),
+        updatedAt: core.serialization.date(),
+    });
+
+export declare namespace RoleResponse {
+    interface Raw {
+        id: serializers.RoleId.Raw;
+        name: string;
+        accountId: serializers.AccountId.Raw;
+        createdAt: string;
+        updatedAt: string;
+    }
+}
diff --git a/src/serialization/resources/roles/types/index.ts b/src/serialization/resources/roles/types/index.ts
index a863095..3f3be0a 100644
--- a/src/serialization/resources/roles/types/index.ts
+++ b/src/serialization/resources/roles/types/index.ts
@@ -1 +1,6 @@
+export * from "./ListRolesResponse";
+export * from "./RoleResponse";
+export * from "./ListActorRolesResponse";
+export * from "./ActorRoleResponse";
+export * from "./AssignActorRoleRequest";
 export * from "./ActorIdUnion";

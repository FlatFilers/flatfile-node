diff --git a/package.json b/package.json
index bb078ed..a6375fd 100644
--- a/package.json
+++ b/package.json
@@ -2,3 +2,3 @@
     "name": "@flatfile/api",
-    "version": "1.7.8",
+    "version": "1.8.0",
     "private": false,
diff --git a/src/Client.ts b/src/Client.ts
index 815eab8..cb04dd8 100644
--- a/src/Client.ts
+++ b/src/Client.ts
@@ -6,4 +6,6 @@ import * as environments from "./environments";
 import * as core from "./core";
+import { Accounts } from "./api/resources/accounts/client/Client";
 import { Agents } from "./api/resources/agents/client/Client";
 import { Apps } from "./api/resources/apps/client/Client";
+import { Assistant } from "./api/resources/assistant/client/Client";
 import { Auth } from "./api/resources/auth/client/Client";
@@ -17,2 +19,3 @@ import { Events } from "./api/resources/events/client/Client";
 import { Files } from "./api/resources/files/client/Client";
+import { Foreigndb } from "./api/resources/foreigndb/client/Client";
 import { Guests } from "./api/resources/guests/client/Client";
@@ -46,2 +49,8 @@ export class FlatfileClient {
 
+    protected _accounts: Accounts | undefined;
+
+    public get accounts(): Accounts {
+        return (this._accounts ??= new Accounts(this._options));
+    }
+
     protected _agents: Agents | undefined;
@@ -58,2 +67,8 @@ export class FlatfileClient {
 
+    protected _assistant: Assistant | undefined;
+
+    public get assistant(): Assistant {
+        return (this._assistant ??= new Assistant(this._options));
+    }
+
     protected _auth: Auth | undefined;
@@ -112,2 +127,8 @@ export class FlatfileClient {
 
+    protected _foreigndb: Foreigndb | undefined;
+
+    public get foreigndb(): Foreigndb {
+        return (this._foreigndb ??= new Foreigndb(this._options));
+    }
+
     protected _guests: Guests | undefined;
diff --git a/src/api/resources/accounts/client/Client.ts b/src/api/resources/accounts/client/Client.ts
new file mode 100644
index 0000000..f77e047
--- /dev/null
+++ b/src/api/resources/accounts/client/Client.ts
@@ -0,0 +1,158 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as environments from "../../../../environments";
+import * as core from "../../../../core";
+import * as Flatfile from "../../..";
+import urlJoin from "url-join";
+import * as serializers from "../../../../serialization";
+import * as errors from "../../../../errors";
+
+export declare namespace Accounts {
+    interface Options {
+        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
+        token?: core.Supplier<core.BearerToken | undefined>;
+        fetcher?: core.FetchFunction;
+    }
+
+    interface RequestOptions {
+        timeoutInSeconds?: number;
+        maxRetries?: number;
+    }
+}
+
+export class Accounts {
+    constructor(protected readonly _options: Accounts.Options = {}) {}
+
+    /**
+     * Get the current account
+     *
+     * @example
+     *     await flatfile.accounts.getCurrent()
+     */
+    public async getCurrent(requestOptions?: Accounts.RequestOptions): Promise<Flatfile.AccountResponse> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                "/accounts/current"
+            ),
+            method: "GET",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.AccountResponse.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            throw new errors.FlatfileError({
+                statusCode: _response.error.statusCode,
+                body: _response.error.body,
+            });
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    /**
+     * Update the current account
+     *
+     * @example
+     *     await flatfile.accounts.updateCurrent({
+     *         defaultAppId: "us_app_YOUR_ID"
+     *     })
+     */
+    public async updateCurrent(
+        request: Flatfile.AccountPatch,
+        requestOptions?: Accounts.RequestOptions
+    ): Promise<Flatfile.AccountResponse> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                "/accounts/current"
+            ),
+            method: "PATCH",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            body: await serializers.AccountPatch.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.AccountResponse.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            throw new errors.FlatfileError({
+                statusCode: _response.error.statusCode,
+                body: _response.error.body,
+            });
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    protected async _getAuthorizationHeader() {
+        const bearer = await core.Supplier.get(this._options.token);
+        if (bearer != null) {
+            return `Bearer ${bearer}`;
+        }
+
+        return undefined;
+    }
+}
diff --git a/src/api/resources/accounts/client/index.ts b/src/api/resources/accounts/client/index.ts
new file mode 100644
index 0000000..cb0ff5c
--- /dev/null
+++ b/src/api/resources/accounts/client/index.ts
@@ -0,0 +1 @@
+export {};
diff --git a/src/api/resources/accounts/index.ts b/src/api/resources/accounts/index.ts
new file mode 100644
index 0000000..c9240f8
--- /dev/null
+++ b/src/api/resources/accounts/index.ts
@@ -0,0 +1,2 @@
+export * from "./types";
+export * from "./client";
diff --git a/src/api/resources/accounts/types/Account.ts b/src/api/resources/accounts/types/Account.ts
new file mode 100644
index 0000000..ff6697c
--- /dev/null
+++ b/src/api/resources/accounts/types/Account.ts
@@ -0,0 +1,33 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+/**
+ * An account
+ *
+ * @example
+ *     {
+ *         id: "us_acc_YOUR_ID",
+ *         name: "MyAccountName",
+ *         metadata: {},
+ *         createdAt: new Date("2023-10-30T16:59:45.735Z"),
+ *         updatedAt: new Date("2023-10-30T16:59:45.735Z")
+ *     }
+ */
+export interface Account {
+    id: Flatfile.AccountId;
+    name: string;
+    subdomain?: string;
+    vanityDomainDashboard?: string;
+    vanityDomainSpaces?: string;
+    embeddedDomainWhitelist?: string[];
+    customFromEmail?: string;
+    stripeCustomerId?: string;
+    metadata: Record<string, any>;
+    createdAt: Date;
+    updatedAt: Date;
+    defaultAppId?: Flatfile.AppId;
+    dashboard?: number;
+}
diff --git a/src/api/resources/accounts/types/AccountPatch.ts b/src/api/resources/accounts/types/AccountPatch.ts
new file mode 100644
index 0000000..870403b
--- /dev/null
+++ b/src/api/resources/accounts/types/AccountPatch.ts
@@ -0,0 +1,17 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+/**
+ * Properties used to update an account
+ *
+ * @example
+ *     {
+ *         defaultAppId: "us_app_YOUR_ID"
+ *     }
+ */
+export interface AccountPatch {
+    defaultAppId: Flatfile.AppId;
+}
diff --git a/src/api/resources/accounts/types/AccountResponse.ts b/src/api/resources/accounts/types/AccountResponse.ts
new file mode 100644
index 0000000..c8afe37
--- /dev/null
+++ b/src/api/resources/accounts/types/AccountResponse.ts
@@ -0,0 +1,21 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+/**
+ * @example
+ *     {
+ *         data: {
+ *             id: "us_acc_YOUR_ID",
+ *             name: "MyAccountName",
+ *             metadata: {},
+ *             createdAt: new Date("2023-10-30T16:59:45.735Z"),
+ *             updatedAt: new Date("2023-10-30T16:59:45.735Z")
+ *         }
+ *     }
+ */
+export interface AccountResponse {
+    data: Flatfile.Account;
+}
diff --git a/src/api/resources/accounts/types/index.ts b/src/api/resources/accounts/types/index.ts
new file mode 100644
index 0000000..0f9ca2c
--- /dev/null
+++ b/src/api/resources/accounts/types/index.ts
@@ -0,0 +1,3 @@
+export * from "./AccountResponse";
+export * from "./Account";
+export * from "./AccountPatch";
diff --git a/src/api/resources/agents/client/Client.ts b/src/api/resources/agents/client/Client.ts
index 2519531..d5e53d0 100644
--- a/src/api/resources/agents/client/Client.ts
+++ b/src/api/resources/agents/client/Client.ts
@@ -45,3 +45,3 @@ export class Agents {
@@ -127,3 +127,3 @@ export class Agents {
@@ -210,3 +210,3 @@ export class Agents {
@@ -295,3 +295,3 @@ export class Agents {
@@ -390,3 +390,3 @@ export class Agents {
@@ -488,3 +488,3 @@ export class Agents {
@@ -589,3 +589,3 @@ export class Agents {
@@ -681,3 +681,3 @@ export class Agents {
@@ -792,3 +792,3 @@ export class Agents {
@@ -903,3 +903,3 @@ export class Agents {
@@ -996,3 +996,3 @@ export class Agents {
diff --git a/src/api/resources/apps/client/Client.ts b/src/api/resources/apps/client/Client.ts
index 2434bb3..e3d2d96 100644
--- a/src/api/resources/apps/client/Client.ts
+++ b/src/api/resources/apps/client/Client.ts
@@ -42,3 +42,3 @@ export class Apps {
@@ -100,3 +100,3 @@ export class Apps {
@@ -171,3 +171,3 @@ export class Apps {
@@ -243,3 +243,3 @@ export class Apps {
diff --git a/src/api/resources/apps/types/App.ts b/src/api/resources/apps/types/App.ts
index ab52d53..9d3909e 100644
--- a/src/api/resources/apps/types/App.ts
+++ b/src/api/resources/apps/types/App.ts
@@ -21,2 +21,11 @@ import * as Flatfile from "../../..";
  *         },
+ *         environmentFilters: {
+ *             "type": [
+ *                 "PROD",
+ *                 "DEV"
+ *             ],
+ *             "exclude_ids": [
+ *                 "us_env_123456"
+ *             ]
+ *         },
  *         createdAt: new Date("2023-10-30T16:59:45.735Z"),
@@ -34,2 +43,3 @@ export interface App {
     metadata?: any;
+    environmentFilters?: any;
     createdAt: Date;
diff --git a/src/api/resources/apps/types/AppCreate.ts b/src/api/resources/apps/types/AppCreate.ts
index b04a843..3ecbf37 100644
--- a/src/api/resources/apps/types/AppCreate.ts
+++ b/src/api/resources/apps/types/AppCreate.ts
@@ -30,2 +30,3 @@ export interface AppCreate {
     metadata?: any;
+    environmentFilters?: any;
 }
diff --git a/src/api/resources/apps/types/AppPatch.ts b/src/api/resources/apps/types/AppPatch.ts
index 8ee7606..2d9f71f 100644
--- a/src/api/resources/apps/types/AppPatch.ts
+++ b/src/api/resources/apps/types/AppPatch.ts
@@ -26,2 +26,3 @@ export interface AppPatch {
     metadata?: any;
+    environmentFilters?: any;
     activatedAt?: Date;
diff --git a/src/api/resources/apps/types/AppResponse.ts b/src/api/resources/apps/types/AppResponse.ts
index 6ec2900..6618c44 100644
--- a/src/api/resources/apps/types/AppResponse.ts
+++ b/src/api/resources/apps/types/AppResponse.ts
@@ -20,2 +20,11 @@ import * as Flatfile from "../../..";
  *             },
+ *             environmentFilters: {
+ *                 "type": [
+ *                     "PROD",
+ *                     "DEV"
+ *                 ],
+ *                 "exclude_ids": [
+ *                     "us_env_123456"
+ *                 ]
+ *             },
  *             createdAt: new Date("2023-10-30T16:59:45.735Z"),
diff --git a/src/api/resources/apps/types/AppsResponse.ts b/src/api/resources/apps/types/AppsResponse.ts
index 1c6dad9..7f1337e 100644
--- a/src/api/resources/apps/types/AppsResponse.ts
+++ b/src/api/resources/apps/types/AppsResponse.ts
@@ -20,2 +20,11 @@ import * as Flatfile from "../../..";
  *                 },
+ *                 environmentFilters: {
+ *                     "type": [
+ *                         "PROD",
+ *                         "DEV"
+ *                     ],
+ *                     "exclude_ids": [
+ *                         "us_env_123456"
+ *                     ]
+ *                 },
  *                 createdAt: new Date("2023-10-30T16:59:45.735Z"),
diff --git a/src/api/resources/assistant/client/Client.ts b/src/api/resources/assistant/client/Client.ts
new file mode 100644
index 0000000..0bf938d
--- /dev/null
+++ b/src/api/resources/assistant/client/Client.ts
@@ -0,0 +1,359 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as environments from "../../../../environments";
+import * as core from "../../../../core";
+import * as Flatfile from "../../..";
+import urlJoin from "url-join";
+import * as serializers from "../../../../serialization";
+import * as errors from "../../../../errors";
+
+export declare namespace Assistant {
+    interface Options {
+        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
+        token?: core.Supplier<core.BearerToken | undefined>;
+        fetcher?: core.FetchFunction;
+    }
+
+    interface RequestOptions {
+        timeoutInSeconds?: number;
+        maxRetries?: number;
+    }
+}
+
+export class Assistant {
+    constructor(protected readonly _options: Assistant.Options = {}) {}
+
+    /**
+     * Returns prompts created by user
+     *
+     * @example
+     *     await flatfile.assistant.list()
+     */
+    public async list(
+        request: Flatfile.ListPromptsRequest = {},
+        requestOptions?: Assistant.RequestOptions
+    ): Promise<Flatfile.PromptsResponse> {
+        const { pageSize, pageNumber } = request;
+        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        if (pageSize != null) {
+            _queryParams["pageSize"] = pageSize.toString();
+        }
+
+        if (pageNumber != null) {
+            _queryParams["pageNumber"] = pageNumber.toString();
+        }
+
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                "/prompts"
+            ),
+            method: "GET",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            queryParameters: _queryParams,
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.PromptsResponse.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            throw new errors.FlatfileError({
+                statusCode: _response.error.statusCode,
+                body: _response.error.body,
+            });
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    /**
+     * Returns a prompt
+     *
+     * @example
+     *     await flatfile.assistant.get("us_pr_YOUR_ID")
+     */
+    public async get(
+        promptId: Flatfile.PromptId,
+        requestOptions?: Assistant.RequestOptions
+    ): Promise<Flatfile.PromptResponse> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                `/prompts/${await serializers.PromptId.jsonOrThrow(promptId)}`
+            ),
+            method: "GET",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.PromptResponse.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            throw new errors.FlatfileError({
+                statusCode: _response.error.statusCode,
+                body: _response.error.body,
+            });
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    /**
+     * Updates a prompt
+     *
+     * @example
+     *     await flatfile.assistant.update("us_pr_YOUR_ID", {
+     *         prompt: "Combine first name and last name into a new column called Full Name"
+     *     })
+     */
+    public async update(
+        promptId: Flatfile.PromptId,
+        request: Flatfile.PromptPatch,
+        requestOptions?: Assistant.RequestOptions
+    ): Promise<Flatfile.PromptResponse> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                `/prompts/${await serializers.PromptId.jsonOrThrow(promptId)}`
+            ),
+            method: "PATCH",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            body: await serializers.PromptPatch.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.PromptResponse.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            throw new errors.FlatfileError({
+                statusCode: _response.error.statusCode,
+                body: _response.error.body,
+            });
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    /**
+     * Creates a prompt
+     *
+     * @example
+     *     await flatfile.assistant.create({
+     *         prompt: "Combine first name and last name into a new column called Full Name"
+     *     })
+     */
+    public async create(
+        request: Flatfile.PromptCreate,
+        requestOptions?: Assistant.RequestOptions
+    ): Promise<Flatfile.PromptResponse> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                "/prompts"
+            ),
+            method: "POST",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            body: await serializers.PromptCreate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.PromptResponse.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            throw new errors.FlatfileError({
+                statusCode: _response.error.statusCode,
+                body: _response.error.body,
+            });
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    /**
+     * Deletes a prompts
+     *
+     * @example
+     *     await flatfile.assistant.delete("us_pr_YOUR_ID")
+     */
+    public async delete(
+        promptId: Flatfile.PromptId,
+        requestOptions?: Assistant.RequestOptions
+    ): Promise<Flatfile.Success> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                `/prompts/${await serializers.PromptId.jsonOrThrow(promptId)}`
+            ),
+            method: "DELETE",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.Success.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            throw new errors.FlatfileError({
+                statusCode: _response.error.statusCode,
+                body: _response.error.body,
+            });
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    protected async _getAuthorizationHeader() {
+        const bearer = await core.Supplier.get(this._options.token);
+        if (bearer != null) {
+            return `Bearer ${bearer}`;
+        }
+
+        return undefined;
+    }
+}
diff --git a/src/api/resources/assistant/client/index.ts b/src/api/resources/assistant/client/index.ts
new file mode 100644
index 0000000..415726b
--- /dev/null
+++ b/src/api/resources/assistant/client/index.ts
@@ -0,0 +1 @@
+export * from "./requests";
diff --git a/src/api/resources/assistant/client/requests/ListPromptsRequest.ts b/src/api/resources/assistant/client/requests/ListPromptsRequest.ts
new file mode 100644
index 0000000..f93af5d
--- /dev/null
+++ b/src/api/resources/assistant/client/requests/ListPromptsRequest.ts
@@ -0,0 +1,18 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+/**
+ * @example
+ *     {}
+ */
+export interface ListPromptsRequest {
+    /**
+     * Number of prompts to return in a page (default 7)
+     */
+    pageSize?: number;
+    /**
+     * Based on pageSize, which page of prompts to return
+     */
+    pageNumber?: number;
+}
diff --git a/src/api/resources/assistant/client/requests/index.ts b/src/api/resources/assistant/client/requests/index.ts
new file mode 100644
index 0000000..78a6d76
--- /dev/null
+++ b/src/api/resources/assistant/client/requests/index.ts
@@ -0,0 +1 @@
+export { ListPromptsRequest } from "./ListPromptsRequest";
diff --git a/src/api/resources/assistant/index.ts b/src/api/resources/assistant/index.ts
new file mode 100644
index 0000000..c9240f8
--- /dev/null
+++ b/src/api/resources/assistant/index.ts
@@ -0,0 +1,2 @@
+export * from "./types";
+export * from "./client";
diff --git a/src/api/resources/assistant/types/Prompt.ts b/src/api/resources/assistant/types/Prompt.ts
new file mode 100644
index 0000000..a8702cb
--- /dev/null
+++ b/src/api/resources/assistant/types/Prompt.ts
@@ -0,0 +1,28 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+/**
+ * @example
+ *     {
+ *         id: "us_pr_YOUR_ID",
+ *         createdById: "us_usr_YOUR_ID",
+ *         accountId: "us_acc_YOUR_ID",
+ *         prompt: "Combine first name and last name into a new column called Full Name",
+ *         createdAt: new Date("2021-01-01T00:00:00.000Z"),
+ *         updatedAt: new Date("2021-01-01T00:00:00.000Z")
+ *     }
+ */
+export interface Prompt {
+    id: Flatfile.PromptId;
+    /** ID of the user/guest who created the prompt */
+    createdById: string;
+    accountId: Flatfile.AccountId;
+    /** Text for prompts for AI Assist */
+    prompt: string;
+    createdAt: Date;
+    updatedAt: Date;
+    deletedAt?: Date;
+}
diff --git a/src/api/resources/assistant/types/PromptCreate.ts b/src/api/resources/assistant/types/PromptCreate.ts
new file mode 100644
index 0000000..e9d20e6
--- /dev/null
+++ b/src/api/resources/assistant/types/PromptCreate.ts
@@ -0,0 +1,15 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+/**
+ * Create a prompts
+ *
+ * @example
+ *     {
+ *         prompt: "Combine first name and last name into a new column called Full Name"
+ *     }
+ */
+export interface PromptCreate {
+    prompt: string;
+}
diff --git a/src/api/resources/assistant/types/PromptPatch.ts b/src/api/resources/assistant/types/PromptPatch.ts
new file mode 100644
index 0000000..d1718fc
--- /dev/null
+++ b/src/api/resources/assistant/types/PromptPatch.ts
@@ -0,0 +1,15 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+/**
+ * Update a prompts
+ *
+ * @example
+ *     {
+ *         prompt: "Combine first name and last name into a new column called Full Name"
+ *     }
+ */
+export interface PromptPatch {
+    prompt?: string;
+}
diff --git a/src/api/resources/assistant/types/PromptResponse.ts b/src/api/resources/assistant/types/PromptResponse.ts
new file mode 100644
index 0000000..c6bdca6
--- /dev/null
+++ b/src/api/resources/assistant/types/PromptResponse.ts
@@ -0,0 +1,22 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+/**
+ * @example
+ *     {
+ *         data: {
+ *             id: "us_pr_YOUR_ID",
+ *             createdById: "us_usr_YOUR_ID",
+ *             accountId: "us_acc_YOUR_ID",
+ *             prompt: "Combine first name and last name into a new column called Full Name",
+ *             createdAt: new Date("2021-01-01T00:00:00.000Z"),
+ *             updatedAt: new Date("2021-01-01T00:00:00.000Z")
+ *         }
+ *     }
+ */
+export interface PromptResponse {
+    data: Flatfile.Prompt;
+}
diff --git a/src/api/resources/assistant/types/PromptsResponse.ts b/src/api/resources/assistant/types/PromptsResponse.ts
new file mode 100644
index 0000000..3b59dd1
--- /dev/null
+++ b/src/api/resources/assistant/types/PromptsResponse.ts
@@ -0,0 +1,28 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+/**
+ * @example
+ *     {
+ *         data: [{
+ *                 id: "us_pr_YOUR_ID",
+ *                 createdById: "us_usr_YOUR_ID",
+ *                 accountId: "us_acc_YOUR_ID",
+ *                 prompt: "Combine first name and last name into a new column called Full Name",
+ *                 createdAt: new Date("2021-01-01T00:00:00.000Z"),
+ *                 updatedAt: new Date("2021-01-01T00:00:00.000Z")
+ *             }],
+ *         pagination: {
+ *             currentPage: 3,
+ *             pageCount: 50,
+ *             totalCount: 100
+ *         }
+ *     }
+ */
+export interface PromptsResponse {
+    pagination?: Flatfile.Pagination;
+    data: Flatfile.Prompt[];
+}
diff --git a/src/api/resources/assistant/types/index.ts b/src/api/resources/assistant/types/index.ts
new file mode 100644
index 0000000..d296f59
--- /dev/null
+++ b/src/api/resources/assistant/types/index.ts
@@ -0,0 +1,5 @@
+export * from "./PromptsResponse";
+export * from "./PromptResponse";
+export * from "./PromptPatch";
+export * from "./PromptCreate";
+export * from "./Prompt";
diff --git a/src/api/resources/auth/client/Client.ts b/src/api/resources/auth/client/Client.ts
index b6c18ec..de2aada 100644
--- a/src/api/resources/auth/client/Client.ts
+++ b/src/api/resources/auth/client/Client.ts
@@ -54,3 +54,3 @@ export class Auth {
@@ -145,3 +145,3 @@ export class Auth {
@@ -238,3 +238,3 @@ export class Auth {
@@ -331,3 +331,3 @@ export class Auth {
diff --git a/src/api/resources/cells/client/Client.ts b/src/api/resources/cells/client/Client.ts
index 234cc63..90dc62f 100644
--- a/src/api/resources/cells/client/Client.ts
+++ b/src/api/resources/cells/client/Client.ts
@@ -107,3 +107,3 @@ export class Cells {
diff --git a/src/api/resources/commits/client/Client.ts b/src/api/resources/commits/client/Client.ts
index 6031055..b3b194d 100644
--- a/src/api/resources/commits/client/Client.ts
+++ b/src/api/resources/commits/client/Client.ts
@@ -50,3 +50,3 @@ export class Commits {
@@ -133,3 +133,3 @@ export class Commits {
@@ -216,3 +216,3 @@ export class Commits {
diff --git a/src/api/resources/commons/types/PromptId.ts b/src/api/resources/commons/types/PromptId.ts
new file mode 100644
index 0000000..03a6eb6
--- /dev/null
+++ b/src/api/resources/commons/types/PromptId.ts
@@ -0,0 +1,11 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+/**
+ * Prompt ID
+ *
+ * @example
+ *     "us_pr_YOUR_ID"
+ */
+export type PromptId = string;
diff --git a/src/api/resources/commons/types/index.ts b/src/api/resources/commons/types/index.ts
index d92ca92..baa887d 100644
--- a/src/api/resources/commons/types/index.ts
+++ b/src/api/resources/commons/types/index.ts
@@ -24,2 +24,3 @@ export * from "./ProgramId";
 export * from "./FamilyId";
+export * from "./PromptId";
 export * from "./DataRetentionPolicyId";
diff --git a/src/api/resources/dataRetentionPolicies/client/Client.ts b/src/api/resources/dataRetentionPolicies/client/Client.ts
index 19ed0d9..3f022b2 100644
--- a/src/api/resources/dataRetentionPolicies/client/Client.ts
+++ b/src/api/resources/dataRetentionPolicies/client/Client.ts
@@ -58,3 +58,3 @@ export class DataRetentionPolicies {
@@ -149,3 +149,3 @@ export class DataRetentionPolicies {
@@ -236,3 +236,3 @@ export class DataRetentionPolicies {
@@ -327,3 +327,3 @@ export class DataRetentionPolicies {
@@ -411,3 +411,3 @@ export class DataRetentionPolicies {
diff --git a/src/api/resources/documents/client/Client.ts b/src/api/resources/documents/client/Client.ts
index 49f5960..219b2f0 100644
--- a/src/api/resources/documents/client/Client.ts
+++ b/src/api/resources/documents/client/Client.ts
@@ -50,3 +50,3 @@ export class Documents {
@@ -147,3 +147,3 @@ export class Documents {
@@ -237,3 +237,3 @@ export class Documents {
@@ -330,3 +330,3 @@ export class Documents {
@@ -417,3 +417,3 @@ export class Documents {
diff --git a/src/api/resources/entitlements/client/Client.ts b/src/api/resources/entitlements/client/Client.ts
index 9df323b..5f7a3b3 100644
--- a/src/api/resources/entitlements/client/Client.ts
+++ b/src/api/resources/entitlements/client/Client.ts
@@ -55,3 +55,3 @@ export class Entitlements {
diff --git a/src/api/resources/environments/client/Client.ts b/src/api/resources/environments/client/Client.ts
index e9dbda0..8efeb09 100644
--- a/src/api/resources/environments/client/Client.ts
+++ b/src/api/resources/environments/client/Client.ts
@@ -31,3 +31,3 @@ export class Environments {
      * @example
-     *     await flatfile.environments.list({})
+     *     await flatfile.environments.list()
      */
@@ -58,3 +58,3 @@ export class Environments {
@@ -128,3 +128,3 @@ export class Environments {
@@ -197,3 +197,3 @@ export class Environments {
@@ -284,3 +284,3 @@ export class Environments {
@@ -377,3 +377,3 @@ export class Environments {
@@ -438,3 +438,3 @@ export class Environments {
diff --git a/src/api/resources/events/client/Client.ts b/src/api/resources/events/client/Client.ts
index 58597be..937c801 100644
--- a/src/api/resources/events/client/Client.ts
+++ b/src/api/resources/events/client/Client.ts
@@ -31,3 +31,3 @@ export class Events {
      * @example
-     *     await flatfile.events.list({})
+     *     await flatfile.events.list()
      */
@@ -82,3 +82,3 @@ export class Events {
@@ -158,3 +158,3 @@ export class Events {
@@ -237,3 +237,3 @@ export class Events {
@@ -289,3 +289,3 @@ export class Events {
@@ -335,3 +335,3 @@ export class Events {
      * @example
-     *     await flatfile.events.getEventToken({})
+     *     await flatfile.events.getEventToken()
      */
@@ -362,3 +362,3 @@ export class Events {
diff --git a/src/api/resources/events/types/Context.ts b/src/api/resources/events/types/Context.ts
index 117acb2..72c7314 100644
--- a/src/api/resources/events/types/Context.ts
+++ b/src/api/resources/events/types/Context.ts
@@ -41,2 +41,3 @@ export interface Context {
     actorId?: string;
+    appId?: Flatfile.AppId;
 }
diff --git a/src/api/resources/events/types/Event.ts b/src/api/resources/events/types/Event.ts
index 1ec89fd..20f2d64 100644
--- a/src/api/resources/events/types/Event.ts
+++ b/src/api/resources/events/types/Event.ts
@@ -54,2 +54,3 @@ export type Event =
     | Flatfile.Event.SheetDeleted
+    | Flatfile.Event.SheetCountsUpdated
     | Flatfile.Event.SnapshotCreated
@@ -162,2 +163,6 @@ export declare namespace Event {
 
+    interface SheetCountsUpdated extends Flatfile.GenericEvent {
+        topic: "sheet:counts-updated";
+    }
+
     interface SnapshotCreated extends Flatfile.GenericEvent {
diff --git a/src/api/resources/events/types/EventTopic.ts b/src/api/resources/events/types/EventTopic.ts
index 71bab5b..589a8a2 100644
--- a/src/api/resources/events/types/EventTopic.ts
+++ b/src/api/resources/events/types/EventTopic.ts
@@ -31,2 +31,3 @@ export type EventTopic =
     | "sheet:deleted"
+    | "sheet:counts-updated"
     | "snapshot:created"
@@ -83,2 +84,3 @@ export const EventTopic = {
     SheetDeleted: "sheet:deleted",
+    SheetCountsUpdated: "sheet:counts-updated",
     SnapshotCreated: "snapshot:created",
diff --git a/src/api/resources/files/client/Client.ts b/src/api/resources/files/client/Client.ts
index 8fd371a..b35ed38 100644
--- a/src/api/resources/files/client/Client.ts
+++ b/src/api/resources/files/client/Client.ts
@@ -63,3 +63,3 @@ export class Files {
@@ -137,3 +137,3 @@ export class Files {
@@ -210,3 +210,3 @@ export class Files {
@@ -289,3 +289,3 @@ export class Files {
@@ -378,3 +378,3 @@ export class Files {
@@ -458,3 +458,3 @@ export class Files {
diff --git a/src/api/resources/files/client/requests/ListFilesRequest.ts b/src/api/resources/files/client/requests/ListFilesRequest.ts
index 0e99dd4..ed26c81 100644
--- a/src/api/resources/files/client/requests/ListFilesRequest.ts
+++ b/src/api/resources/files/client/requests/ListFilesRequest.ts
@@ -13,3 +13,3 @@ export interface ListFilesRequest {
     /**
-     * Number of jobs to return in a page (default 20)
+     * Number of files to return in a page (default 20)
      */
@@ -17,3 +17,3 @@ export interface ListFilesRequest {
     /**
-     * Based on pageSize, which page of jobs to return
+     * Based on pageSize, which page of files to return
      */
diff --git a/src/api/resources/foreigndb/client/Client.ts b/src/api/resources/foreigndb/client/Client.ts
new file mode 100644
index 0000000..55ee09b
--- /dev/null
+++ b/src/api/resources/foreigndb/client/Client.ts
@@ -0,0 +1,457 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as environments from "../../../../environments";
+import * as core from "../../../../core";
+import * as Flatfile from "../../..";
+import * as serializers from "../../../../serialization";
+import urlJoin from "url-join";
+import * as errors from "../../../../errors";
+
+export declare namespace Foreigndb {
+    interface Options {
+        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
+        token?: core.Supplier<core.BearerToken | undefined>;
+        fetcher?: core.FetchFunction;
+    }
+
+    interface RequestOptions {
+        timeoutInSeconds?: number;
+        maxRetries?: number;
+    }
+}
+
+export class Foreigndb {
+    constructor(protected readonly _options: Foreigndb.Options = {}) {}
+
+    /**
+     * Restore a database from a backup
+     * @throws {@link Flatfile.BadRequestError}
+     * @throws {@link Flatfile.NotFoundError}
+     */
+    public async restore(
+        workbookId: string,
+        request: Flatfile.RestoreDatabaseRequest,
+        requestOptions?: Foreigndb.RequestOptions
+    ): Promise<Flatfile.RestoreDatabaseResponse> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                `/foreigndb/${workbookId}`
+            ),
+            method: "POST",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            body: await serializers.RestoreDatabaseRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.RestoreDatabaseResponse.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            switch (_response.error.statusCode) {
+                case 400:
+                    throw new Flatfile.BadRequestError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                case 404:
+                    throw new Flatfile.NotFoundError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                default:
+                    throw new errors.FlatfileError({
+                        statusCode: _response.error.statusCode,
+                        body: _response.error.body,
+                    });
+            }
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    /**
+     * Get database user credentials
+     * @throws {@link Flatfile.BadRequestError}
+     * @throws {@link Flatfile.NotFoundError}
+     */
+    public async getDatabaseUser(
+        workbookId: string,
+        requestOptions?: Foreigndb.RequestOptions
+    ): Promise<Flatfile.GetDatabaseUserResponse> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                `/foreigndb/${workbookId}/user`
+            ),
+            method: "GET",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.GetDatabaseUserResponse.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            switch (_response.error.statusCode) {
+                case 400:
+                    throw new Flatfile.BadRequestError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                case 404:
+                    throw new Flatfile.NotFoundError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                default:
+                    throw new errors.FlatfileError({
+                        statusCode: _response.error.statusCode,
+                        body: _response.error.body,
+                    });
+            }
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    /**
+     * Get the database information
+     * @throws {@link Flatfile.BadRequestError}
+     * @throws {@link Flatfile.NotFoundError}
+     */
+    public async getDatabaseInfo(
+        workbookId: string,
+        requestOptions?: Foreigndb.RequestOptions
+    ): Promise<Flatfile.GetDatabaseResponse> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                `/foreigndb/${workbookId}`
+            ),
+            method: "GET",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.GetDatabaseResponse.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            switch (_response.error.statusCode) {
+                case 400:
+                    throw new Flatfile.BadRequestError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                case 404:
+                    throw new Flatfile.NotFoundError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                default:
+                    throw new errors.FlatfileError({
+                        statusCode: _response.error.statusCode,
+                        body: _response.error.body,
+                    });
+            }
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    /**
+     * Delete the database
+     * @throws {@link Flatfile.BadRequestError}
+     * @throws {@link Flatfile.NotFoundError}
+     */
+    public async deleteDatabase(
+        workbookId: string,
+        requestOptions?: Foreigndb.RequestOptions
+    ): Promise<Flatfile.Success> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                `/foreigndb/${workbookId}`
+            ),
+            method: "DELETE",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.Success.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            switch (_response.error.statusCode) {
+                case 400:
+                    throw new Flatfile.BadRequestError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                case 404:
+                    throw new Flatfile.NotFoundError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                default:
+                    throw new errors.FlatfileError({
+                        statusCode: _response.error.statusCode,
+                        body: _response.error.body,
+                    });
+            }
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    /**
+     * Persist a file in s3 object storage
+     * @throws {@link Flatfile.BadRequestError}
+     * @throws {@link Flatfile.NotFoundError}
+     */
+    public async upload(
+        workbookId: string,
+        request: Flatfile.UploadToObjectStorageRequest,
+        requestOptions?: Foreigndb.RequestOptions
+    ): Promise<Flatfile.Success> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                `/foreigndb/${workbookId}/storage`
+            ),
+            method: "POST",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            body: await serializers.UploadToObjectStorageRequest.jsonOrThrow(request, {
+                unrecognizedObjectKeys: "strip",
+            }),
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.Success.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            switch (_response.error.statusCode) {
+                case 400:
+                    throw new Flatfile.BadRequestError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                case 404:
+                    throw new Flatfile.NotFoundError(
+                        await serializers.Errors.parseOrThrow(_response.error.body, {
+                            unrecognizedObjectKeys: "passthrough",
+                            allowUnrecognizedUnionMembers: true,
+                            allowUnrecognizedEnumValues: true,
+                            skipValidation: true,
+                            breadcrumbsPrefix: ["response"],
+                        })
+                    );
+                default:
+                    throw new errors.FlatfileError({
+                        statusCode: _response.error.statusCode,
+                        body: _response.error.body,
+                    });
+            }
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
+    protected async _getAuthorizationHeader() {
+        const bearer = await core.Supplier.get(this._options.token);
+        if (bearer != null) {
+            return `Bearer ${bearer}`;
+        }
+
+        return undefined;
+    }
+}
diff --git a/src/api/resources/foreigndb/client/index.ts b/src/api/resources/foreigndb/client/index.ts
new file mode 100644
index 0000000..cb0ff5c
--- /dev/null
+++ b/src/api/resources/foreigndb/client/index.ts
@@ -0,0 +1 @@
+export {};
diff --git a/src/api/resources/foreigndb/index.ts b/src/api/resources/foreigndb/index.ts
new file mode 100644
index 0000000..c9240f8
--- /dev/null
+++ b/src/api/resources/foreigndb/index.ts
@@ -0,0 +1,2 @@
+export * from "./types";
+export * from "./client";
diff --git a/src/api/resources/foreigndb/types/DatabaseTask.ts b/src/api/resources/foreigndb/types/DatabaseTask.ts
new file mode 100644
index 0000000..2ef7873
--- /dev/null
+++ b/src/api/resources/foreigndb/types/DatabaseTask.ts
@@ -0,0 +1,15 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+/**
+ * Properties of a database task
+ */
+export interface DatabaseTask {
+    /** The task status */
+    status: string;
+    /** The task type */
+    type: string;
+    /** The task progress */
+    progress: number;
+}
diff --git a/src/api/resources/foreigndb/types/GetDatabaseResponse.ts b/src/api/resources/foreigndb/types/GetDatabaseResponse.ts
new file mode 100644
index 0000000..f492c2d
--- /dev/null
+++ b/src/api/resources/foreigndb/types/GetDatabaseResponse.ts
@@ -0,0 +1,9 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+export interface GetDatabaseResponse {
+    task: Flatfile.DatabaseTask;
+}
diff --git a/src/api/resources/foreigndb/types/GetDatabaseUserResponse.ts b/src/api/resources/foreigndb/types/GetDatabaseUserResponse.ts
new file mode 100644
index 0000000..d0208fb
--- /dev/null
+++ b/src/api/resources/foreigndb/types/GetDatabaseUserResponse.ts
@@ -0,0 +1,13 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+/**
+ * Properties of the database user
+ */
+export interface GetDatabaseUserResponse {
+    /** the database user username */
+    username: string;
+    /** the database user password */
+    password: string;
+}
diff --git a/src/api/resources/foreigndb/types/RestoreDatabaseRequest.ts b/src/api/resources/foreigndb/types/RestoreDatabaseRequest.ts
new file mode 100644
index 0000000..18c0c10
--- /dev/null
+++ b/src/api/resources/foreigndb/types/RestoreDatabaseRequest.ts
@@ -0,0 +1,11 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+/**
+ * Properties required to restore a database
+ */
+export interface RestoreDatabaseRequest {
+    /** the fileId of the backup to be restored */
+    fileId: string;
+}
diff --git a/src/api/resources/foreigndb/types/RestoreDatabaseResponse.ts b/src/api/resources/foreigndb/types/RestoreDatabaseResponse.ts
new file mode 100644
index 0000000..a4a1fe1
--- /dev/null
+++ b/src/api/resources/foreigndb/types/RestoreDatabaseResponse.ts
@@ -0,0 +1,15 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+/**
+ * Properties of a restored database
+ */
+export interface RestoreDatabaseResponse {
+    /** the host to the restored database */
+    host: string;
+    /** the port to the restored database */
+    port: number;
+    /** the database name to the restored database */
+    dbname: string;
+}
diff --git a/src/api/resources/foreigndb/types/UploadToObjectStorageRequest.ts b/src/api/resources/foreigndb/types/UploadToObjectStorageRequest.ts
new file mode 100644
index 0000000..52d0ce8
--- /dev/null
+++ b/src/api/resources/foreigndb/types/UploadToObjectStorageRequest.ts
@@ -0,0 +1,11 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+/**
+ * Properties required to upload a file to object storage
+ */
+export interface UploadToObjectStorageRequest {
+    /** the ID of the file to send to object storage */
+    fileId: string;
+}
diff --git a/src/api/resources/foreigndb/types/index.ts b/src/api/resources/foreigndb/types/index.ts
new file mode 100644
index 0000000..8086286
--- /dev/null
+++ b/src/api/resources/foreigndb/types/index.ts
@@ -0,0 +1,6 @@
+export * from "./UploadToObjectStorageRequest";
+export * from "./RestoreDatabaseRequest";
+export * from "./RestoreDatabaseResponse";
+export * from "./GetDatabaseResponse";
+export * from "./DatabaseTask";
+export * from "./GetDatabaseUserResponse";
diff --git a/src/api/resources/guests/client/Client.ts b/src/api/resources/guests/client/Client.ts
index eb3b6b8..24f5f29 100644
--- a/src/api/resources/guests/client/Client.ts
+++ b/src/api/resources/guests/client/Client.ts
@@ -57,3 +57,3 @@ export class Guests {
@@ -130,3 +130,3 @@ export class Guests {
@@ -192,3 +192,3 @@ export class Guests {
@@ -250,3 +250,3 @@ export class Guests {
@@ -315,3 +315,3 @@ export class Guests {
@@ -360,3 +360,3 @@ export class Guests {
      * @example
-     *     await flatfile.guests.getGuestToken("us_g_YOUR_ID", {})
+     *     await flatfile.guests.getGuestToken("us_g_YOUR_ID")
      */
@@ -384,3 +384,3 @@ export class Guests {
@@ -446,3 +446,3 @@ export class Guests {
@@ -541,3 +541,3 @@ export class Guests {
@@ -639,3 +639,3 @@ export class Guests {
@@ -735,3 +735,3 @@ export class Guests {
diff --git a/src/api/resources/index.ts b/src/api/resources/index.ts
index 080ee96..21a77dd 100644
--- a/src/api/resources/index.ts
+++ b/src/api/resources/index.ts
@@ -1 +1,3 @@
+export * as accounts from "./accounts";
+export * from "./accounts/types";
 export * as agents from "./agents";
@@ -4,2 +6,4 @@ export * as apps from "./apps";
 export * from "./apps/types";
+export * as assistant from "./assistant";
+export * from "./assistant/types";
 export * as auth from "./auth";
@@ -24,2 +28,4 @@ export * as files from "./files";
 export * from "./files/types";
+export * as foreigndb from "./foreigndb";
+export * from "./foreigndb/types";
 export * as guests from "./guests";
@@ -52,2 +58,3 @@ export * from "./commons/errors";
 export * from "./agents/client/requests";
+export * from "./assistant/client/requests";
 export * from "./auth/client/requests";
diff --git a/src/api/resources/jobs/client/Client.ts b/src/api/resources/jobs/client/Client.ts
index 7a6f9e2..9e1815c 100644
--- a/src/api/resources/jobs/client/Client.ts
+++ b/src/api/resources/jobs/client/Client.ts
@@ -76,3 +76,3 @@ export class Jobs {
@@ -132,3 +132,3 @@ export class Jobs {
@@ -185,3 +185,3 @@ export class Jobs {
@@ -241,3 +241,3 @@ export class Jobs {
@@ -294,3 +294,3 @@ export class Jobs {
@@ -352,3 +352,3 @@ export class Jobs {
@@ -413,3 +413,3 @@ export class Jobs {
@@ -512,3 +512,3 @@ export class Jobs {
@@ -572,3 +572,3 @@ export class Jobs {
@@ -641,3 +641,3 @@ export class Jobs {
@@ -706,3 +706,3 @@ export class Jobs {
@@ -780,3 +780,3 @@ export class Jobs {
@@ -858,3 +858,3 @@ export class Jobs {
@@ -926,3 +926,3 @@ export class Jobs {
@@ -985,3 +985,3 @@ export class Jobs {
@@ -1043,3 +1043,3 @@ export class Jobs {
@@ -1089,2 +1089,3 @@ export class Jobs {
      *     await flatfile.jobs.split("us_jb_YOUR_ID", {
+     *         parts: [{}],
      *         runInParallel: true
@@ -1108,3 +1109,3 @@ export class Jobs {
diff --git a/src/api/resources/jobs/types/Job.ts b/src/api/resources/jobs/types/Job.ts
index 7aba335..b97c5de 100644
--- a/src/api/resources/jobs/types/Job.ts
+++ b/src/api/resources/jobs/types/Job.ts
@@ -21,3 +21,3 @@ import * as Flatfile from "../../..";
  *         destination: "us_wb_YOUR_ID",
- *         config: undefined,
+ *         config: {},
  *         trigger: Flatfile.Trigger.Immediate,
diff --git a/src/api/resources/jobs/types/JobPlan.ts b/src/api/resources/jobs/types/JobPlan.ts
index 3702174..93db0fa 100644
--- a/src/api/resources/jobs/types/JobPlan.ts
+++ b/src/api/resources/jobs/types/JobPlan.ts
@@ -22,3 +22,3 @@ import * as Flatfile from "../../..";
  *             destination: "us_wb_YOUR_ID",
- *             config: undefined,
+ *             config: {},
  *             trigger: Flatfile.Trigger.Immediate,
diff --git a/src/api/resources/jobs/types/JobPlanResponse.ts b/src/api/resources/jobs/types/JobPlanResponse.ts
index 40723bb..f37035f 100644
--- a/src/api/resources/jobs/types/JobPlanResponse.ts
+++ b/src/api/resources/jobs/types/JobPlanResponse.ts
@@ -21,3 +21,3 @@ import * as Flatfile from "../../..";
  *                 destination: "us_wb_YOUR_ID",
- *                 config: undefined,
+ *                 config: {},
  *                 trigger: Flatfile.Trigger.Immediate,
diff --git a/src/api/resources/jobs/types/JobResponse.ts b/src/api/resources/jobs/types/JobResponse.ts
index eb4b4ab..f1c5ff8 100644
--- a/src/api/resources/jobs/types/JobResponse.ts
+++ b/src/api/resources/jobs/types/JobResponse.ts
@@ -20,3 +20,3 @@ import * as Flatfile from "../../..";
  *             destination: "us_wb_YOUR_ID",
- *             config: undefined,
+ *             config: {},
  *             trigger: Flatfile.Trigger.Immediate,
diff --git a/src/api/resources/jobs/types/JobSplitDetails.ts b/src/api/resources/jobs/types/JobSplitDetails.ts
index fd46de6..961e31c 100644
--- a/src/api/resources/jobs/types/JobSplitDetails.ts
+++ b/src/api/resources/jobs/types/JobSplitDetails.ts
@@ -11,2 +11,3 @@ import * as Flatfile from "../../..";
  *     {
+ *         parts: [{}],
  *         runInParallel: true
diff --git a/src/api/resources/jobs/types/JobUpdate.ts b/src/api/resources/jobs/types/JobUpdate.ts
index 0f938e5..afaa7a5 100644
--- a/src/api/resources/jobs/types/JobUpdate.ts
+++ b/src/api/resources/jobs/types/JobUpdate.ts
@@ -11,3 +11,3 @@ import * as Flatfile from "../../..";
  *     {
- *         config: undefined,
+ *         config: {},
  *         status: Flatfile.JobStatus.Complete,
diff --git a/src/api/resources/jobs/types/ListJobsResponse.ts b/src/api/resources/jobs/types/ListJobsResponse.ts
index eb997d2..2df4075 100644
--- a/src/api/resources/jobs/types/ListJobsResponse.ts
+++ b/src/api/resources/jobs/types/ListJobsResponse.ts
@@ -25,3 +25,3 @@ import * as Flatfile from "../../..";
  *                 destination: "us_wb_YOUR_ID",
- *                 config: undefined,
+ *                 config: {},
  *                 trigger: Flatfile.Trigger.Immediate,
diff --git a/src/api/resources/jobs/types/MutateJobConfig.ts b/src/api/resources/jobs/types/MutateJobConfig.ts
index dd23cc9..0bc62b6 100644
--- a/src/api/resources/jobs/types/MutateJobConfig.ts
+++ b/src/api/resources/jobs/types/MutateJobConfig.ts
@@ -12,2 +12,6 @@ export interface MutateJobConfig {
     mutationId?: string;
+    /** If specified, a snapshot will be generated with this label */
+    snapshotLabel?: string;
+    /** The generated snapshotId will be stored here */
+    snapshotId?: string;
     filter?: Flatfile.Filter;
diff --git a/src/api/resources/mapping/client/Client.ts b/src/api/resources/mapping/client/Client.ts
index 3863aeb..dcf2d56 100644
--- a/src/api/resources/mapping/client/Client.ts
+++ b/src/api/resources/mapping/client/Client.ts
@@ -47,3 +47,3 @@ export class Mapping {
@@ -128,3 +128,3 @@ export class Mapping {
@@ -263,3 +263,3 @@ export class Mapping {
@@ -337,3 +337,3 @@ export class Mapping {
@@ -421,3 +421,3 @@ export class Mapping {
@@ -505,3 +505,3 @@ export class Mapping {
@@ -589,3 +589,3 @@ export class Mapping {
@@ -676,3 +676,3 @@ export class Mapping {
@@ -765,3 +765,3 @@ export class Mapping {
@@ -859,3 +859,3 @@ export class Mapping {
@@ -944,3 +944,3 @@ export class Mapping {
@@ -1034,3 +1034,3 @@ export class Mapping {
diff --git a/src/api/resources/records/client/Client.ts b/src/api/resources/records/client/Client.ts
index 9d658d7..10a5f87 100644
--- a/src/api/resources/records/client/Client.ts
+++ b/src/api/resources/records/client/Client.ts
@@ -33,3 +33,3 @@ export class Records {
      * @example
-     *     await flatfile.records.get("us_sh_YOUR_ID", {})
+     *     await flatfile.records.get("us_sh_YOUR_ID")
      */
@@ -153,3 +153,3 @@ export class Records {
@@ -229,3 +229,3 @@ export class Records {
      *                 "firstName": {
-     *                     value: undefined,
+     *                     value: "John",
      *                     messages: [],
@@ -234,3 +234,3 @@ export class Records {
      *                 "lastName": {
-     *                     value: undefined,
+     *                     value: "Smith",
      *                     messages: [],
@@ -239,3 +239,3 @@ export class Records {
      *                 "email": {
-     *                     value: undefined,
+     *                     value: "john.smith@example.com",
      *                     messages: [],
@@ -245,3 +245,4 @@ export class Records {
      *             valid: true,
-     *             metadata: {}
+     *             metadata: {},
+     *             config: {}
      *         }])
@@ -264,3 +265,3 @@ export class Records {
@@ -336,3 +337,3 @@ export class Records {
      *             "firstName": {
-     *                 value: undefined,
+     *                 value: "John",
      *                 messages: [],
@@ -341,3 +342,3 @@ export class Records {
      *             "lastName": {
-     *                 value: undefined,
+     *                 value: "Smith",
      *                 messages: [],
@@ -346,3 +347,3 @@ export class Records {
      *             "email": {
-     *                 value: undefined,
+     *                 value: "john.smith@example.com",
      *                 messages: [],
@@ -368,3 +369,3 @@ export class Records {
@@ -466,3 +467,3 @@ export class Records {
@@ -584,3 +585,3 @@ export class Records {
diff --git a/src/api/resources/records/client/requests/GetRecordsRequest.ts b/src/api/resources/records/client/requests/GetRecordsRequest.ts
index 6feba96..ffd839d 100644
--- a/src/api/resources/records/client/requests/GetRecordsRequest.ts
+++ b/src/api/resources/records/client/requests/GetRecordsRequest.ts
@@ -35,3 +35,3 @@ export interface GetRecordsRequest {
     /**
-     * Number of records to return in a page (default 1000 if pageNumber included)
+     * Number of records to return in a page (default 10,000)
      */
@@ -39,3 +39,3 @@ export interface GetRecordsRequest {
     /**
-     * Based on pageSize, which page of records to return
+     * Based on pageSize, which page of records to return (Note - numbers start at 1)
      */
diff --git a/src/api/resources/records/types/CellConfig.ts b/src/api/resources/records/types/CellConfig.ts
new file mode 100644
index 0000000..c2bb050
--- /dev/null
+++ b/src/api/resources/records/types/CellConfig.ts
@@ -0,0 +1,15 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+/**
+ * CellConfig
+ *
+ * @example
+ *     {
+ *         readonly: true
+ *     }
+ */
+export interface CellConfig {
+    readonly?: boolean;
+}
diff --git a/src/api/resources/records/types/DiffRecord.ts b/src/api/resources/records/types/DiffRecord.ts
index cd297a6..432c94f 100644
--- a/src/api/resources/records/types/DiffRecord.ts
+++ b/src/api/resources/records/types/DiffRecord.ts
@@ -12,12 +12,12 @@ import * as Flatfile from "../../..";
  *             "firstName": {
- *                 snapshotValue: undefined,
- *                 value: undefined
+ *                 snapshotValue: "John",
+ *                 value: "Johns"
  *             },
  *             "lastName": {
- *                 snapshotValue: undefined,
- *                 value: undefined
+ *                 snapshotValue: "Doe",
+ *                 value: "Does"
  *             },
  *             "email": {
- *                 snapshotValue: undefined,
- *                 value: undefined
+ *                 snapshotValue: "john.doe@example.com",
+ *                 value: "john.doe@example.com"
  *             }
diff --git a/src/api/resources/records/types/DiffRecords.ts b/src/api/resources/records/types/DiffRecords.ts
index 9d9bf91..9c4e428 100644
--- a/src/api/resources/records/types/DiffRecords.ts
+++ b/src/api/resources/records/types/DiffRecords.ts
@@ -14,12 +14,12 @@ import * as Flatfile from "../../..";
  *                 "firstName": {
- *                     snapshotValue: undefined,
- *                     value: undefined
+ *                     snapshotValue: "John",
+ *                     value: "Johns"
  *                 },
  *                 "lastName": {
- *                     snapshotValue: undefined,
- *                     value: undefined
+ *                     snapshotValue: "Doe",
+ *                     value: "Does"
  *                 },
  *                 "email": {
- *                     snapshotValue: undefined,
- *                     value: undefined
+ *                     snapshotValue: "john.doe@example.com",
+ *                     value: "john.doe@example.com"
  *                 }
diff --git a/src/api/resources/records/types/DiffRecordsResponse.ts b/src/api/resources/records/types/DiffRecordsResponse.ts
index 2f1a25d..0bc082d 100644
--- a/src/api/resources/records/types/DiffRecordsResponse.ts
+++ b/src/api/resources/records/types/DiffRecordsResponse.ts
@@ -13,12 +13,12 @@ import * as Flatfile from "../../..";
  *                     "firstName": {
- *                         snapshotValue: undefined,
- *                         value: undefined
+ *                         snapshotValue: "John",
+ *                         value: "Johns"
  *                     },
  *                     "lastName": {
- *                         snapshotValue: undefined,
- *                         value: undefined
+ *                         snapshotValue: "Doe",
+ *                         value: "Does"
  *                     },
  *                     "email": {
- *                         snapshotValue: undefined,
- *                         value: undefined
+ *                         snapshotValue: "john.doe@example.com",
+ *                         value: "john.doe@example.com"
  *                     }
diff --git a/src/api/resources/records/types/GetRecordsResponse.ts b/src/api/resources/records/types/GetRecordsResponse.ts
index 160b2ba..a577381 100644
--- a/src/api/resources/records/types/GetRecordsResponse.ts
+++ b/src/api/resources/records/types/GetRecordsResponse.ts
@@ -14,3 +14,3 @@ import * as Flatfile from "../../..";
  *                         "firstName": {
- *                             value: undefined,
+ *                             value: "John",
  *                             messages: [],
@@ -20,3 +20,3 @@ import * as Flatfile from "../../..";
  *                         "lastName": {
- *                             value: undefined,
+ *                             value: "Smith",
  *                             messages: [],
@@ -26,3 +26,3 @@ import * as Flatfile from "../../..";
  *                         "email": {
- *                             value: undefined,
+ *                             value: "john.smith@example.com",
  *                             messages: [],
@@ -33,3 +33,4 @@ import * as Flatfile from "../../..";
  *                     valid: true,
- *                     metadata: {}
+ *                     metadata: {},
+ *                     config: {}
  *                 }],
diff --git a/src/api/resources/records/types/GetRecordsResponseData.ts b/src/api/resources/records/types/GetRecordsResponseData.ts
index df58c87..08903f6 100644
--- a/src/api/resources/records/types/GetRecordsResponseData.ts
+++ b/src/api/resources/records/types/GetRecordsResponseData.ts
@@ -15,3 +15,3 @@ import * as Flatfile from "../../..";
  *                     "firstName": {
- *                         value: undefined,
+ *                         value: "John",
  *                         messages: [],
@@ -21,3 +21,3 @@ import * as Flatfile from "../../..";
  *                     "lastName": {
- *                         value: undefined,
+ *                         value: "Smith",
  *                         messages: [],
@@ -27,3 +27,3 @@ import * as Flatfile from "../../..";
  *                     "email": {
- *                         value: undefined,
+ *                         value: "john.smith@example.com",
  *                         messages: [],
@@ -34,3 +34,4 @@ import * as Flatfile from "../../..";
  *                 valid: true,
- *                 metadata: {}
+ *                 metadata: {},
+ *                 config: {}
  *             }],
diff --git a/src/api/resources/records/types/RecordBase.ts b/src/api/resources/records/types/RecordBase.ts
index ab2ae97..79c9dea 100644
--- a/src/api/resources/records/types/RecordBase.ts
+++ b/src/api/resources/records/types/RecordBase.ts
@@ -21,5 +21,8 @@ export interface RecordBase {
     commitId?: Flatfile.CommitId;
+    /** Auto-generated value based on whether the record contains a field with an error message. Cannot be set via the API. */
     valid?: boolean;
+    /** This record level `messages` property is deprecated and no longer stored or used. Use the `messages` property on the individual cell values instead. This property will be removed in a future release. */
     messages?: Flatfile.ValidationMessage[];
     metadata?: Record<string, any>;
+    config?: Flatfile.RecordConfig;
 }
diff --git a/src/api/resources/records/types/RecordConfig.ts b/src/api/resources/records/types/RecordConfig.ts
new file mode 100644
index 0000000..0f690f6
--- /dev/null
+++ b/src/api/resources/records/types/RecordConfig.ts
@@ -0,0 +1,26 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+/**
+ * Configuration of a record or specific fields in the record
+ *
+ * @example
+ *     {
+ *         readonly: true,
+ *         fields: {
+ *             "foo": {
+ *                 readonly: true
+ *             },
+ *             "bar": {
+ *                 readonly: true
+ *             }
+ *         }
+ *     }
+ */
+export interface RecordConfig {
+    readonly?: boolean;
+    fields?: Record<string, Flatfile.CellConfig>;
+}
diff --git a/src/api/resources/records/types/RecordData.ts b/src/api/resources/records/types/RecordData.ts
index 6860670..d629418 100644
--- a/src/api/resources/records/types/RecordData.ts
+++ b/src/api/resources/records/types/RecordData.ts
@@ -12,3 +12,3 @@ import * as Flatfile from "../../..";
  *         "firstName": {
- *             value: undefined,
+ *             value: "John",
  *             messages: [],
@@ -17,3 +17,3 @@ import * as Flatfile from "../../..";
  *         "lastName": {
- *             value: undefined,
+ *             value: "Smith",
  *             messages: [],
@@ -22,3 +22,3 @@ import * as Flatfile from "../../..";
  *         "email": {
- *             value: undefined,
+ *             value: "john.smith@example.com",
  *             messages: [],
diff --git a/src/api/resources/records/types/RecordDataWithLinks.ts b/src/api/resources/records/types/RecordDataWithLinks.ts
index 0005027..103aed2 100644
--- a/src/api/resources/records/types/RecordDataWithLinks.ts
+++ b/src/api/resources/records/types/RecordDataWithLinks.ts
@@ -12,3 +12,3 @@ import * as Flatfile from "../../..";
  *         "firstName": {
- *             value: undefined,
+ *             value: "John",
  *             messages: [],
@@ -18,3 +18,3 @@ import * as Flatfile from "../../..";
  *         "lastName": {
- *             value: undefined,
+ *             value: "Smith",
  *             messages: [],
@@ -24,3 +24,3 @@ import * as Flatfile from "../../..";
  *         "email": {
- *             value: undefined,
+ *             value: "john.smith@example.com",
  *             messages: [],
@@ -34,3 +34,3 @@ import * as Flatfile from "../../..";
  *         "firstName": {
- *             value: undefined,
+ *             value: "Suzie",
  *             messages: [],
@@ -40,3 +40,3 @@ import * as Flatfile from "../../..";
  *         "lastName": {
- *             value: undefined,
+ *             value: "Q",
  *             messages: [],
@@ -46,3 +46,3 @@ import * as Flatfile from "../../..";
  *         "email": {
- *             value: undefined,
+ *             value: "suzie.q@example.com",
  *             messages: [],
diff --git a/src/api/resources/records/types/RecordWithLinks.ts b/src/api/resources/records/types/RecordWithLinks.ts
index 267987a..331d718 100644
--- a/src/api/resources/records/types/RecordWithLinks.ts
+++ b/src/api/resources/records/types/RecordWithLinks.ts
@@ -14,3 +14,3 @@ import * as Flatfile from "../../..";
  *             "firstName": {
- *                 value: undefined,
+ *                 value: "John",
  *                 messages: [],
@@ -20,3 +20,3 @@ import * as Flatfile from "../../..";
  *             "lastName": {
- *                 value: undefined,
+ *                 value: "Smith",
  *                 messages: [],
@@ -26,3 +26,3 @@ import * as Flatfile from "../../..";
  *             "email": {
- *                 value: undefined,
+ *                 value: "john.smith@example.com",
  *                 messages: [],
@@ -33,3 +33,4 @@ import * as Flatfile from "../../..";
  *         valid: true,
- *         metadata: {}
+ *         metadata: {},
+ *         config: {}
  *     }
@@ -41,3 +42,3 @@ import * as Flatfile from "../../..";
  *             "firstName": {
- *                 value: undefined,
+ *                 value: "Suzie",
  *                 messages: [],
@@ -47,3 +48,3 @@ import * as Flatfile from "../../..";
  *             "lastName": {
- *                 value: undefined,
+ *                 value: "Q",
  *                 messages: [],
@@ -53,3 +54,3 @@ import * as Flatfile from "../../..";
  *             "email": {
- *                 value: undefined,
+ *                 value: "suzie.q@example.com",
  *                 messages: [],
@@ -60,3 +61,4 @@ import * as Flatfile from "../../..";
  *         valid: true,
- *         metadata: {}
+ *         metadata: {},
+ *         config: {}
  *     }
@@ -69,2 +71,3 @@ export interface RecordWithLinks {
     metadata?: Record<string, any>;
+    config?: Flatfile.RecordConfig;
 }
diff --git a/src/api/resources/records/types/Record_.ts b/src/api/resources/records/types/Record_.ts
index bd6b1e4..bce1efc 100644
--- a/src/api/resources/records/types/Record_.ts
+++ b/src/api/resources/records/types/Record_.ts
@@ -16,3 +16,3 @@ import * as Flatfile from "../../..";
  *             "firstName": {
- *                 value: undefined,
+ *                 value: "John",
  *                 messages: [],
@@ -21,3 +21,3 @@ import * as Flatfile from "../../..";
  *             "lastName": {
- *                 value: undefined,
+ *                 value: "Smith",
  *                 messages: [],
@@ -26,3 +26,3 @@ import * as Flatfile from "../../..";
  *             "email": {
- *                 value: undefined,
+ *                 value: "john.smith@example.com",
  *                 messages: [],
@@ -32,3 +32,4 @@ import * as Flatfile from "../../..";
  *         valid: true,
- *         metadata: {}
+ *         metadata: {},
+ *         config: {}
  *     }
diff --git a/src/api/resources/records/types/Records.ts b/src/api/resources/records/types/Records.ts
index ac4adbd..7cba74e 100644
--- a/src/api/resources/records/types/Records.ts
+++ b/src/api/resources/records/types/Records.ts
@@ -16,3 +16,3 @@ import * as Flatfile from "../../..";
  *                 "firstName": {
- *                     value: undefined,
+ *                     value: "John",
  *                     messages: [],
@@ -21,3 +21,3 @@ import * as Flatfile from "../../..";
  *                 "lastName": {
- *                     value: undefined,
+ *                     value: "Smith",
  *                     messages: [],
@@ -26,3 +26,3 @@ import * as Flatfile from "../../..";
  *                 "email": {
- *                     value: undefined,
+ *                     value: "john.smith@example.com",
  *                     messages: [],
@@ -32,3 +32,4 @@ import * as Flatfile from "../../..";
  *             valid: true,
- *             metadata: {}
+ *             metadata: {},
+ *             config: {}
  *         }]
diff --git a/src/api/resources/records/types/RecordsResponse.ts b/src/api/resources/records/types/RecordsResponse.ts
index c1add59..662ddd1 100644
--- a/src/api/resources/records/types/RecordsResponse.ts
+++ b/src/api/resources/records/types/RecordsResponse.ts
@@ -14,3 +14,3 @@ import * as Flatfile from "../../..";
  *                         "firstName": {
- *                             value: undefined,
+ *                             value: "John",
  *                             messages: [],
@@ -20,3 +20,3 @@ import * as Flatfile from "../../..";
  *                         "lastName": {
- *                             value: undefined,
+ *                             value: "Smith",
  *                             messages: [],
@@ -26,3 +26,3 @@ import * as Flatfile from "../../..";
  *                         "email": {
- *                             value: undefined,
+ *                             value: "john.smith@example.com",
  *                             messages: [],
@@ -33,3 +33,4 @@ import * as Flatfile from "../../..";
  *                     valid: true,
- *                     metadata: {}
+ *                     metadata: {},
+ *                     config: {}
  *                 }],
diff --git a/src/api/resources/records/types/RecordsResponseData.ts b/src/api/resources/records/types/RecordsResponseData.ts
index ef6f3a8..b66a477 100644
--- a/src/api/resources/records/types/RecordsResponseData.ts
+++ b/src/api/resources/records/types/RecordsResponseData.ts
@@ -13,3 +13,3 @@ import * as Flatfile from "../../..";
  *                     "firstName": {
- *                         value: undefined,
+ *                         value: "John",
  *                         messages: [],
@@ -19,3 +19,3 @@ import * as Flatfile from "../../..";
  *                     "lastName": {
- *                         value: undefined,
+ *                         value: "Smith",
  *                         messages: [],
@@ -25,3 +25,3 @@ import * as Flatfile from "../../..";
  *                     "email": {
- *                         value: undefined,
+ *                         value: "john.smith@example.com",
  *                         messages: [],
@@ -32,3 +32,4 @@ import * as Flatfile from "../../..";
  *                 valid: true,
- *                 metadata: {}
+ *                 metadata: {},
+ *                 config: {}
  *             }],
diff --git a/src/api/resources/records/types/RecordsWithLinks.ts b/src/api/resources/records/types/RecordsWithLinks.ts
index 1bb3f2a..04b9980 100644
--- a/src/api/resources/records/types/RecordsWithLinks.ts
+++ b/src/api/resources/records/types/RecordsWithLinks.ts
@@ -14,3 +14,3 @@ import * as Flatfile from "../../..";
  *                 "firstName": {
- *                     value: undefined,
+ *                     value: "John",
  *                     messages: [],
@@ -20,3 +20,3 @@ import * as Flatfile from "../../..";
  *                 "lastName": {
- *                     value: undefined,
+ *                     value: "Smith",
  *                     messages: [],
@@ -26,3 +26,3 @@ import * as Flatfile from "../../..";
  *                 "email": {
- *                     value: undefined,
+ *                     value: "john.smith@example.com",
  *                     messages: [],
@@ -33,3 +33,4 @@ import * as Flatfile from "../../..";
  *             valid: true,
- *             metadata: {}
+ *             metadata: {},
+ *             config: {}
  *         }]
diff --git a/src/api/resources/records/types/index.ts b/src/api/resources/records/types/index.ts
index 4b1f724..c231dae 100644
--- a/src/api/resources/records/types/index.ts
+++ b/src/api/resources/records/types/index.ts
@@ -18,2 +18,4 @@ export * from "./DiffRecordsResponse";
 export * from "./DiffRecords";
+export * from "./RecordConfig";
+export * from "./CellConfig";
 export * from "./DiffRecord";
diff --git a/src/api/resources/roles/client/Client.ts b/src/api/resources/roles/client/Client.ts
index 4e59f0e..7ec652d 100644
--- a/src/api/resources/roles/client/Client.ts
+++ b/src/api/resources/roles/client/Client.ts
@@ -42,3 +42,3 @@ export class Roles {
diff --git a/src/api/resources/roles/types/ActorIdUnion.ts b/src/api/resources/roles/types/ActorIdUnion.ts
index f7bd7d0..eaf39a2 100644
--- a/src/api/resources/roles/types/ActorIdUnion.ts
+++ b/src/api/resources/roles/types/ActorIdUnion.ts
@@ -6,2 +6,12 @@ import * as Flatfile from "../../..";
 
+/**
+ * @example
+ *     "us_usr_YOUR_ID"
+ *
+ * @example
+ *     "us_ag_YOUR_ID"
+ *
+ * @example
+ *     "us_g_YOUR_ID"
+ */
 export type ActorIdUnion = Flatfile.UserId | Flatfile.AgentId | Flatfile.GuestId;
diff --git a/src/api/resources/roles/types/ActorRoleResponse.ts b/src/api/resources/roles/types/ActorRoleResponse.ts
index fbc4e6d..28616fb 100644
--- a/src/api/resources/roles/types/ActorRoleResponse.ts
+++ b/src/api/resources/roles/types/ActorRoleResponse.ts
@@ -6,2 +6,23 @@ import * as Flatfile from "../../..";
 
+/**
+ * @example
+ *     {
+ *         id: "us_acr_YOUR_ID",
+ *         roleId: "us_rol_YOUR_ID",
+ *         actorId: "us_usr_YOUR_ID",
+ *         resourceId: "us_acc_YOUR_ID",
+ *         createdAt: new Date("2021-01-01T00:00:00.000Z"),
+ *         updatedAt: new Date("2021-01-01T00:00:00.000Z")
+ *     }
+ *
+ * @example
+ *     {
+ *         id: "us_acr_YOUR_ID",
+ *         roleId: "us_rol_YOUR_ID",
+ *         actorId: "us_ag_YOUR_ID",
+ *         resourceId: "us_env_YOUR_ID",
+ *         createdAt: new Date("2021-01-01T00:00:00.000Z"),
+ *         updatedAt: new Date("2021-01-01T00:00:00.000Z")
+ *     }
+ */
 export interface ActorRoleResponse {
diff --git a/src/api/resources/roles/types/AssignActorRoleRequest.ts b/src/api/resources/roles/types/AssignActorRoleRequest.ts
index 9ee92d0..2083319 100644
--- a/src/api/resources/roles/types/AssignActorRoleRequest.ts
+++ b/src/api/resources/roles/types/AssignActorRoleRequest.ts
@@ -6,2 +6,15 @@ import * as Flatfile from "../../..";
 
+/**
+ * @example
+ *     {
+ *         roleId: "us_rol_YOUR_ID",
+ *         resourceId: "us_acc_YOUR_ID"
+ *     }
+ *
+ * @example
+ *     {
+ *         roleId: "us_rol_YOUR_ID",
+ *         resourceId: "us_env_YOUR_ID"
+ *     }
+ */
 export interface AssignActorRoleRequest {
diff --git a/src/api/resources/roles/types/ResourceIdUnion.ts b/src/api/resources/roles/types/ResourceIdUnion.ts
index cc12385..627781c 100644
--- a/src/api/resources/roles/types/ResourceIdUnion.ts
+++ b/src/api/resources/roles/types/ResourceIdUnion.ts
@@ -6,2 +6,12 @@ import * as Flatfile from "../../..";
 
+/**
+ * @example
+ *     "us_acc_YOUR_ID"
+ *
+ * @example
+ *     "us_env_YOUR_ID"
+ *
+ * @example
+ *     "us_sp_YOUR_ID"
+ */
 export type ResourceIdUnion = Flatfile.AccountId | Flatfile.EnvironmentId | Flatfile.SpaceId;
diff --git a/src/api/resources/secrets/client/Client.ts b/src/api/resources/secrets/client/Client.ts
index acc5066..675c124 100644
--- a/src/api/resources/secrets/client/Client.ts
+++ b/src/api/resources/secrets/client/Client.ts
@@ -62,3 +62,3 @@ export class Secrets {
@@ -154,3 +154,3 @@ export class Secrets {
@@ -241,3 +241,3 @@ export class Secrets {
diff --git a/src/api/resources/sheets/client/Client.ts b/src/api/resources/sheets/client/Client.ts
index a4c60c0..9f3157e 100644
--- a/src/api/resources/sheets/client/Client.ts
+++ b/src/api/resources/sheets/client/Client.ts
@@ -54,3 +54,3 @@ export class Sheets {
@@ -116,3 +116,3 @@ export class Sheets {
@@ -176,3 +176,3 @@ export class Sheets {
@@ -262,3 +262,3 @@ export class Sheets {
@@ -406,3 +406,3 @@ export class Sheets {
@@ -519,3 +519,3 @@ export class Sheets {
@@ -581,3 +581,3 @@ export class Sheets {
@@ -649,3 +649,3 @@ export class Sheets {
      * @example
-     *     await flatfile.sheets.getSheetCommits("us_sh_YOUR_ID", {})
+     *     await flatfile.sheets.getSheetCommits("us_sh_YOUR_ID")
      */
@@ -673,3 +673,3 @@ export class Sheets {
@@ -737,3 +737,3 @@ export class Sheets {
@@ -823,3 +823,3 @@ export class Sheets {
@@ -891,2 +891,3 @@ export class Sheets {
      *     await flatfile.sheets.getCellValues("us_sh_YOUR_ID", {
+     *         distinct: true,
      *         fieldKey: "firstName",
@@ -899,3 +900,3 @@ export class Sheets {
         sheetId: Flatfile.SheetId,
-        request: Flatfile.GetFieldValuesRequest = {},
+        request: Flatfile.GetFieldValuesRequest,
         requestOptions?: Sheets.RequestOptions
@@ -943,6 +944,3 @@ export class Sheets {
 
-        if (distinct != null) {
-            _queryParams["distinct"] = distinct.toString();
-        }
-
+        _queryParams["distinct"] = distinct.toString();
         if (includeCounts != null) {
@@ -966,3 +964,3 @@ export class Sheets {
diff --git a/src/api/resources/sheets/client/requests/GetFieldValuesRequest.ts b/src/api/resources/sheets/client/requests/GetFieldValuesRequest.ts
index 737bca2..eb32c9d 100644
--- a/src/api/resources/sheets/client/requests/GetFieldValuesRequest.ts
+++ b/src/api/resources/sheets/client/requests/GetFieldValuesRequest.ts
@@ -9,2 +9,3 @@ import * as Flatfile from "../../../..";
  *     {
+ *         distinct: true,
  *         fieldKey: "firstName",
@@ -32,3 +33,6 @@ export interface GetFieldValuesRequest {
     pageNumber?: Flatfile.PageNumber;
-    distinct?: Flatfile.Distinct;
+    /**
+     * Must be set to true
+     */
+    distinct: Flatfile.Distinct;
     includeCounts?: Flatfile.IncludeCounts;
diff --git a/src/api/resources/sheets/types/ListSheetsResponse.ts b/src/api/resources/sheets/types/ListSheetsResponse.ts
index 47b24a6..bda1bce 100644
--- a/src/api/resources/sheets/types/ListSheetsResponse.ts
+++ b/src/api/resources/sheets/types/ListSheetsResponse.ts
@@ -32,7 +32,2 @@ import * as Flatfile from "../../..";
  *                 },
- *                 countRecords: {
- *                     valid: 1000,
- *                     error: 0,
- *                     total: 1000
- *                 },
  *                 lockedBy: "Example0",
diff --git a/src/api/resources/sheets/types/Sheet.ts b/src/api/resources/sheets/types/Sheet.ts
index 2b97e88..be4c96a 100644
--- a/src/api/resources/sheets/types/Sheet.ts
+++ b/src/api/resources/sheets/types/Sheet.ts
@@ -33,7 +33,2 @@ import * as Flatfile from "../../..";
  *         },
- *         countRecords: {
- *             valid: 1000,
- *             error: 0,
- *             total: 1000
- *         },
  *         lockedBy: "Example0",
@@ -54,4 +49,2 @@ export interface Sheet {
     config: Flatfile.SheetConfig;
-    /** The amount of records in the Sheet. */
-    countRecords?: Flatfile.RecordCounts;
     /** The scoped namespace of the Sheet. */
@@ -66,2 +59,4 @@ export interface Sheet {
     lockedAt?: Date;
+    /** The precomputed counts of records in the Sheet (may not exist). */
+    recordCounts?: Flatfile.RecordCounts;
 }
diff --git a/src/api/resources/sheets/types/SheetConfigUpdate.ts b/src/api/resources/sheets/types/SheetConfigUpdate.ts
index 34a1f0a..3d52577 100644
--- a/src/api/resources/sheets/types/SheetConfigUpdate.ts
+++ b/src/api/resources/sheets/types/SheetConfigUpdate.ts
@@ -14,3 +14,3 @@ export interface SheetConfigUpdate {
     description?: string;
-    /** A unique identifier for your Sheet. */
+    /** A unique identifier for your Sheet. **Required when updating a Workbook.** */
     slug?: string;
diff --git a/src/api/resources/sheets/types/SheetResponse.ts b/src/api/resources/sheets/types/SheetResponse.ts
index 037d224..32cb1d3 100644
--- a/src/api/resources/sheets/types/SheetResponse.ts
+++ b/src/api/resources/sheets/types/SheetResponse.ts
@@ -32,7 +32,2 @@ import * as Flatfile from "../../..";
  *             },
- *             countRecords: {
- *                 valid: 1000,
- *                 error: 0,
- *                 total: 1000
- *             },
  *             lockedBy: "Example0",
diff --git a/src/api/resources/sheets/types/SheetUpdate.ts b/src/api/resources/sheets/types/SheetUpdate.ts
index d89b3a0..89a1d96 100644
--- a/src/api/resources/sheets/types/SheetUpdate.ts
+++ b/src/api/resources/sheets/types/SheetUpdate.ts
@@ -16,4 +16,2 @@ export interface SheetUpdate {
     config?: Flatfile.SheetConfig;
-    /** The amount of records in the Sheet. */
-    countRecords?: Flatfile.RecordCounts;
     /** The scoped namespace of the Sheet. */
diff --git a/src/api/resources/snapshots/client/Client.ts b/src/api/resources/snapshots/client/Client.ts
index ea90206..0b43579 100644
--- a/src/api/resources/snapshots/client/Client.ts
+++ b/src/api/resources/snapshots/client/Client.ts
@@ -53,3 +53,3 @@ export class Snapshots {
@@ -145,3 +145,3 @@ export class Snapshots {
@@ -238,3 +238,3 @@ export class Snapshots {
@@ -325,3 +325,3 @@ export class Snapshots {
@@ -416,3 +416,3 @@ export class Snapshots {
@@ -527,3 +527,3 @@ export class Snapshots {
diff --git a/src/api/resources/spaces/client/Client.ts b/src/api/resources/spaces/client/Client.ts
index 8b16f57..f7cd116 100644
--- a/src/api/resources/spaces/client/Client.ts
+++ b/src/api/resources/spaces/client/Client.ts
@@ -99,3 +99,3 @@ export class Spaces {
@@ -160,3 +160,3 @@ export class Spaces {
      *     await flatfile.spaces.create({
-     *         name: "My First Worbook",
+     *         name: "My First Workbook",
      *         displayOrder: 1,
@@ -181,3 +181,3 @@ export class Spaces {
@@ -268,3 +268,3 @@ export class Spaces {
@@ -351,3 +351,3 @@ export class Spaces {
@@ -447,3 +447,3 @@ export class Spaces {
@@ -537,3 +537,3 @@ export class Spaces {
@@ -624,3 +624,3 @@ export class Spaces {
@@ -707,3 +707,3 @@ export class Spaces {
diff --git a/src/api/resources/spaces/types/InternalSpaceConfigBase.ts b/src/api/resources/spaces/types/InternalSpaceConfigBase.ts
index 8157112..12d7903 100644
--- a/src/api/resources/spaces/types/InternalSpaceConfigBase.ts
+++ b/src/api/resources/spaces/types/InternalSpaceConfigBase.ts
@@ -21,2 +21,4 @@ export interface InternalSpaceConfigBase {
     archivedAt?: Date;
+    /** The ID of the App that space is associated with */
+    appId?: Flatfile.AppId;
 }
diff --git a/src/api/resources/spaces/types/Space.ts b/src/api/resources/spaces/types/Space.ts
index 23bfb60..ae76874 100644
--- a/src/api/resources/spaces/types/Space.ts
+++ b/src/api/resources/spaces/types/Space.ts
@@ -62,3 +62,3 @@ export interface Space extends Flatfile.InternalSpaceConfigBase {
     expiredAt?: Date;
-    /** Date that the last activity in the space occurred. This could include any create or update activity in the space like adding a record to a sheet, uploading a new file, or updating the configuration of a workbook. This date is only tracked to the precision of a day. */
+    /** This date marks the most recent activity within the space, tracking actions to the second. Activities include creating or updating records in a sheet, uploading files, or modifying a workbook's configuration. */
     lastActivityAt?: Date;
diff --git a/src/api/resources/spaces/types/SpaceConfig.ts b/src/api/resources/spaces/types/SpaceConfig.ts
index f6a04ef..67f6c9a 100644
--- a/src/api/resources/spaces/types/SpaceConfig.ts
+++ b/src/api/resources/spaces/types/SpaceConfig.ts
@@ -11,3 +11,3 @@ import * as Flatfile from "../../..";
  *     {
- *         name: "My First Worbook",
+ *         name: "My First Workbook",
  *         displayOrder: 1,
diff --git a/src/api/resources/users/client/Client.ts b/src/api/resources/users/client/Client.ts
index fac4b6e..79d6221 100644
--- a/src/api/resources/users/client/Client.ts
+++ b/src/api/resources/users/client/Client.ts
@@ -56,3 +56,3 @@ export class Users {
@@ -97,2 +97,76 @@ export class Users {
 
+    /**
+     * Creates and invites a new user to your account.
+     *
+     * @example
+     *     await flatfile.users.createAndInvite({
+     *         email: "john.smith@example.com",
+     *         name: "John Smith",
+     *         actorRoles: [{
+     *                 roleId: "us_rol_YOUR_ID",
+     *                 resourceId: "us_acc_YOUR_ID"
+     *             }, {
+     *                 roleId: "us_rol_YOUR_ID",
+     *                 resourceId: "us_env_YOUR_ID"
+     *             }]
+     *     })
+     */
+    public async createAndInvite(
+        request: Flatfile.UserCreateAndInviteRequest,
+        requestOptions?: Users.RequestOptions
+    ): Promise<Flatfile.UserWithRolesResponse> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                "users/invite"
+            ),
+            method: "POST",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            body: await serializers.UserCreateAndInviteRequest.jsonOrThrow(request, {
+                unrecognizedObjectKeys: "strip",
+            }),
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.UserWithRolesResponse.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            throw new errors.FlatfileError({
+                statusCode: _response.error.statusCode,
+                body: _response.error.body,
+            });
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
     /**
@@ -116,3 +190,3 @@ export class Users {
@@ -175,3 +249,3 @@ export class Users {
@@ -215,2 +289,57 @@ export class Users {
 
+    /**
+     * Deletes a user
+     */
+    public async delete(userId: Flatfile.UserId, requestOptions?: Users.RequestOptions): Promise<Flatfile.Success> {
+        const _response = await (this._options.fetcher ?? core.fetcher)({
+            url: urlJoin(
+                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
+                `users/${await serializers.UserId.jsonOrThrow(userId)}`
+            ),
+            method: "DELETE",
+            headers: {
+                Authorization: await this._getAuthorizationHeader(),
+            },
+            contentType: "application/json",
+            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
+            maxRetries: requestOptions?.maxRetries,
+        });
+        if (_response.ok) {
+            return await serializers.Success.parseOrThrow(_response.body, {
+                unrecognizedObjectKeys: "passthrough",
+                allowUnrecognizedUnionMembers: true,
+                allowUnrecognizedEnumValues: true,
+                skipValidation: true,
+                breadcrumbsPrefix: ["response"],
+            });
+        }
+
+        if (_response.error.reason === "status-code") {
+            throw new errors.FlatfileError({
+                statusCode: _response.error.statusCode,
+                body: _response.error.body,
+            });
+        }
+
+        switch (_response.error.reason) {
+            case "non-json":
+                throw new errors.FlatfileError({
+                    statusCode: _response.error.statusCode,
+                    body: _response.error.rawBody,
+                });
+            case "timeout":
+                throw new errors.FlatfileTimeoutError();
+            case "unknown":
+                throw new errors.FlatfileError({
+                    message: _response.error.errorMessage,
+                });
+        }
+    }
+
     /**
@@ -236,3 +365,3 @@ export class Users {
@@ -331,3 +460,3 @@ export class Users {
@@ -429,3 +558,3 @@ export class Users {
@@ -532,3 +661,3 @@ export class Users {
@@ -595,3 +724,3 @@ export class Users {
@@ -654,3 +783,3 @@ export class Users {
diff --git a/src/api/resources/users/client/requests/UpdateUserRequest.ts b/src/api/resources/users/client/requests/UpdateUserRequest.ts
index d815834..30e54f2 100644
--- a/src/api/resources/users/client/requests/UpdateUserRequest.ts
+++ b/src/api/resources/users/client/requests/UpdateUserRequest.ts
@@ -6,2 +6,3 @@ export interface UpdateUserRequest {
     name?: string;
+    dashboard?: number;
 }
diff --git a/src/api/resources/users/types/ListUsersResponse.ts b/src/api/resources/users/types/ListUsersResponse.ts
index 51ec119..d90952b 100644
--- a/src/api/resources/users/types/ListUsersResponse.ts
+++ b/src/api/resources/users/types/ListUsersResponse.ts
@@ -18,3 +18,5 @@ import * as Flatfile from "../../..";
  *                 createdAt: new Date("2023-10-30T16:59:45.735Z"),
- *                 updatedAt: new Date("2023-10-30T16:59:45.735Z")
+ *                 updatedAt: new Date("2023-10-30T16:59:45.735Z"),
+ *                 lastSeenAt: new Date("2023-10-30T16:59:45.735Z"),
+ *                 dashboard: 2
  *             }]
diff --git a/src/api/resources/users/types/User.ts b/src/api/resources/users/types/User.ts
index 996f272..469b501 100644
--- a/src/api/resources/users/types/User.ts
+++ b/src/api/resources/users/types/User.ts
@@ -19,3 +19,5 @@ import * as Flatfile from "../../..";
  *         createdAt: new Date("2023-10-30T16:59:45.735Z"),
- *         updatedAt: new Date("2023-10-30T16:59:45.735Z")
+ *         updatedAt: new Date("2023-10-30T16:59:45.735Z"),
+ *         lastSeenAt: new Date("2023-10-30T16:59:45.735Z"),
+ *         dashboard: 2
  *     }
@@ -29,2 +31,4 @@ export interface User extends Flatfile.UserConfig {
     updatedAt: Date;
+    lastSeenAt?: Date;
+    dashboard?: number;
 }
diff --git a/src/api/resources/users/types/UserCreateAndInviteRequest.ts b/src/api/resources/users/types/UserCreateAndInviteRequest.ts
new file mode 100644
index 0000000..9603ae1
--- /dev/null
+++ b/src/api/resources/users/types/UserCreateAndInviteRequest.ts
@@ -0,0 +1,27 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+/**
+ * Properties used to create a new user
+ *
+ * @example
+ *     {
+ *         email: "john.smith@example.com",
+ *         name: "John Smith",
+ *         actorRoles: [{
+ *                 roleId: "us_rol_YOUR_ID",
+ *                 resourceId: "us_acc_YOUR_ID"
+ *             }, {
+ *                 roleId: "us_rol_YOUR_ID",
+ *                 resourceId: "us_env_YOUR_ID"
+ *             }]
+ *     }
+ */
+export interface UserCreateAndInviteRequest {
+    email: string;
+    name: string;
+    actorRoles: Flatfile.AssignActorRoleRequest[];
+}
diff --git a/src/api/resources/users/types/UserResponse.ts b/src/api/resources/users/types/UserResponse.ts
index 7045914..3ccc810 100644
--- a/src/api/resources/users/types/UserResponse.ts
+++ b/src/api/resources/users/types/UserResponse.ts
@@ -18,3 +18,5 @@ import * as Flatfile from "../../..";
  *             createdAt: new Date("2023-10-30T16:59:45.735Z"),
- *             updatedAt: new Date("2023-10-30T16:59:45.735Z")
+ *             updatedAt: new Date("2023-10-30T16:59:45.735Z"),
+ *             lastSeenAt: new Date("2023-10-30T16:59:45.735Z"),
+ *             dashboard: 2
  *         }
diff --git a/src/api/resources/users/types/UserWithRoles.ts b/src/api/resources/users/types/UserWithRoles.ts
new file mode 100644
index 0000000..a9118a0
--- /dev/null
+++ b/src/api/resources/users/types/UserWithRoles.ts
@@ -0,0 +1,40 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+/**
+ * @example
+ *     {
+ *         id: "us_usr_YOUR_ID",
+ *         email: "john.smith@example.com",
+ *         name: "john.smith",
+ *         accountId: "us_acc_YOUR_ID",
+ *         idp: "FRONTEGG",
+ *         idpRef: "ab1cf38e-e617-4547-b37d-376a7ac9e554",
+ *         metadata: {},
+ *         createdAt: new Date("2023-10-30T16:59:45.735Z"),
+ *         updatedAt: new Date("2023-10-30T16:59:45.735Z"),
+ *         lastSeenAt: new Date("2023-10-30T16:59:45.735Z"),
+ *         dashboard: 2,
+ *         actorRoles: [{
+ *                 id: "us_acr_YOUR_ID",
+ *                 roleId: "us_rol_YOUR_ID",
+ *                 actorId: "us_usr_YOUR_ID",
+ *                 resourceId: "us_acc_YOUR_ID",
+ *                 createdAt: new Date("2021-01-01T00:00:00.000Z"),
+ *                 updatedAt: new Date("2021-01-01T00:00:00.000Z")
+ *             }, {
+ *                 id: "us_acr_YOUR_ID",
+ *                 roleId: "us_rol_YOUR_ID",
+ *                 actorId: "us_ag_YOUR_ID",
+ *                 resourceId: "us_env_YOUR_ID",
+ *                 createdAt: new Date("2021-01-01T00:00:00.000Z"),
+ *                 updatedAt: new Date("2021-01-01T00:00:00.000Z")
+ *             }]
+ *     }
+ */
+export interface UserWithRoles extends Flatfile.User {
+    actorRoles: Flatfile.ActorRoleResponse[];
+}
diff --git a/src/api/resources/users/types/UserWithRolesResponse.ts b/src/api/resources/users/types/UserWithRolesResponse.ts
new file mode 100644
index 0000000..b780d45
--- /dev/null
+++ b/src/api/resources/users/types/UserWithRolesResponse.ts
@@ -0,0 +1,42 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as Flatfile from "../../..";
+
+/**
+ * @example
+ *     {
+ *         data: {
+ *             id: "us_usr_YOUR_ID",
+ *             email: "john.smith@example.com",
+ *             name: "john.smith",
+ *             accountId: "us_acc_YOUR_ID",
+ *             idp: "FRONTEGG",
+ *             idpRef: "ab1cf38e-e617-4547-b37d-376a7ac9e554",
+ *             metadata: {},
+ *             createdAt: new Date("2023-10-30T16:59:45.735Z"),
+ *             updatedAt: new Date("2023-10-30T16:59:45.735Z"),
+ *             lastSeenAt: new Date("2023-10-30T16:59:45.735Z"),
+ *             dashboard: 2,
+ *             actorRoles: [{
+ *                     id: "us_acr_YOUR_ID",
+ *                     roleId: "us_rol_YOUR_ID",
+ *                     actorId: "us_usr_YOUR_ID",
+ *                     resourceId: "us_acc_YOUR_ID",
+ *                     createdAt: new Date("2021-01-01T00:00:00.000Z"),
+ *                     updatedAt: new Date("2021-01-01T00:00:00.000Z")
+ *                 }, {
+ *                     id: "us_acr_YOUR_ID",
+ *                     roleId: "us_rol_YOUR_ID",
+ *                     actorId: "us_ag_YOUR_ID",
+ *                     resourceId: "us_env_YOUR_ID",
+ *                     createdAt: new Date("2021-01-01T00:00:00.000Z"),
+ *                     updatedAt: new Date("2021-01-01T00:00:00.000Z")
+ *                 }]
+ *         }
+ *     }
+ */
+export interface UserWithRolesResponse {
+    data: Flatfile.UserWithRoles;
+}
diff --git a/src/api/resources/users/types/index.ts b/src/api/resources/users/types/index.ts
index 7bd7d69..8e29781 100644
--- a/src/api/resources/users/types/index.ts
+++ b/src/api/resources/users/types/index.ts
@@ -2,4 +2,7 @@ export * from "./ListUsersResponse";
 export * from "./UserResponse";
+export * from "./UserWithRolesResponse";
+export * from "./UserWithRoles";
 export * from "./User";
 export * from "./UserConfig";
+export * from "./UserCreateAndInviteRequest";
 export * from "./ListApiTokensResponse";
diff --git a/src/api/resources/versions/client/Client.ts b/src/api/resources/versions/client/Client.ts
index 7ba85ef..2b50d28 100644
--- a/src/api/resources/versions/client/Client.ts
+++ b/src/api/resources/versions/client/Client.ts
@@ -42,3 +42,3 @@ export class Versions {
diff --git a/src/api/resources/workbooks/client/Client.ts b/src/api/resources/workbooks/client/Client.ts
index 7bb18e0..19d269e 100644
--- a/src/api/resources/workbooks/client/Client.ts
+++ b/src/api/resources/workbooks/client/Client.ts
@@ -33,4 +33,3 @@ export class Workbooks {
      *     await flatfile.workbooks.list({
-     *         spaceId: "us_sp_YOUR_ID",
-     *         includeCounts: true
+     *         spaceId: "us_sp_YOUR_ID"
      *     })
@@ -62,3 +61,3 @@ export class Workbooks {
@@ -169,3 +168,3 @@ export class Workbooks {
@@ -246,3 +245,3 @@ export class Workbooks {
@@ -332,3 +331,3 @@ export class Workbooks {
@@ -429,3 +428,3 @@ export class Workbooks {
@@ -497,3 +496,3 @@ export class Workbooks {
      * @example
-     *     await flatfile.workbooks.getWorkbookCommits("us_wb_YOUR_ID", {})
+     *     await flatfile.workbooks.getWorkbookCommits("us_wb_YOUR_ID")
      */
@@ -521,3 +520,3 @@ export class Workbooks {
@@ -582,3 +581,3 @@ export class Workbooks {
diff --git a/src/api/resources/workbooks/client/requests/ListWorkbooksRequest.ts b/src/api/resources/workbooks/client/requests/ListWorkbooksRequest.ts
index 331f646..6e28163 100644
--- a/src/api/resources/workbooks/client/requests/ListWorkbooksRequest.ts
+++ b/src/api/resources/workbooks/client/requests/ListWorkbooksRequest.ts
@@ -9,4 +9,3 @@ import * as Flatfile from "../../../..";
  *     {
- *         spaceId: "us_sp_YOUR_ID",
- *         includeCounts: true
+ *         spaceId: "us_sp_YOUR_ID"
  *     }
@@ -19,3 +18,3 @@ export interface ListWorkbooksRequest {
     /**
-     * Include counts for the workbook
+     * Include counts for the workbook. **DEPRECATED** Counts will return 0s. Use GET /sheets/:sheetId/counts
      */
diff --git a/src/api/resources/workbooks/types/ListWorkbooksResponse.ts b/src/api/resources/workbooks/types/ListWorkbooksResponse.ts
index 34f96aa..99698d2 100644
--- a/src/api/resources/workbooks/types/ListWorkbooksResponse.ts
+++ b/src/api/resources/workbooks/types/ListWorkbooksResponse.ts
@@ -37,7 +37,2 @@ import * as Flatfile from "../../..";
  *                         },
- *                         countRecords: {
- *                             valid: 1000,
- *                             error: 0,
- *                             total: 1000
- *                         },
  *                         lockedBy: "Example0",
diff --git a/src/api/resources/workbooks/types/Workbook.ts b/src/api/resources/workbooks/types/Workbook.ts
index dea2d71..d1c132e 100644
--- a/src/api/resources/workbooks/types/Workbook.ts
+++ b/src/api/resources/workbooks/types/Workbook.ts
@@ -38,7 +38,2 @@ import * as Flatfile from "../../..";
  *                 },
- *                 countRecords: {
- *                     valid: 1000,
- *                     error: 0,
- *                     total: 1000
- *                 },
  *                 lockedBy: "Example0",
diff --git a/src/api/resources/workbooks/types/WorkbookResponse.ts b/src/api/resources/workbooks/types/WorkbookResponse.ts
index 11e3afa..c329988 100644
--- a/src/api/resources/workbooks/types/WorkbookResponse.ts
+++ b/src/api/resources/workbooks/types/WorkbookResponse.ts
@@ -37,7 +37,2 @@ import * as Flatfile from "../../..";
  *                     },
- *                     countRecords: {
- *                         valid: 1000,
- *                         error: 0,
- *                         total: 1000
- *                     },
  *                     lockedBy: "Example0",
diff --git a/src/core/fetcher/Fetcher.ts b/src/core/fetcher/Fetcher.ts
index 5348ac9..c08e0fd 100644
--- a/src/core/fetcher/Fetcher.ts
+++ b/src/core/fetcher/Fetcher.ts
@@ -82,3 +82,9 @@ async function fetcherImpl<R = unknown>(args: Fetcher.Args): Promise<APIResponse
     const fetchFn =
-        RUNTIME.type === "node" ? require("node-fetch") : typeof fetch == "function" ? fetch : require("node-fetch");
+        RUNTIME.type === "node"
+            ? // `.default` is required due to this issue:
+              // https://github.com/node-fetch/node-fetch/issues/450#issuecomment-387045223
+              require("node-fetch").default
+            : typeof fetch == "function"
+            ? fetch
+            : require("node-fetch").default;
 
diff --git a/src/core/schemas/builders/object/object.ts b/src/core/schemas/builders/object/object.ts
index 4abadfb..6427678 100644
--- a/src/core/schemas/builders/object/object.ts
+++ b/src/core/schemas/builders/object/object.ts
@@ -62,3 +62,3 @@ export function object<ParsedKeys extends string, T extends PropertySchemas<Pars
 
-                if (await isSchemaRequired(valueSchema)) {
+                if (isSchemaRequired(valueSchema)) {
                     requiredKeys.push(rawKey);
@@ -98,3 +98,3 @@ export function object<ParsedKeys extends string, T extends PropertySchemas<Pars
 
-                if (await isSchemaRequired(valueSchema)) {
+                if (isSchemaRequired(valueSchema)) {
                     requiredKeys.push(parsedKey as string);
@@ -319,8 +319,8 @@ async function validateAndTransformExtendedObject<PreTransformedExtension, Trans
 
-async function isSchemaRequired(schema: Schema<any, any>): Promise<boolean> {
-    return !(await isSchemaOptional(schema));
+function isSchemaRequired(schema: Schema<any, any>): boolean {
+    return !isSchemaOptional(schema);
 }
 
-async function isSchemaOptional(schema: Schema<any, any>): Promise<boolean> {
-    switch (await schema.getType()) {
+function isSchemaOptional(schema: Schema<any, any>): boolean {
+    switch (schema.getType()) {
         case SchemaType.ANY:
diff --git a/src/serialization/resources/accounts/index.ts b/src/serialization/resources/accounts/index.ts
new file mode 100644
index 0000000..eea524d
--- /dev/null
+++ b/src/serialization/resources/accounts/index.ts
@@ -0,0 +1 @@
+export * from "./types";
diff --git a/src/serialization/resources/accounts/types/Account.ts b/src/serialization/resources/accounts/types/Account.ts
new file mode 100644
index 0000000..60ddb3c
--- /dev/null
+++ b/src/serialization/resources/accounts/types/Account.ts
@@ -0,0 +1,44 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+import { AccountId } from "../../commons/types/AccountId";
+import { AppId } from "../../commons/types/AppId";
+
+export const Account: core.serialization.ObjectSchema<serializers.Account.Raw, Flatfile.Account> =
+    core.serialization.object({
+        id: AccountId,
+        name: core.serialization.string(),
+        subdomain: core.serialization.string().optional(),
+        vanityDomainDashboard: core.serialization.string().optional(),
+        vanityDomainSpaces: core.serialization.string().optional(),
+        embeddedDomainWhitelist: core.serialization.list(core.serialization.string()).optional(),
+        customFromEmail: core.serialization.string().optional(),
+        stripeCustomerId: core.serialization.string().optional(),
+        metadata: core.serialization.record(core.serialization.string(), core.serialization.any()),
+        createdAt: core.serialization.date(),
+        updatedAt: core.serialization.date(),
+        defaultAppId: AppId.optional(),
+        dashboard: core.serialization.number().optional(),
+    });
+
+export declare namespace Account {
+    interface Raw {
+        id: AccountId.Raw;
+        name: string;
+        subdomain?: string | null;
+        vanityDomainDashboard?: string | null;
+        vanityDomainSpaces?: string | null;
+        embeddedDomainWhitelist?: string[] | null;
+        customFromEmail?: string | null;
+        stripeCustomerId?: string | null;
+        metadata: Record<string, any>;
+        createdAt: string;
+        updatedAt: string;
+        defaultAppId?: AppId.Raw | null;
+        dashboard?: number | null;
+    }
+}
diff --git a/src/serialization/resources/accounts/types/AccountPatch.ts b/src/serialization/resources/accounts/types/AccountPatch.ts
new file mode 100644
index 0000000..303acb8
--- /dev/null
+++ b/src/serialization/resources/accounts/types/AccountPatch.ts
@@ -0,0 +1,19 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+import { AppId } from "../../commons/types/AppId";
+
+export const AccountPatch: core.serialization.ObjectSchema<serializers.AccountPatch.Raw, Flatfile.AccountPatch> =
+    core.serialization.object({
+        defaultAppId: AppId,
+    });
+
+export declare namespace AccountPatch {
+    interface Raw {
+        defaultAppId: AppId.Raw;
+    }
+}
diff --git a/src/serialization/resources/accounts/types/AccountResponse.ts b/src/serialization/resources/accounts/types/AccountResponse.ts
new file mode 100644
index 0000000..b47563f
--- /dev/null
+++ b/src/serialization/resources/accounts/types/AccountResponse.ts
@@ -0,0 +1,21 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+import { Account } from "./Account";
+
+export const AccountResponse: core.serialization.ObjectSchema<
+    serializers.AccountResponse.Raw,
+    Flatfile.AccountResponse
+> = core.serialization.object({
+    data: Account,
+});
+
+export declare namespace AccountResponse {
+    interface Raw {
+        data: Account.Raw;
+    }
+}
diff --git a/src/serialization/resources/accounts/types/index.ts b/src/serialization/resources/accounts/types/index.ts
new file mode 100644
index 0000000..0f9ca2c
--- /dev/null
+++ b/src/serialization/resources/accounts/types/index.ts
@@ -0,0 +1,3 @@
+export * from "./AccountResponse";
+export * from "./Account";
+export * from "./AccountPatch";
diff --git a/src/serialization/resources/agents/types/Agent.ts b/src/serialization/resources/agents/types/Agent.ts
index a9ef4c1..bbd9bfd 100644
--- a/src/serialization/resources/agents/types/Agent.ts
+++ b/src/serialization/resources/agents/types/Agent.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { AgentId } from "../../commons/types/AgentId";
+import { AgentConfig } from "./AgentConfig";
 
@@ -10,9 +12,9 @@ export const Agent: core.serialization.ObjectSchema<serializers.Agent.Raw, Flatf
     .object({
-        id: core.serialization.lazy(async () => (await import("../../..")).AgentId),
+        id: AgentId,
     })
-    .extend(core.serialization.lazyObject(async () => (await import("../../..")).AgentConfig));
+    .extend(AgentConfig);
 
 export declare namespace Agent {
-    interface Raw extends serializers.AgentConfig.Raw {
-        id: serializers.AgentId.Raw;
+    interface Raw extends AgentConfig.Raw {
+        id: AgentId.Raw;
     }
diff --git a/src/serialization/resources/agents/types/AgentConfig.ts b/src/serialization/resources/agents/types/AgentConfig.ts
index 38dce95..a9a2ded 100644
--- a/src/serialization/resources/agents/types/AgentConfig.ts
+++ b/src/serialization/resources/agents/types/AgentConfig.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { EventTopic } from "../../events/types/EventTopic";
+import { Compiler } from "./Compiler";
 
@@ -10,6 +12,4 @@ export const AgentConfig: core.serialization.ObjectSchema<serializers.AgentConfi
     core.serialization.object({
-        topics: core.serialization
-            .list(core.serialization.lazy(async () => (await import("../../..")).EventTopic))
-            .optional(),
-        compiler: core.serialization.lazy(async () => (await import("../../..")).Compiler).optional(),
+        topics: core.serialization.list(EventTopic).optional(),
+        compiler: Compiler.optional(),
         source: core.serialization.string().optional(),
@@ -20,4 +20,4 @@ export declare namespace AgentConfig {
     interface Raw {
-        topics?: serializers.EventTopic.Raw[] | null;
-        compiler?: serializers.Compiler.Raw | null;
+        topics?: EventTopic.Raw[] | null;
+        compiler?: Compiler.Raw | null;
         source?: string | null;
diff --git a/src/serialization/resources/agents/types/AgentLog.ts b/src/serialization/resources/agents/types/AgentLog.ts
index 7ca1b75..227c9b6 100644
--- a/src/serialization/resources/agents/types/AgentLog.ts
+++ b/src/serialization/resources/agents/types/AgentLog.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { EventId } from "../../commons/types/EventId";
 
@@ -10,3 +11,3 @@ export const AgentLog: core.serialization.ObjectSchema<serializers.AgentLog.Raw,
     core.serialization.object({
-        eventId: core.serialization.lazy(async () => (await import("../../..")).EventId),
+        eventId: EventId,
         success: core.serialization.boolean(),
@@ -19,3 +20,3 @@ export declare namespace AgentLog {
     interface Raw {
-        eventId: serializers.EventId.Raw;
+        eventId: EventId.Raw;
         success: boolean;
diff --git a/src/serialization/resources/agents/types/AgentResponse.ts b/src/serialization/resources/agents/types/AgentResponse.ts
index f301e76..30204e5 100644
--- a/src/serialization/resources/agents/types/AgentResponse.ts
+++ b/src/serialization/resources/agents/types/AgentResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Agent } from "./Agent";
 
@@ -10,3 +11,3 @@ export const AgentResponse: core.serialization.ObjectSchema<serializers.AgentRes
     core.serialization.object({
-        data: core.serialization.lazyObject(async () => (await import("../../..")).Agent).optional(),
+        data: Agent.optional(),
     });
@@ -15,3 +16,3 @@ export declare namespace AgentResponse {
     interface Raw {
-        data?: serializers.Agent.Raw | null;
+        data?: Agent.Raw | null;
     }
diff --git a/src/serialization/resources/agents/types/DetailedAgentLog.ts b/src/serialization/resources/agents/types/DetailedAgentLog.ts
index 5e6e060..483f5aa 100644
--- a/src/serialization/resources/agents/types/DetailedAgentLog.ts
+++ b/src/serialization/resources/agents/types/DetailedAgentLog.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { EventId } from "../../commons/types/EventId";
 
@@ -12,3 +13,3 @@ export const DetailedAgentLog: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    eventId: core.serialization.lazy(async () => (await import("../../..")).EventId),
+    eventId: EventId,
     success: core.serialization.boolean(),
@@ -24,3 +25,3 @@ export declare namespace DetailedAgentLog {
     interface Raw {
-        eventId: serializers.EventId.Raw;
+        eventId: EventId.Raw;
         success: boolean;
diff --git a/src/serialization/resources/agents/types/Execution.ts b/src/serialization/resources/agents/types/Execution.ts
index ce7585f..af424f7 100644
--- a/src/serialization/resources/agents/types/Execution.ts
+++ b/src/serialization/resources/agents/types/Execution.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { EventId } from "../../commons/types/EventId";
 
@@ -10,3 +11,3 @@ export const Execution: core.serialization.ObjectSchema<serializers.Execution.Ra
     core.serialization.object({
-        eventId: core.serialization.lazy(async () => (await import("../../..")).EventId),
+        eventId: EventId,
         success: core.serialization.boolean(),
@@ -20,3 +21,3 @@ export declare namespace Execution {
     interface Raw {
-        eventId: serializers.EventId.Raw;
+        eventId: EventId.Raw;
         success: boolean;
diff --git a/src/serialization/resources/agents/types/GetAgentLogsResponse.ts b/src/serialization/resources/agents/types/GetAgentLogsResponse.ts
index 7db2427..6d5d01b 100644
--- a/src/serialization/resources/agents/types/GetAgentLogsResponse.ts
+++ b/src/serialization/resources/agents/types/GetAgentLogsResponse.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Pagination } from "../../commons/types/Pagination";
+import { AgentLog } from "./AgentLog";
 
@@ -12,6 +14,4 @@ export const GetAgentLogsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    pagination: core.serialization.lazyObject(async () => (await import("../../..")).Pagination).optional(),
-    data: core.serialization
-        .list(core.serialization.lazyObject(async () => (await import("../../..")).AgentLog))
-        .optional(),
+    pagination: Pagination.optional(),
+    data: core.serialization.list(AgentLog).optional(),
 });
@@ -20,4 +20,4 @@ export declare namespace GetAgentLogsResponse {
     interface Raw {
-        pagination?: serializers.Pagination.Raw | null;
-        data?: serializers.AgentLog.Raw[] | null;
+        pagination?: Pagination.Raw | null;
+        data?: AgentLog.Raw[] | null;
     }
diff --git a/src/serialization/resources/agents/types/GetDetailedAgentLogResponse.ts b/src/serialization/resources/agents/types/GetDetailedAgentLogResponse.ts
index 6286bee..19d38b2 100644
--- a/src/serialization/resources/agents/types/GetDetailedAgentLogResponse.ts
+++ b/src/serialization/resources/agents/types/GetDetailedAgentLogResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { DetailedAgentLog } from "./DetailedAgentLog";
 
@@ -12,3 +13,3 @@ export const GetDetailedAgentLogResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.lazyObject(async () => (await import("../../..")).DetailedAgentLog),
+    data: DetailedAgentLog,
 });
@@ -17,3 +18,3 @@ export declare namespace GetDetailedAgentLogResponse {
     interface Raw {
-        data: serializers.DetailedAgentLog.Raw;
+        data: DetailedAgentLog.Raw;
     }
diff --git a/src/serialization/resources/agents/types/GetDetailedAgentLogsResponse.ts b/src/serialization/resources/agents/types/GetDetailedAgentLogsResponse.ts
index ca07416..69924a0 100644
--- a/src/serialization/resources/agents/types/GetDetailedAgentLogsResponse.ts
+++ b/src/serialization/resources/agents/types/GetDetailedAgentLogsResponse.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Pagination } from "../../commons/types/Pagination";
+import { DetailedAgentLog } from "./DetailedAgentLog";
 
@@ -12,6 +14,4 @@ export const GetDetailedAgentLogsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    pagination: core.serialization.lazyObject(async () => (await import("../../..")).Pagination).optional(),
-    data: core.serialization.list(
-        core.serialization.lazyObject(async () => (await import("../../..")).DetailedAgentLog)
-    ),
+    pagination: Pagination.optional(),
+    data: core.serialization.list(DetailedAgentLog),
 });
@@ -20,4 +20,4 @@ export declare namespace GetDetailedAgentLogsResponse {
     interface Raw {
-        pagination?: serializers.Pagination.Raw | null;
-        data: serializers.DetailedAgentLog.Raw[];
+        pagination?: Pagination.Raw | null;
+        data: DetailedAgentLog.Raw[];
     }
diff --git a/src/serialization/resources/agents/types/GetExecutionsResponse.ts b/src/serialization/resources/agents/types/GetExecutionsResponse.ts
index e51eccd..76e69a4 100644
--- a/src/serialization/resources/agents/types/GetExecutionsResponse.ts
+++ b/src/serialization/resources/agents/types/GetExecutionsResponse.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Pagination } from "../../commons/types/Pagination";
+import { Execution } from "./Execution";
 
@@ -12,4 +14,4 @@ export const GetExecutionsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    pagination: core.serialization.lazyObject(async () => (await import("../../..")).Pagination).optional(),
-    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Execution)),
+    pagination: Pagination.optional(),
+    data: core.serialization.list(Execution),
 });
@@ -18,4 +20,4 @@ export declare namespace GetExecutionsResponse {
     interface Raw {
-        pagination?: serializers.Pagination.Raw | null;
-        data: serializers.Execution.Raw[];
+        pagination?: Pagination.Raw | null;
+        data: Execution.Raw[];
     }
diff --git a/src/serialization/resources/agents/types/ListAgentsResponse.ts b/src/serialization/resources/agents/types/ListAgentsResponse.ts
index de02f67..911337b 100644
--- a/src/serialization/resources/agents/types/ListAgentsResponse.ts
+++ b/src/serialization/resources/agents/types/ListAgentsResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Agent } from "./Agent";
 
@@ -12,5 +13,3 @@ export const ListAgentsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization
-        .list(core.serialization.lazyObject(async () => (await import("../../..")).Agent))
-        .optional(),
+    data: core.serialization.list(Agent).optional(),
 });
@@ -19,3 +18,3 @@ export declare namespace ListAgentsResponse {
     interface Raw {
-        data?: serializers.Agent.Raw[] | null;
+        data?: Agent.Raw[] | null;
     }
diff --git a/src/serialization/resources/apps/types/App.ts b/src/serialization/resources/apps/types/App.ts
index baa0e8b..42dff50 100644
--- a/src/serialization/resources/apps/types/App.ts
+++ b/src/serialization/resources/apps/types/App.ts
@@ -7,8 +7,10 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { AppId } from "../../commons/types/AppId";
+import { AppType } from "./AppType";
 
 export const App: core.serialization.ObjectSchema<serializers.App.Raw, Flatfile.App> = core.serialization.object({
-    id: core.serialization.lazy(async () => (await import("../../..")).AppId),
+    id: AppId,
     name: core.serialization.string(),
     namespace: core.serialization.string(),
-    type: core.serialization.lazy(async () => (await import("../../..")).AppType),
+    type: AppType,
     entity: core.serialization.string(),
@@ -17,2 +19,3 @@ export const App: core.serialization.ObjectSchema<serializers.App.Raw, Flatfile.
     metadata: core.serialization.any(),
+    environmentFilters: core.serialization.any(),
     createdAt: core.serialization.date(),
@@ -25,6 +28,6 @@ export declare namespace App {
     interface Raw {
-        id: serializers.AppId.Raw;
+        id: AppId.Raw;
         name: string;
         namespace: string;
-        type: serializers.AppType.Raw;
+        type: AppType.Raw;
         entity: string;
@@ -33,2 +36,3 @@ export declare namespace App {
         metadata?: any;
+        environmentFilters?: any;
         createdAt: string;
diff --git a/src/serialization/resources/apps/types/AppCreate.ts b/src/serialization/resources/apps/types/AppCreate.ts
index 556c270..56c3a52 100644
--- a/src/serialization/resources/apps/types/AppCreate.ts
+++ b/src/serialization/resources/apps/types/AppCreate.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { AppType } from "./AppType";
 
@@ -12,3 +13,3 @@ export const AppCreate: core.serialization.ObjectSchema<serializers.AppCreate.Ra
         namespace: core.serialization.string(),
-        type: core.serialization.lazy(async () => (await import("../../..")).AppType),
+        type: AppType,
         entity: core.serialization.string().optional(),
@@ -17,2 +18,3 @@ export const AppCreate: core.serialization.ObjectSchema<serializers.AppCreate.Ra
         metadata: core.serialization.any().optional(),
+        environmentFilters: core.serialization.any().optional(),
     });
@@ -23,3 +25,3 @@ export declare namespace AppCreate {
         namespace: string;
-        type: serializers.AppType.Raw;
+        type: AppType.Raw;
         entity?: string | null;
@@ -28,2 +30,3 @@ export declare namespace AppCreate {
         metadata?: any | null;
+        environmentFilters?: any | null;
     }
diff --git a/src/serialization/resources/apps/types/AppPatch.ts b/src/serialization/resources/apps/types/AppPatch.ts
index f81114f..34c7942 100644
--- a/src/serialization/resources/apps/types/AppPatch.ts
+++ b/src/serialization/resources/apps/types/AppPatch.ts
@@ -16,2 +16,3 @@ export const AppPatch: core.serialization.ObjectSchema<serializers.AppPatch.Raw,
         metadata: core.serialization.any().optional(),
+        environmentFilters: core.serialization.any().optional(),
         activatedAt: core.serialization.date().optional(),
@@ -27,2 +28,3 @@ export declare namespace AppPatch {
         metadata?: any | null;
+        environmentFilters?: any | null;
         activatedAt?: string | null;
diff --git a/src/serialization/resources/apps/types/AppResponse.ts b/src/serialization/resources/apps/types/AppResponse.ts
index 6f3b608..b368af1 100644
--- a/src/serialization/resources/apps/types/AppResponse.ts
+++ b/src/serialization/resources/apps/types/AppResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { App } from "./App";
 
@@ -10,3 +11,3 @@ export const AppResponse: core.serialization.ObjectSchema<serializers.AppRespons
     core.serialization.object({
-        data: core.serialization.lazyObject(async () => (await import("../../..")).App),
+        data: App,
     });
@@ -15,3 +16,3 @@ export declare namespace AppResponse {
     interface Raw {
-        data: serializers.App.Raw;
+        data: App.Raw;
     }
diff --git a/src/serialization/resources/apps/types/AppsResponse.ts b/src/serialization/resources/apps/types/AppsResponse.ts
index fb686c0..e778d68 100644
--- a/src/serialization/resources/apps/types/AppsResponse.ts
+++ b/src/serialization/resources/apps/types/AppsResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { App } from "./App";
 
@@ -10,3 +11,3 @@ export const AppsResponse: core.serialization.ObjectSchema<serializers.AppsRespo
     core.serialization.object({
-        data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).App)),
+        data: core.serialization.list(App),
     });
@@ -15,3 +16,3 @@ export declare namespace AppsResponse {
     interface Raw {
-        data: serializers.App.Raw[];
+        data: App.Raw[];
     }
diff --git a/src/serialization/resources/assistant/index.ts b/src/serialization/resources/assistant/index.ts
new file mode 100644
index 0000000..eea524d
--- /dev/null
+++ b/src/serialization/resources/assistant/index.ts
@@ -0,0 +1 @@
+export * from "./types";
diff --git a/src/serialization/resources/assistant/types/Prompt.ts b/src/serialization/resources/assistant/types/Prompt.ts
new file mode 100644
index 0000000..970bff8
--- /dev/null
+++ b/src/serialization/resources/assistant/types/Prompt.ts
@@ -0,0 +1,32 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+import { PromptId } from "../../commons/types/PromptId";
+import { AccountId } from "../../commons/types/AccountId";
+
+export const Prompt: core.serialization.ObjectSchema<serializers.Prompt.Raw, Flatfile.Prompt> =
+    core.serialization.object({
+        id: PromptId,
+        createdById: core.serialization.string(),
+        accountId: AccountId,
+        prompt: core.serialization.string(),
+        createdAt: core.serialization.date(),
+        updatedAt: core.serialization.date(),
+        deletedAt: core.serialization.date().optional(),
+    });
+
+export declare namespace Prompt {
+    interface Raw {
+        id: PromptId.Raw;
+        createdById: string;
+        accountId: AccountId.Raw;
+        prompt: string;
+        createdAt: string;
+        updatedAt: string;
+        deletedAt?: string | null;
+    }
+}
diff --git a/src/serialization/resources/assistant/types/PromptCreate.ts b/src/serialization/resources/assistant/types/PromptCreate.ts
new file mode 100644
index 0000000..38950d0
--- /dev/null
+++ b/src/serialization/resources/assistant/types/PromptCreate.ts
@@ -0,0 +1,18 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+
+export const PromptCreate: core.serialization.ObjectSchema<serializers.PromptCreate.Raw, Flatfile.PromptCreate> =
+    core.serialization.object({
+        prompt: core.serialization.string(),
+    });
+
+export declare namespace PromptCreate {
+    interface Raw {
+        prompt: string;
+    }
+}
diff --git a/src/serialization/resources/assistant/types/PromptPatch.ts b/src/serialization/resources/assistant/types/PromptPatch.ts
new file mode 100644
index 0000000..2b1ede6
--- /dev/null
+++ b/src/serialization/resources/assistant/types/PromptPatch.ts
@@ -0,0 +1,18 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+
+export const PromptPatch: core.serialization.ObjectSchema<serializers.PromptPatch.Raw, Flatfile.PromptPatch> =
+    core.serialization.object({
+        prompt: core.serialization.string().optional(),
+    });
+
+export declare namespace PromptPatch {
+    interface Raw {
+        prompt?: string | null;
+    }
+}
diff --git a/src/serialization/resources/assistant/types/PromptResponse.ts b/src/serialization/resources/assistant/types/PromptResponse.ts
new file mode 100644
index 0000000..ae87c84
--- /dev/null
+++ b/src/serialization/resources/assistant/types/PromptResponse.ts
@@ -0,0 +1,19 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+import { Prompt } from "./Prompt";
+
+export const PromptResponse: core.serialization.ObjectSchema<serializers.PromptResponse.Raw, Flatfile.PromptResponse> =
+    core.serialization.object({
+        data: Prompt,
+    });
+
+export declare namespace PromptResponse {
+    interface Raw {
+        data: Prompt.Raw;
+    }
+}
diff --git a/src/serialization/resources/assistant/types/PromptsResponse.ts b/src/serialization/resources/assistant/types/PromptsResponse.ts
new file mode 100644
index 0000000..9821a6b
--- /dev/null
+++ b/src/serialization/resources/assistant/types/PromptsResponse.ts
@@ -0,0 +1,24 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+import { Pagination } from "../../commons/types/Pagination";
+import { Prompt } from "./Prompt";
+
+export const PromptsResponse: core.serialization.ObjectSchema<
+    serializers.PromptsResponse.Raw,
+    Flatfile.PromptsResponse
+> = core.serialization.object({
+    pagination: Pagination.optional(),
+    data: core.serialization.list(Prompt),
+});
+
+export declare namespace PromptsResponse {
+    interface Raw {
+        pagination?: Pagination.Raw | null;
+        data: Prompt.Raw[];
+    }
+}
diff --git a/src/serialization/resources/assistant/types/index.ts b/src/serialization/resources/assistant/types/index.ts
new file mode 100644
index 0000000..d296f59
--- /dev/null
+++ b/src/serialization/resources/assistant/types/index.ts
@@ -0,0 +1,5 @@
+export * from "./PromptsResponse";
+export * from "./PromptResponse";
+export * from "./PromptPatch";
+export * from "./PromptCreate";
+export * from "./Prompt";
diff --git a/src/serialization/resources/auth/types/ApiKey.ts b/src/serialization/resources/auth/types/ApiKey.ts
index 939ad8d..a048302 100644
--- a/src/serialization/resources/auth/types/ApiKey.ts
+++ b/src/serialization/resources/auth/types/ApiKey.ts
@@ -7,2 +7,8 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { ApiKeyId } from "./ApiKeyId";
+import { RawKey } from "./RawKey";
+import { ApiKeyType } from "./ApiKeyType";
+import { EnvironmentId } from "../../commons/types/EnvironmentId";
+import { AccountId } from "../../commons/types/AccountId";
+import { ApiKeyOperation } from "./ApiKeyOperation";
 
@@ -10,10 +16,8 @@ export const ApiKey: core.serialization.ObjectSchema<serializers.ApiKey.Raw, Fla
     core.serialization.object({
-        id: core.serialization.lazy(async () => (await import("../../..")).ApiKeyId),
-        rawKey: core.serialization.lazy(async () => (await import("../../..")).RawKey).optional(),
-        type: core.serialization.lazy(async () => (await import("../../..")).ApiKeyType),
-        environmentId: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId).optional(),
-        accountId: core.serialization.lazy(async () => (await import("../../..")).AccountId).optional(),
-        operations: core.serialization.list(
-            core.serialization.lazyObject(async () => (await import("../../..")).ApiKeyOperation)
-        ),
+        id: ApiKeyId,
+        rawKey: RawKey.optional(),
+        type: ApiKeyType,
+        environmentId: EnvironmentId.optional(),
+        accountId: AccountId.optional(),
+        operations: core.serialization.list(ApiKeyOperation),
         createdAt: core.serialization.date(),
@@ -26,8 +30,8 @@ export declare namespace ApiKey {
     interface Raw {
-        id: serializers.ApiKeyId.Raw;
-        rawKey?: serializers.RawKey.Raw | null;
-        type: serializers.ApiKeyType.Raw;
-        environmentId?: serializers.EnvironmentId.Raw | null;
-        accountId?: serializers.AccountId.Raw | null;
-        operations: serializers.ApiKeyOperation.Raw[];
+        id: ApiKeyId.Raw;
+        rawKey?: RawKey.Raw | null;
+        type: ApiKeyType.Raw;
+        environmentId?: EnvironmentId.Raw | null;
+        accountId?: AccountId.Raw | null;
+        operations: ApiKeyOperation.Raw[];
         createdAt: string;
diff --git a/src/serialization/resources/auth/types/ApiKeysResponse.ts b/src/serialization/resources/auth/types/ApiKeysResponse.ts
index af686f9..0d016a7 100644
--- a/src/serialization/resources/auth/types/ApiKeysResponse.ts
+++ b/src/serialization/resources/auth/types/ApiKeysResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { ApiKey } from "./ApiKey";
 
@@ -12,3 +13,3 @@ export const ApiKeysResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).ApiKey)),
+    data: core.serialization.list(ApiKey),
 });
@@ -17,3 +18,3 @@ export declare namespace ApiKeysResponse {
     interface Raw {
-        data: serializers.ApiKey.Raw[];
+        data: ApiKey.Raw[];
     }
diff --git a/src/serialization/resources/auth/types/Credentials.ts b/src/serialization/resources/auth/types/Credentials.ts
index 57ba6ba..9ab3ccc 100644
--- a/src/serialization/resources/auth/types/Credentials.ts
+++ b/src/serialization/resources/auth/types/Credentials.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { UserCredentials } from "./UserCredentials";
+import { ApiCredentials } from "./ApiCredentials";
 
@@ -11,4 +13,4 @@ export const Credentials: core.serialization.Schema<serializers.Credentials.Raw,
         .union("type", {
-            userCredentials: core.serialization.lazyObject(async () => (await import("../../..")).UserCredentials),
-            apiCredentials: core.serialization.lazyObject(async () => (await import("../../..")).ApiCredentials),
+            userCredentials: UserCredentials,
+            apiCredentials: ApiCredentials,
         })
@@ -22,3 +24,3 @@ export declare namespace Credentials {
 
-    interface UserCredentials extends serializers.UserCredentials.Raw {
+    interface UserCredentials extends UserCredentials.Raw {
         type: "userCredentials";
@@ -26,3 +28,3 @@ export declare namespace Credentials {
 
-    interface ApiCredentials extends serializers.ApiCredentials.Raw {
+    interface ApiCredentials extends ApiCredentials.Raw {
         type: "apiCredentials";
diff --git a/src/serialization/resources/cells/types/CellValueWithCountsDeprecated.ts b/src/serialization/resources/cells/types/CellValueWithCountsDeprecated.ts
index 42ec382..bec2ed6 100644
--- a/src/serialization/resources/cells/types/CellValueWithCountsDeprecated.ts
+++ b/src/serialization/resources/cells/types/CellValueWithCountsDeprecated.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { RecordCounts } from "../../records/types/RecordCounts";
+import { CellValue } from "../../records/types/CellValue";
 
@@ -13,9 +15,9 @@ export const CellValueWithCountsDeprecated: core.serialization.ObjectSchema<
     .object({
-        counts: core.serialization.lazyObject(async () => (await import("../../..")).RecordCounts).optional(),
+        counts: RecordCounts.optional(),
     })
-    .extend(core.serialization.lazyObject(async () => (await import("../../..")).CellValue));
+    .extend(CellValue);
 
 export declare namespace CellValueWithCountsDeprecated {
-    interface Raw extends serializers.CellValue.Raw {
-        counts?: serializers.RecordCounts.Raw | null;
+    interface Raw extends CellValue.Raw {
+        counts?: RecordCounts.Raw | null;
     }
diff --git a/src/serialization/resources/cells/types/CellsResponseDataDeprecated.ts b/src/serialization/resources/cells/types/CellsResponseDataDeprecated.ts
index 312d5d8..63db296 100644
--- a/src/serialization/resources/cells/types/CellsResponseDataDeprecated.ts
+++ b/src/serialization/resources/cells/types/CellsResponseDataDeprecated.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { CellValueWithCountsDeprecated } from "./CellValueWithCountsDeprecated";
 
@@ -11,11 +12,6 @@ export const CellsResponseDataDeprecated: core.serialization.Schema<
     Flatfile.CellsResponseDataDeprecated
-> = core.serialization.record(
-    core.serialization.string(),
-    core.serialization.list(
-        core.serialization.lazyObject(async () => (await import("../../..")).CellValueWithCountsDeprecated)
-    )
-);
+> = core.serialization.record(core.serialization.string(), core.serialization.list(CellValueWithCountsDeprecated));
 
 export declare namespace CellsResponseDataDeprecated {
-    type Raw = Record<string, serializers.CellValueWithCountsDeprecated.Raw[]>;
+    type Raw = Record<string, CellValueWithCountsDeprecated.Raw[]>;
 }
diff --git a/src/serialization/resources/cells/types/CellsResponseDeprecated.ts b/src/serialization/resources/cells/types/CellsResponseDeprecated.ts
index d283ff9..4994dae 100644
--- a/src/serialization/resources/cells/types/CellsResponseDeprecated.ts
+++ b/src/serialization/resources/cells/types/CellsResponseDeprecated.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { CellsResponseDataDeprecated } from "./CellsResponseDataDeprecated";
+import { CellValueWithCountsDeprecated } from "./CellValueWithCountsDeprecated";
 
@@ -12,3 +14,3 @@ export const CellsResponseDeprecated: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.lazy(async () => (await import("../../..")).CellsResponseDataDeprecated),
+    data: CellsResponseDataDeprecated,
 });
@@ -17,3 +19,3 @@ export declare namespace CellsResponseDeprecated {
     interface Raw {
-        data: serializers.CellsResponseDataDeprecated.Raw;
+        data: CellsResponseDataDeprecated.Raw;
     }
diff --git a/src/serialization/resources/commits/types/Commit.ts b/src/serialization/resources/commits/types/Commit.ts
index 6cdc734..7315cfd 100644
--- a/src/serialization/resources/commits/types/Commit.ts
+++ b/src/serialization/resources/commits/types/Commit.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { CommitId } from "../../commons/types/CommitId";
+import { SheetId } from "../../commons/types/SheetId";
 
@@ -10,4 +12,4 @@ export const Commit: core.serialization.ObjectSchema<serializers.Commit.Raw, Fla
     core.serialization.object({
-        id: core.serialization.lazy(async () => (await import("../../..")).CommitId),
-        sheetId: core.serialization.lazy(async () => (await import("../../..")).SheetId),
+        id: CommitId,
+        sheetId: SheetId,
         createdBy: core.serialization.string(),
@@ -20,4 +22,4 @@ export declare namespace Commit {
     interface Raw {
-        id: serializers.CommitId.Raw;
-        sheetId: serializers.SheetId.Raw;
+        id: CommitId.Raw;
+        sheetId: SheetId.Raw;
         createdBy: string;
diff --git a/src/serialization/resources/commits/types/CommitResponse.ts b/src/serialization/resources/commits/types/CommitResponse.ts
index 9569e4b..8aba11a 100644
--- a/src/serialization/resources/commits/types/CommitResponse.ts
+++ b/src/serialization/resources/commits/types/CommitResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Commit } from "./Commit";
 
@@ -10,3 +11,3 @@ export const CommitResponse: core.serialization.ObjectSchema<serializers.CommitR
     core.serialization.object({
-        data: core.serialization.lazyObject(async () => (await import("../../..")).Commit),
+        data: Commit,
     });
@@ -15,3 +16,3 @@ export declare namespace CommitResponse {
     interface Raw {
-        data: serializers.Commit.Raw;
+        data: Commit.Raw;
     }
diff --git a/src/serialization/resources/commits/types/ListCommitsResponse.ts b/src/serialization/resources/commits/types/ListCommitsResponse.ts
index b4dda47..49c5bdd 100644
--- a/src/serialization/resources/commits/types/ListCommitsResponse.ts
+++ b/src/serialization/resources/commits/types/ListCommitsResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Commit } from "./Commit";
 
@@ -12,3 +13,3 @@ export const ListCommitsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Commit)),
+    data: core.serialization.list(Commit),
 });
@@ -17,3 +18,3 @@ export declare namespace ListCommitsResponse {
     interface Raw {
-        data: serializers.Commit.Raw[];
+        data: Commit.Raw[];
     }
diff --git a/src/serialization/resources/commons/types/AccessToken.ts b/src/serialization/resources/commons/types/AccessToken.ts
index 36af432..96f8240 100644
--- a/src/serialization/resources/commons/types/AccessToken.ts
+++ b/src/serialization/resources/commons/types/AccessToken.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { UserId } from "./UserId";
+import { AccountId } from "./AccountId";
 
@@ -14,4 +16,4 @@ export const AccessToken: core.serialization.ObjectSchema<serializers.AccessToke
         email: core.serialization.string().optional(),
-        userId: core.serialization.lazy(async () => (await import("../../..")).UserId).optional(),
-        accountId: core.serialization.lazy(async () => (await import("../../..")).AccountId).optional(),
+        userId: UserId.optional(),
+        accountId: AccountId.optional(),
     });
@@ -24,4 +26,4 @@ export declare namespace AccessToken {
         email?: string | null;
-        userId?: serializers.UserId.Raw | null;
-        accountId?: serializers.AccountId.Raw | null;
+        userId?: UserId.Raw | null;
+        accountId?: AccountId.Raw | null;
     }
diff --git a/src/serialization/resources/commons/types/Action.ts b/src/serialization/resources/commons/types/Action.ts
index 3f40e77..600618b 100644
--- a/src/serialization/resources/commons/types/Action.ts
+++ b/src/serialization/resources/commons/types/Action.ts
@@ -7,2 +7,7 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { ActionMode } from "./ActionMode";
+import { ActionMessage } from "./ActionMessage";
+import { ActionSchedule } from "./ActionSchedule";
+import { InputForm } from "./InputForm";
+import { ActionConstraint } from "./ActionConstraint";
 
@@ -12,11 +17,9 @@ export const Action: core.serialization.ObjectSchema<serializers.Action.Raw, Fla
         operation: core.serialization.string().optional(),
-        mode: core.serialization.lazy(async () => (await import("../../..")).ActionMode).optional(),
+        mode: ActionMode.optional(),
         label: core.serialization.string(),
         tooltip: core.serialization.string().optional(),
-        messages: core.serialization
-            .list(core.serialization.lazyObject(async () => (await import("../../..")).ActionMessage))
-            .optional(),
+        messages: core.serialization.list(ActionMessage).optional(),
         type: core.serialization.string().optional(),
         description: core.serialization.string().optional(),
-        schedule: core.serialization.lazy(async () => (await import("../../..")).ActionSchedule).optional(),
+        schedule: ActionSchedule.optional(),
         primary: core.serialization.boolean().optional(),
@@ -26,6 +29,4 @@ export const Action: core.serialization.ObjectSchema<serializers.Action.Raw, Fla
         requireSelection: core.serialization.boolean().optional(),
-        inputForm: core.serialization.lazyObject(async () => (await import("../../..")).InputForm).optional(),
-        constraints: core.serialization
-            .list(core.serialization.lazyObject(async () => (await import("../../..")).ActionConstraint))
-            .optional(),
+        inputForm: InputForm.optional(),
+        constraints: core.serialization.list(ActionConstraint).optional(),
     });
@@ -36,9 +37,9 @@ export declare namespace Action {
         operation?: string | null;
-        mode?: serializers.ActionMode.Raw | null;
+        mode?: ActionMode.Raw | null;
         label: string;
         tooltip?: string | null;
-        messages?: serializers.ActionMessage.Raw[] | null;
+        messages?: ActionMessage.Raw[] | null;
         type?: string | null;
         description?: string | null;
-        schedule?: serializers.ActionSchedule.Raw | null;
+        schedule?: ActionSchedule.Raw | null;
         primary?: boolean | null;
@@ -48,4 +49,4 @@ export declare namespace Action {
         requireSelection?: boolean | null;
-        inputForm?: serializers.InputForm.Raw | null;
-        constraints?: serializers.ActionConstraint.Raw[] | null;
+        inputForm?: InputForm.Raw | null;
+        constraints?: ActionConstraint.Raw[] | null;
     }
diff --git a/src/serialization/resources/commons/types/ActionConstraint.ts b/src/serialization/resources/commons/types/ActionConstraint.ts
index f2988c8..c0a7f53 100644
--- a/src/serialization/resources/commons/types/ActionConstraint.ts
+++ b/src/serialization/resources/commons/types/ActionConstraint.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { ActionConstraintType } from "./ActionConstraintType";
 
@@ -12,3 +13,3 @@ export const ActionConstraint: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    type: core.serialization.lazy(async () => (await import("../../..")).ActionConstraintType),
+    type: ActionConstraintType,
 });
@@ -17,3 +18,3 @@ export declare namespace ActionConstraint {
     interface Raw {
-        type: serializers.ActionConstraintType.Raw;
+        type: ActionConstraintType.Raw;
     }
diff --git a/src/serialization/resources/commons/types/ActionMessage.ts b/src/serialization/resources/commons/types/ActionMessage.ts
index 6fe3da8..82e1c9f 100644
--- a/src/serialization/resources/commons/types/ActionMessage.ts
+++ b/src/serialization/resources/commons/types/ActionMessage.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { ActionMessageType } from "./ActionMessageType";
 
@@ -10,3 +11,3 @@ export const ActionMessage: core.serialization.ObjectSchema<serializers.ActionMe
     core.serialization.object({
-        type: core.serialization.lazy(async () => (await import("../../..")).ActionMessageType),
+        type: ActionMessageType,
         content: core.serialization.string(),
@@ -16,3 +17,3 @@ export declare namespace ActionMessage {
     interface Raw {
-        type: serializers.ActionMessageType.Raw;
+        type: ActionMessageType.Raw;
         content: string;
diff --git a/src/serialization/resources/commons/types/Errors.ts b/src/serialization/resources/commons/types/Errors.ts
index f154ca3..bb5171b 100644
--- a/src/serialization/resources/commons/types/Errors.ts
+++ b/src/serialization/resources/commons/types/Errors.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Error_ } from "./Error_";
 
@@ -10,3 +11,3 @@ export const Errors: core.serialization.ObjectSchema<serializers.Errors.Raw, Fla
     core.serialization.object({
-        errors: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Error_)),
+        errors: core.serialization.list(Error_),
     });
@@ -15,3 +16,3 @@ export declare namespace Errors {
     interface Raw {
-        errors: serializers.Error_.Raw[];
+        errors: Error_.Raw[];
     }
diff --git a/src/serialization/resources/commons/types/InputConfig.ts b/src/serialization/resources/commons/types/InputConfig.ts
index a461b10..4ee3b51 100644
--- a/src/serialization/resources/commons/types/InputConfig.ts
+++ b/src/serialization/resources/commons/types/InputConfig.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { InputEnumPropertyOption } from "./InputEnumPropertyOption";
 
@@ -10,5 +11,3 @@ export const InputConfig: core.serialization.ObjectSchema<serializers.InputConfi
     core.serialization.object({
-        options: core.serialization.list(
-            core.serialization.lazyObject(async () => (await import("../../..")).InputEnumPropertyOption)
-        ),
+        options: core.serialization.list(InputEnumPropertyOption),
     });
@@ -17,3 +16,3 @@ export declare namespace InputConfig {
     interface Raw {
-        options: serializers.InputEnumPropertyOption.Raw[];
+        options: InputEnumPropertyOption.Raw[];
     }
diff --git a/src/serialization/resources/commons/types/InputConstraint.ts b/src/serialization/resources/commons/types/InputConstraint.ts
index df71a16..84f29cb 100644
--- a/src/serialization/resources/commons/types/InputConstraint.ts
+++ b/src/serialization/resources/commons/types/InputConstraint.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { InputConstraintType } from "./InputConstraintType";
 
@@ -12,3 +13,3 @@ export const InputConstraint: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    type: core.serialization.lazy(async () => (await import("../../..")).InputConstraintType),
+    type: InputConstraintType,
 });
@@ -17,3 +18,3 @@ export declare namespace InputConstraint {
     interface Raw {
-        type: serializers.InputConstraintType.Raw;
+        type: InputConstraintType.Raw;
     }
diff --git a/src/serialization/resources/commons/types/InputField.ts b/src/serialization/resources/commons/types/InputField.ts
index 94b29bc..66952dd 100644
--- a/src/serialization/resources/commons/types/InputField.ts
+++ b/src/serialization/resources/commons/types/InputField.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { InputConfig } from "./InputConfig";
+import { InputConstraint } from "./InputConstraint";
 
@@ -15,6 +17,4 @@ export const InputField: core.serialization.ObjectSchema<serializers.InputField.
         defaultValue: core.serialization.any().optional(),
-        config: core.serialization.lazyObject(async () => (await import("../../..")).InputConfig).optional(),
-        constraints: core.serialization
-            .list(core.serialization.lazyObject(async () => (await import("../../..")).InputConstraint))
-            .optional(),
+        config: InputConfig.optional(),
+        constraints: core.serialization.list(InputConstraint).optional(),
     });
@@ -28,4 +28,4 @@ export declare namespace InputField {
         defaultValue?: any | null;
-        config?: serializers.InputConfig.Raw | null;
-        constraints?: serializers.InputConstraint.Raw[] | null;
+        config?: InputConfig.Raw | null;
+        constraints?: InputConstraint.Raw[] | null;
     }
diff --git a/src/serialization/resources/commons/types/InputForm.ts b/src/serialization/resources/commons/types/InputForm.ts
index 42bf905..c4c469e 100644
--- a/src/serialization/resources/commons/types/InputForm.ts
+++ b/src/serialization/resources/commons/types/InputForm.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { InputFormType } from "./InputFormType";
+import { InputField } from "./InputField";
 
@@ -10,6 +12,4 @@ export const InputForm: core.serialization.ObjectSchema<serializers.InputForm.Ra
     core.serialization.object({
-        type: core.serialization.lazy(async () => (await import("../../..")).InputFormType),
-        fields: core.serialization.list(
-            core.serialization.lazyObject(async () => (await import("../../..")).InputField)
-        ),
+        type: InputFormType,
+        fields: core.serialization.list(InputField),
     });
@@ -18,4 +18,4 @@ export declare namespace InputForm {
     interface Raw {
-        type: serializers.InputFormType.Raw;
-        fields: serializers.InputField.Raw[];
+        type: InputFormType.Raw;
+        fields: InputField.Raw[];
     }
diff --git a/src/serialization/resources/commons/types/PromptId.ts b/src/serialization/resources/commons/types/PromptId.ts
new file mode 100644
index 0000000..695182d
--- /dev/null
+++ b/src/serialization/resources/commons/types/PromptId.ts
@@ -0,0 +1,14 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+
+export const PromptId: core.serialization.Schema<serializers.PromptId.Raw, Flatfile.PromptId> =
+    core.serialization.string();
+
+export declare namespace PromptId {
+    type Raw = string;
+}
diff --git a/src/serialization/resources/commons/types/Success.ts b/src/serialization/resources/commons/types/Success.ts
index 29191d6..6cedfa1 100644
--- a/src/serialization/resources/commons/types/Success.ts
+++ b/src/serialization/resources/commons/types/Success.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { SuccessData } from "./SuccessData";
 
@@ -10,3 +11,3 @@ export const Success: core.serialization.ObjectSchema<serializers.Success.Raw, F
     core.serialization.object({
-        data: core.serialization.lazyObject(async () => (await import("../../..")).SuccessData).optional(),
+        data: SuccessData.optional(),
     });
@@ -15,3 +16,3 @@ export declare namespace Success {
     interface Raw {
-        data?: serializers.SuccessData.Raw | null;
+        data?: SuccessData.Raw | null;
     }
diff --git a/src/serialization/resources/commons/types/index.ts b/src/serialization/resources/commons/types/index.ts
index d92ca92..baa887d 100644
--- a/src/serialization/resources/commons/types/index.ts
+++ b/src/serialization/resources/commons/types/index.ts
@@ -24,2 +24,3 @@ export * from "./ProgramId";
 export * from "./FamilyId";
+export * from "./PromptId";
 export * from "./DataRetentionPolicyId";
diff --git a/src/serialization/resources/dataRetentionPolicies/types/DataRetentionPolicy.ts b/src/serialization/resources/dataRetentionPolicies/types/DataRetentionPolicy.ts
index ff62d1b..c15c377 100644
--- a/src/serialization/resources/dataRetentionPolicies/types/DataRetentionPolicy.ts
+++ b/src/serialization/resources/dataRetentionPolicies/types/DataRetentionPolicy.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { DataRetentionPolicyId } from "../../commons/types/DataRetentionPolicyId";
+import { DataRetentionPolicyConfig } from "./DataRetentionPolicyConfig";
 
@@ -13,3 +15,3 @@ export const DataRetentionPolicy: core.serialization.ObjectSchema<
     .object({
-        id: core.serialization.lazy(async () => (await import("../../..")).DataRetentionPolicyId),
+        id: DataRetentionPolicyId,
         createdAt: core.serialization.date(),
@@ -17,7 +19,7 @@ export const DataRetentionPolicy: core.serialization.ObjectSchema<
     })
-    .extend(core.serialization.lazyObject(async () => (await import("../../..")).DataRetentionPolicyConfig));
+    .extend(DataRetentionPolicyConfig);
 
 export declare namespace DataRetentionPolicy {
-    interface Raw extends serializers.DataRetentionPolicyConfig.Raw {
-        id: serializers.DataRetentionPolicyId.Raw;
+    interface Raw extends DataRetentionPolicyConfig.Raw {
+        id: DataRetentionPolicyId.Raw;
         createdAt: string;
diff --git a/src/serialization/resources/dataRetentionPolicies/types/DataRetentionPolicyConfig.ts b/src/serialization/resources/dataRetentionPolicies/types/DataRetentionPolicyConfig.ts
index edbe89c..235e2f5 100644
--- a/src/serialization/resources/dataRetentionPolicies/types/DataRetentionPolicyConfig.ts
+++ b/src/serialization/resources/dataRetentionPolicies/types/DataRetentionPolicyConfig.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { DataRetentionPolicyEnum } from "./DataRetentionPolicyEnum";
+import { EnvironmentId } from "../../commons/types/EnvironmentId";
 
@@ -12,5 +14,5 @@ export const DataRetentionPolicyConfig: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    type: core.serialization.lazy(async () => (await import("../../..")).DataRetentionPolicyEnum),
+    type: DataRetentionPolicyEnum,
     period: core.serialization.number(),
-    environmentId: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId),
+    environmentId: EnvironmentId,
 });
@@ -19,5 +21,5 @@ export declare namespace DataRetentionPolicyConfig {
     interface Raw {
-        type: serializers.DataRetentionPolicyEnum.Raw;
+        type: DataRetentionPolicyEnum.Raw;
         period: number;
-        environmentId: serializers.EnvironmentId.Raw;
+        environmentId: EnvironmentId.Raw;
     }
diff --git a/src/serialization/resources/dataRetentionPolicies/types/DataRetentionPolicyResponse.ts b/src/serialization/resources/dataRetentionPolicies/types/DataRetentionPolicyResponse.ts
index da57362..fd78041 100644
--- a/src/serialization/resources/dataRetentionPolicies/types/DataRetentionPolicyResponse.ts
+++ b/src/serialization/resources/dataRetentionPolicies/types/DataRetentionPolicyResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { DataRetentionPolicy } from "./DataRetentionPolicy";
 
@@ -12,3 +13,3 @@ export const DataRetentionPolicyResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.lazyObject(async () => (await import("../../..")).DataRetentionPolicy),
+    data: DataRetentionPolicy,
 });
@@ -17,3 +18,3 @@ export declare namespace DataRetentionPolicyResponse {
     interface Raw {
-        data: serializers.DataRetentionPolicy.Raw;
+        data: DataRetentionPolicy.Raw;
     }
diff --git a/src/serialization/resources/dataRetentionPolicies/types/ListDataRetentionPoliciesResponse.ts b/src/serialization/resources/dataRetentionPolicies/types/ListDataRetentionPoliciesResponse.ts
index bb82dd4..811fb98 100644
--- a/src/serialization/resources/dataRetentionPolicies/types/ListDataRetentionPoliciesResponse.ts
+++ b/src/serialization/resources/dataRetentionPolicies/types/ListDataRetentionPoliciesResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { DataRetentionPolicy } from "./DataRetentionPolicy";
 
@@ -12,5 +13,3 @@ export const ListDataRetentionPoliciesResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(
-        core.serialization.lazyObject(async () => (await import("../../..")).DataRetentionPolicy)
-    ),
+    data: core.serialization.list(DataRetentionPolicy),
 });
@@ -19,3 +18,3 @@ export declare namespace ListDataRetentionPoliciesResponse {
     interface Raw {
-        data: serializers.DataRetentionPolicy.Raw[];
+        data: DataRetentionPolicy.Raw[];
     }
diff --git a/src/serialization/resources/documents/types/Document.ts b/src/serialization/resources/documents/types/Document.ts
index 51bc0cc..6be73b3 100644
--- a/src/serialization/resources/documents/types/Document.ts
+++ b/src/serialization/resources/documents/types/Document.ts
@@ -7,2 +7,6 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { DocumentId } from "../../commons/types/DocumentId";
+import { SpaceId } from "../../commons/types/SpaceId";
+import { EnvironmentId } from "../../commons/types/EnvironmentId";
+import { DocumentConfig } from "./DocumentConfig";
 
@@ -10,5 +14,5 @@ export const Document: core.serialization.ObjectSchema<serializers.Document.Raw,
     .object({
-        id: core.serialization.lazy(async () => (await import("../../..")).DocumentId),
-        spaceId: core.serialization.lazy(async () => (await import("../../..")).SpaceId).optional(),
-        environmentId: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId).optional(),
+        id: DocumentId,
+        spaceId: SpaceId.optional(),
+        environmentId: EnvironmentId.optional(),
         createdAt: core.serialization.date(),
@@ -16,9 +20,9 @@ export const Document: core.serialization.ObjectSchema<serializers.Document.Raw,
     })
-    .extend(core.serialization.lazyObject(async () => (await import("../../..")).DocumentConfig));
+    .extend(DocumentConfig);
 
 export declare namespace Document {
-    interface Raw extends serializers.DocumentConfig.Raw {
-        id: serializers.DocumentId.Raw;
-        spaceId?: serializers.SpaceId.Raw | null;
-        environmentId?: serializers.EnvironmentId.Raw | null;
+    interface Raw extends DocumentConfig.Raw {
+        id: DocumentId.Raw;
+        spaceId?: SpaceId.Raw | null;
+        environmentId?: EnvironmentId.Raw | null;
         createdAt: string;
diff --git a/src/serialization/resources/documents/types/DocumentConfig.ts b/src/serialization/resources/documents/types/DocumentConfig.ts
index 64cc667..a7b7c1d 100644
--- a/src/serialization/resources/documents/types/DocumentConfig.ts
+++ b/src/serialization/resources/documents/types/DocumentConfig.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Action } from "../../commons/types/Action";
 
@@ -13,5 +14,3 @@ export const DocumentConfig: core.serialization.ObjectSchema<serializers.Documen
         treatments: core.serialization.list(core.serialization.string()).optional(),
-        actions: core.serialization
-            .list(core.serialization.lazyObject(async () => (await import("../../..")).Action))
-            .optional(),
+        actions: core.serialization.list(Action).optional(),
     });
@@ -23,3 +22,3 @@ export declare namespace DocumentConfig {
         treatments?: string[] | null;
-        actions?: serializers.Action.Raw[] | null;
+        actions?: Action.Raw[] | null;
     }
diff --git a/src/serialization/resources/documents/types/DocumentResponse.ts b/src/serialization/resources/documents/types/DocumentResponse.ts
index 980edeb..d7c207a 100644
--- a/src/serialization/resources/documents/types/DocumentResponse.ts
+++ b/src/serialization/resources/documents/types/DocumentResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Document } from "./Document";
 
@@ -12,3 +13,3 @@ export const DocumentResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.lazyObject(async () => (await import("../../..")).Document),
+    data: Document,
 });
@@ -17,3 +18,3 @@ export declare namespace DocumentResponse {
     interface Raw {
-        data: serializers.Document.Raw;
+        data: Document.Raw;
     }
diff --git a/src/serialization/resources/documents/types/ListDocumentsResponse.ts b/src/serialization/resources/documents/types/ListDocumentsResponse.ts
index 17eb9ad..6de1ff3 100644
--- a/src/serialization/resources/documents/types/ListDocumentsResponse.ts
+++ b/src/serialization/resources/documents/types/ListDocumentsResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { DocumentResponse } from "./DocumentResponse";
 
@@ -12,5 +13,3 @@ export const ListDocumentsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(
-        core.serialization.lazyObject(async () => (await import("../../..")).DocumentResponse)
-    ),
+    data: core.serialization.list(DocumentResponse),
 });
@@ -19,3 +18,3 @@ export declare namespace ListDocumentsResponse {
     interface Raw {
-        data: serializers.DocumentResponse.Raw[];
+        data: DocumentResponse.Raw[];
     }
diff --git a/src/serialization/resources/entitlements/types/ListEntitlementsResponse.ts b/src/serialization/resources/entitlements/types/ListEntitlementsResponse.ts
index 1e5a59a..0a05b48 100644
--- a/src/serialization/resources/entitlements/types/ListEntitlementsResponse.ts
+++ b/src/serialization/resources/entitlements/types/ListEntitlementsResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Entitlement } from "./Entitlement";
 
@@ -12,3 +13,3 @@ export const ListEntitlementsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Entitlement)),
+    data: core.serialization.list(Entitlement),
 });
@@ -17,3 +18,3 @@ export declare namespace ListEntitlementsResponse {
     interface Raw {
-        data: serializers.Entitlement.Raw[];
+        data: Entitlement.Raw[];
     }
diff --git a/src/serialization/resources/environments/types/Environment.ts b/src/serialization/resources/environments/types/Environment.ts
index 33280ca..80fb792 100644
--- a/src/serialization/resources/environments/types/Environment.ts
+++ b/src/serialization/resources/environments/types/Environment.ts
@@ -7,2 +7,5 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { EnvironmentId } from "../../commons/types/EnvironmentId";
+import { AccountId } from "../../commons/types/AccountId";
+import { GuestAuthenticationEnum } from "./GuestAuthenticationEnum";
 
@@ -10,9 +13,7 @@ export const Environment: core.serialization.ObjectSchema<serializers.Environmen
     core.serialization.object({
-        id: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId),
-        accountId: core.serialization.lazy(async () => (await import("../../..")).AccountId),
+        id: EnvironmentId,
+        accountId: AccountId,
         name: core.serialization.string(),
         isProd: core.serialization.boolean(),
-        guestAuthentication: core.serialization.list(
-            core.serialization.lazy(async () => (await import("../../..")).GuestAuthenticationEnum)
-        ),
+        guestAuthentication: core.serialization.list(GuestAuthenticationEnum),
         features: core.serialization.record(core.serialization.string(), core.serialization.any()),
@@ -26,7 +27,7 @@ export declare namespace Environment {
     interface Raw {
-        id: serializers.EnvironmentId.Raw;
-        accountId: serializers.AccountId.Raw;
+        id: EnvironmentId.Raw;
+        accountId: AccountId.Raw;
         name: string;
         isProd: boolean;
-        guestAuthentication: serializers.GuestAuthenticationEnum.Raw[];
+        guestAuthentication: GuestAuthenticationEnum.Raw[];
         features: Record<string, any>;
diff --git a/src/serialization/resources/environments/types/EnvironmentConfigCreate.ts b/src/serialization/resources/environments/types/EnvironmentConfigCreate.ts
index 553c141..96bd5d6 100644
--- a/src/serialization/resources/environments/types/EnvironmentConfigCreate.ts
+++ b/src/serialization/resources/environments/types/EnvironmentConfigCreate.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { GuestAuthenticationEnum } from "./GuestAuthenticationEnum";
 
@@ -14,5 +15,3 @@ export const EnvironmentConfigCreate: core.serialization.ObjectSchema<
     isProd: core.serialization.boolean(),
-    guestAuthentication: core.serialization
-        .list(core.serialization.lazy(async () => (await import("../../..")).GuestAuthenticationEnum))
-        .optional(),
+    guestAuthentication: core.serialization.list(GuestAuthenticationEnum).optional(),
     metadata: core.serialization.record(core.serialization.string(), core.serialization.any()).optional(),
@@ -27,3 +26,3 @@ export declare namespace EnvironmentConfigCreate {
         isProd: boolean;
-        guestAuthentication?: serializers.GuestAuthenticationEnum.Raw[] | null;
+        guestAuthentication?: GuestAuthenticationEnum.Raw[] | null;
         metadata?: Record<string, any> | null;
diff --git a/src/serialization/resources/environments/types/EnvironmentConfigUpdate.ts b/src/serialization/resources/environments/types/EnvironmentConfigUpdate.ts
index 4f7008c..2db4261 100644
--- a/src/serialization/resources/environments/types/EnvironmentConfigUpdate.ts
+++ b/src/serialization/resources/environments/types/EnvironmentConfigUpdate.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { GuestAuthenticationEnum } from "./GuestAuthenticationEnum";
 
@@ -14,5 +15,3 @@ export const EnvironmentConfigUpdate: core.serialization.ObjectSchema<
     isProd: core.serialization.boolean().optional(),
-    guestAuthentication: core.serialization
-        .list(core.serialization.lazy(async () => (await import("../../..")).GuestAuthenticationEnum))
-        .optional(),
+    guestAuthentication: core.serialization.list(GuestAuthenticationEnum).optional(),
     metadata: core.serialization.record(core.serialization.string(), core.serialization.any()).optional(),
@@ -27,3 +26,3 @@ export declare namespace EnvironmentConfigUpdate {
         isProd?: boolean | null;
-        guestAuthentication?: serializers.GuestAuthenticationEnum.Raw[] | null;
+        guestAuthentication?: GuestAuthenticationEnum.Raw[] | null;
         metadata?: Record<string, any> | null;
diff --git a/src/serialization/resources/environments/types/EnvironmentResponse.ts b/src/serialization/resources/environments/types/EnvironmentResponse.ts
index 8dc0231..d18af70 100644
--- a/src/serialization/resources/environments/types/EnvironmentResponse.ts
+++ b/src/serialization/resources/environments/types/EnvironmentResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Environment } from "./Environment";
 
@@ -12,3 +13,3 @@ export const EnvironmentResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.lazyObject(async () => (await import("../../..")).Environment),
+    data: Environment,
 });
@@ -17,3 +18,3 @@ export declare namespace EnvironmentResponse {
     interface Raw {
-        data: serializers.Environment.Raw;
+        data: Environment.Raw;
     }
diff --git a/src/serialization/resources/environments/types/ListEnvironmentsResponse.ts b/src/serialization/resources/environments/types/ListEnvironmentsResponse.ts
index e68721d..93f4727 100644
--- a/src/serialization/resources/environments/types/ListEnvironmentsResponse.ts
+++ b/src/serialization/resources/environments/types/ListEnvironmentsResponse.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Environment } from "./Environment";
+import { Pagination } from "../../commons/types/Pagination";
 
@@ -12,4 +14,4 @@ export const ListEnvironmentsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Environment)),
-    pagination: core.serialization.lazyObject(async () => (await import("../../..")).Pagination).optional(),
+    data: core.serialization.list(Environment),
+    pagination: Pagination.optional(),
 });
@@ -18,4 +20,4 @@ export declare namespace ListEnvironmentsResponse {
     interface Raw {
-        data: serializers.Environment.Raw[];
-        pagination?: serializers.Pagination.Raw | null;
+        data: Environment.Raw[];
+        pagination?: Pagination.Raw | null;
     }
diff --git a/src/serialization/resources/events/types/BaseEvent.ts b/src/serialization/resources/events/types/BaseEvent.ts
index 9c6c8d5..5091bcd 100644
--- a/src/serialization/resources/events/types/BaseEvent.ts
+++ b/src/serialization/resources/events/types/BaseEvent.ts
@@ -7,2 +7,6 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Domain } from "./Domain";
+import { Context } from "./Context";
+import { EventAttributes } from "./EventAttributes";
+import { Origin } from "./Origin";
 
@@ -10,5 +14,5 @@ export const BaseEvent: core.serialization.ObjectSchema<serializers.BaseEvent.Ra
     core.serialization.object({
-        domain: core.serialization.lazy(async () => (await import("../../..")).Domain),
-        context: core.serialization.lazyObject(async () => (await import("../../..")).Context),
-        attributes: core.serialization.lazyObject(async () => (await import("../../..")).EventAttributes).optional(),
+        domain: Domain,
+        context: Context,
+        attributes: EventAttributes.optional(),
         callbackUrl: core.serialization.string().optional(),
@@ -16,3 +20,3 @@ export const BaseEvent: core.serialization.ObjectSchema<serializers.BaseEvent.Ra
         target: core.serialization.string().optional(),
-        origin: core.serialization.lazyObject(async () => (await import("../../..")).Origin).optional(),
+        origin: Origin.optional(),
         namespaces: core.serialization.list(core.serialization.string()).optional(),
@@ -22,5 +26,5 @@ export declare namespace BaseEvent {
     interface Raw {
-        domain: serializers.Domain.Raw;
-        context: serializers.Context.Raw;
-        attributes?: serializers.EventAttributes.Raw | null;
+        domain: Domain.Raw;
+        context: Context.Raw;
+        attributes?: EventAttributes.Raw | null;
         callbackUrl?: string | null;
@@ -28,3 +32,3 @@ export declare namespace BaseEvent {
         target?: string | null;
-        origin?: serializers.Origin.Raw | null;
+        origin?: Origin.Raw | null;
         namespaces?: string[] | null;
diff --git a/src/serialization/resources/events/types/Context.ts b/src/serialization/resources/events/types/Context.ts
index be5bd5b..f9c3faf 100644
--- a/src/serialization/resources/events/types/Context.ts
+++ b/src/serialization/resources/events/types/Context.ts
@@ -7,2 +7,19 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { EventContextSlugs } from "./EventContextSlugs";
+import { ActionName } from "./ActionName";
+import { AccountId } from "../../commons/types/AccountId";
+import { EnvironmentId } from "../../commons/types/EnvironmentId";
+import { SpaceId } from "../../commons/types/SpaceId";
+import { WorkbookId } from "../../commons/types/WorkbookId";
+import { SheetId } from "../../commons/types/SheetId";
+import { SheetSlug } from "./SheetSlug";
+import { SnapshotId } from "../../commons/types/SnapshotId";
+import { VersionId } from "../../commons/types/VersionId";
+import { CommitId } from "../../commons/types/CommitId";
+import { JobId } from "../../commons/types/JobId";
+import { ProgramId } from "../../commons/types/ProgramId";
+import { FileId } from "../../commons/types/FileId";
+import { DocumentId } from "../../commons/types/DocumentId";
+import { EventId } from "../../commons/types/EventId";
+import { AppId } from "../../commons/types/AppId";
 
@@ -11,19 +28,20 @@ export const Context: core.serialization.ObjectSchema<serializers.Context.Raw, F
         namespaces: core.serialization.list(core.serialization.string()).optional(),
-        slugs: core.serialization.lazyObject(async () => (await import("../../..")).EventContextSlugs).optional(),
-        actionName: core.serialization.lazy(async () => (await import("../../..")).ActionName).optional(),
-        accountId: core.serialization.lazy(async () => (await import("../../..")).AccountId),
-        environmentId: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId),
-        spaceId: core.serialization.lazy(async () => (await import("../../..")).SpaceId).optional(),
-        workbookId: core.serialization.lazy(async () => (await import("../../..")).WorkbookId).optional(),
-        sheetId: core.serialization.lazy(async () => (await import("../../..")).SheetId).optional(),
-        sheetSlug: core.serialization.lazy(async () => (await import("../../..")).SheetSlug).optional(),
-        snapshotId: core.serialization.lazy(async () => (await import("../../..")).SnapshotId).optional(),
-        versionId: core.serialization.lazy(async () => (await import("../../..")).VersionId).optional(),
-        commitId: core.serialization.lazy(async () => (await import("../../..")).CommitId).optional(),
-        jobId: core.serialization.lazy(async () => (await import("../../..")).JobId).optional(),
-        programId: core.serialization.lazy(async () => (await import("../../..")).ProgramId).optional(),
-        fileId: core.serialization.lazy(async () => (await import("../../..")).FileId).optional(),
-        documentId: core.serialization.lazy(async () => (await import("../../..")).DocumentId).optional(),
-        precedingEventId: core.serialization.lazy(async () => (await import("../../..")).EventId).optional(),
+        slugs: EventContextSlugs.optional(),
+        actionName: ActionName.optional(),
+        accountId: AccountId,
+        environmentId: EnvironmentId,
+        spaceId: SpaceId.optional(),
+        workbookId: WorkbookId.optional(),
+        sheetId: SheetId.optional(),
+        sheetSlug: SheetSlug.optional(),
+        snapshotId: SnapshotId.optional(),
+        versionId: VersionId.optional(),
+        commitId: CommitId.optional(),
+        jobId: JobId.optional(),
+        programId: ProgramId.optional(),
+        fileId: FileId.optional(),
+        documentId: DocumentId.optional(),
+        precedingEventId: EventId.optional(),
         actorId: core.serialization.string().optional(),
+        appId: AppId.optional(),
     });
@@ -33,19 +51,20 @@ export declare namespace Context {
         namespaces?: string[] | null;
-        slugs?: serializers.EventContextSlugs.Raw | null;
-        actionName?: serializers.ActionName.Raw | null;
-        accountId: serializers.AccountId.Raw;
-        environmentId: serializers.EnvironmentId.Raw;
-        spaceId?: serializers.SpaceId.Raw | null;
-        workbookId?: serializers.WorkbookId.Raw | null;
-        sheetId?: serializers.SheetId.Raw | null;
-        sheetSlug?: serializers.SheetSlug.Raw | null;
-        snapshotId?: serializers.SnapshotId.Raw | null;
-        versionId?: serializers.VersionId.Raw | null;
-        commitId?: serializers.CommitId.Raw | null;
-        jobId?: serializers.JobId.Raw | null;
-        programId?: serializers.ProgramId.Raw | null;
-        fileId?: serializers.FileId.Raw | null;
-        documentId?: serializers.DocumentId.Raw | null;
-        precedingEventId?: serializers.EventId.Raw | null;
+        slugs?: EventContextSlugs.Raw | null;
+        actionName?: ActionName.Raw | null;
+        accountId: AccountId.Raw;
+        environmentId: EnvironmentId.Raw;
+        spaceId?: SpaceId.Raw | null;
+        workbookId?: WorkbookId.Raw | null;
+        sheetId?: SheetId.Raw | null;
+        sheetSlug?: SheetSlug.Raw | null;
+        snapshotId?: SnapshotId.Raw | null;
+        versionId?: VersionId.Raw | null;
+        commitId?: CommitId.Raw | null;
+        jobId?: JobId.Raw | null;
+        programId?: ProgramId.Raw | null;
+        fileId?: FileId.Raw | null;
+        documentId?: DocumentId.Raw | null;
+        precedingEventId?: EventId.Raw | null;
         actorId?: string | null;
+        appId?: AppId.Raw | null;
     }
diff --git a/src/serialization/resources/events/types/CreateEventConfig.ts b/src/serialization/resources/events/types/CreateEventConfig.ts
index 92e0ac2..0fb6cee 100644
--- a/src/serialization/resources/events/types/CreateEventConfig.ts
+++ b/src/serialization/resources/events/types/CreateEventConfig.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { EventTopic } from "./EventTopic";
+import { BaseEvent } from "./BaseEvent";
 
@@ -13,3 +15,3 @@ export const CreateEventConfig: core.serialization.ObjectSchema<
     .object({
-        topic: core.serialization.lazy(async () => (await import("../../..")).EventTopic),
+        topic: EventTopic,
         payload: core.serialization.record(core.serialization.string(), core.serialization.any()),
@@ -17,7 +19,7 @@ export const CreateEventConfig: core.serialization.ObjectSchema<
     })
-    .extend(core.serialization.lazyObject(async () => (await import("../../..")).BaseEvent));
+    .extend(BaseEvent);
 
 export declare namespace CreateEventConfig {
-    interface Raw extends serializers.BaseEvent.Raw {
-        topic: serializers.EventTopic.Raw;
+    interface Raw extends BaseEvent.Raw {
+        topic: EventTopic.Raw;
         payload: Record<string, any>;
diff --git a/src/serialization/resources/events/types/Event.ts b/src/serialization/resources/events/types/Event.ts
index 4ece7a3..b8a6225 100644
--- a/src/serialization/resources/events/types/Event.ts
+++ b/src/serialization/resources/events/types/Event.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { GenericEvent } from "./GenericEvent";
 
@@ -10,48 +11,49 @@ export const Event: core.serialization.Schema<serializers.Event.Raw, Flatfile.Ev
     .union("topic", {
-        "agent:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "agent:updated": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "agent:deleted": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "space:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "space:updated": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "space:deleted": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "space:archived": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "space:expired": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "space:guestAdded": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "space:guestRemoved": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "document:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "document:updated": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "document:deleted": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "workbook:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "workbook:updated": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "workbook:deleted": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "workbook:expired": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "sheet:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "sheet:updated": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "sheet:deleted": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "snapshot:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "records:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "records:updated": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "records:deleted": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "file:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "file:updated": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "file:deleted": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "file:expired": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "job:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "job:updated": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "job:deleted": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "job:failed": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "job:completed": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "job:ready": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "job:scheduled": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "job:outcome-acknowledged": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "job:parts-completed": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "program:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "program:updated": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "commit:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "commit:updated": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "commit:completed": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "secret:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "secret:updated": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "secret:deleted": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
-        "layer:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "agent:created": GenericEvent,
+        "agent:updated": GenericEvent,
+        "agent:deleted": GenericEvent,
+        "space:created": GenericEvent,
+        "space:updated": GenericEvent,
+        "space:deleted": GenericEvent,
+        "space:archived": GenericEvent,
+        "space:expired": GenericEvent,
+        "space:guestAdded": GenericEvent,
+        "space:guestRemoved": GenericEvent,
+        "document:created": GenericEvent,
+        "document:updated": GenericEvent,
+        "document:deleted": GenericEvent,
+        "workbook:created": GenericEvent,
+        "workbook:updated": GenericEvent,
+        "workbook:deleted": GenericEvent,
+        "workbook:expired": GenericEvent,
+        "sheet:created": GenericEvent,
+        "sheet:updated": GenericEvent,
+        "sheet:deleted": GenericEvent,
+        "sheet:counts-updated": GenericEvent,
+        "snapshot:created": GenericEvent,
+        "records:created": GenericEvent,
+        "records:updated": GenericEvent,
+        "records:deleted": GenericEvent,
+        "file:created": GenericEvent,
+        "file:updated": GenericEvent,
+        "file:deleted": GenericEvent,
+        "file:expired": GenericEvent,
+        "job:created": GenericEvent,
+        "job:updated": GenericEvent,
+        "job:deleted": GenericEvent,
+        "job:failed": GenericEvent,
+        "job:completed": GenericEvent,
+        "job:ready": GenericEvent,
+        "job:scheduled": GenericEvent,
+        "job:outcome-acknowledged": GenericEvent,
+        "job:parts-completed": GenericEvent,
+        "program:created": GenericEvent,
+        "program:updated": GenericEvent,
+        "commit:created": GenericEvent,
+        "commit:updated": GenericEvent,
+        "commit:completed": GenericEvent,
+        "secret:created": GenericEvent,
+        "secret:updated": GenericEvent,
+        "secret:deleted": GenericEvent,
+        "layer:created": GenericEvent,
     })
@@ -84,2 +86,3 @@ export declare namespace Event {
         | Event.SheetDeleted
+        | Event.SheetCountsUpdated
         | Event.SnapshotCreated
@@ -111,3 +114,3 @@ export declare namespace Event {
 
-    interface AgentCreated extends serializers.GenericEvent.Raw {
+    interface AgentCreated extends GenericEvent.Raw {
         topic: "agent:created";
@@ -115,3 +118,3 @@ export declare namespace Event {
 
-    interface AgentUpdated extends serializers.GenericEvent.Raw {
+    interface AgentUpdated extends GenericEvent.Raw {
         topic: "agent:updated";
@@ -119,3 +122,3 @@ export declare namespace Event {
 
-    interface AgentDeleted extends serializers.GenericEvent.Raw {
+    interface AgentDeleted extends GenericEvent.Raw {
         topic: "agent:deleted";
@@ -123,3 +126,3 @@ export declare namespace Event {
 
-    interface SpaceCreated extends serializers.GenericEvent.Raw {
+    interface SpaceCreated extends GenericEvent.Raw {
         topic: "space:created";
@@ -127,3 +130,3 @@ export declare namespace Event {
 
-    interface SpaceUpdated extends serializers.GenericEvent.Raw {
+    interface SpaceUpdated extends GenericEvent.Raw {
         topic: "space:updated";
@@ -131,3 +134,3 @@ export declare namespace Event {
 
-    interface SpaceDeleted extends serializers.GenericEvent.Raw {
+    interface SpaceDeleted extends GenericEvent.Raw {
         topic: "space:deleted";
@@ -135,3 +138,3 @@ export declare namespace Event {
 
-    interface SpaceArchived extends serializers.GenericEvent.Raw {
+    interface SpaceArchived extends GenericEvent.Raw {
         topic: "space:archived";
@@ -139,3 +142,3 @@ export declare namespace Event {
 
-    interface SpaceExpired extends serializers.GenericEvent.Raw {
+    interface SpaceExpired extends GenericEvent.Raw {
         topic: "space:expired";
@@ -143,3 +146,3 @@ export declare namespace Event {
 
-    interface SpaceGuestAdded extends serializers.GenericEvent.Raw {
+    interface SpaceGuestAdded extends GenericEvent.Raw {
         topic: "space:guestAdded";
@@ -147,3 +150,3 @@ export declare namespace Event {
 
-    interface SpaceGuestRemoved extends serializers.GenericEvent.Raw {
+    interface SpaceGuestRemoved extends GenericEvent.Raw {
         topic: "space:guestRemoved";
@@ -151,3 +154,3 @@ export declare namespace Event {
 
-    interface DocumentCreated extends serializers.GenericEvent.Raw {
+    interface DocumentCreated extends GenericEvent.Raw {
         topic: "document:created";
@@ -155,3 +158,3 @@ export declare namespace Event {
 
-    interface DocumentUpdated extends serializers.GenericEvent.Raw {
+    interface DocumentUpdated extends GenericEvent.Raw {
         topic: "document:updated";
@@ -159,3 +162,3 @@ export declare namespace Event {
 
-    interface DocumentDeleted extends serializers.GenericEvent.Raw {
+    interface DocumentDeleted extends GenericEvent.Raw {
         topic: "document:deleted";
@@ -163,3 +166,3 @@ export declare namespace Event {
 
-    interface WorkbookCreated extends serializers.GenericEvent.Raw {
+    interface WorkbookCreated extends GenericEvent.Raw {
         topic: "workbook:created";
@@ -167,3 +170,3 @@ export declare namespace Event {
 
-    interface WorkbookUpdated extends serializers.GenericEvent.Raw {
+    interface WorkbookUpdated extends GenericEvent.Raw {
         topic: "workbook:updated";
@@ -171,3 +174,3 @@ export declare namespace Event {
 
-    interface WorkbookDeleted extends serializers.GenericEvent.Raw {
+    interface WorkbookDeleted extends GenericEvent.Raw {
         topic: "workbook:deleted";
@@ -175,3 +178,3 @@ export declare namespace Event {
 
-    interface WorkbookExpired extends serializers.GenericEvent.Raw {
+    interface WorkbookExpired extends GenericEvent.Raw {
         topic: "workbook:expired";
@@ -179,3 +182,3 @@ export declare namespace Event {
 
-    interface SheetCreated extends serializers.GenericEvent.Raw {
+    interface SheetCreated extends GenericEvent.Raw {
         topic: "sheet:created";
@@ -183,3 +186,3 @@ export declare namespace Event {
 
-    interface SheetUpdated extends serializers.GenericEvent.Raw {
+    interface SheetUpdated extends GenericEvent.Raw {
         topic: "sheet:updated";
@@ -187,3 +190,3 @@ export declare namespace Event {
 
-    interface SheetDeleted extends serializers.GenericEvent.Raw {
+    interface SheetDeleted extends GenericEvent.Raw {
         topic: "sheet:deleted";
@@ -191,3 +194,7 @@ export declare namespace Event {
 
-    interface SnapshotCreated extends serializers.GenericEvent.Raw {
+    interface SheetCountsUpdated extends GenericEvent.Raw {
+        topic: "sheet:counts-updated";
+    }
+
+    interface SnapshotCreated extends GenericEvent.Raw {
         topic: "snapshot:created";
@@ -195,3 +202,3 @@ export declare namespace Event {
 
-    interface RecordsCreated extends serializers.GenericEvent.Raw {
+    interface RecordsCreated extends GenericEvent.Raw {
         topic: "records:created";
@@ -199,3 +206,3 @@ export declare namespace Event {
 
-    interface RecordsUpdated extends serializers.GenericEvent.Raw {
+    interface RecordsUpdated extends GenericEvent.Raw {
         topic: "records:updated";
@@ -203,3 +210,3 @@ export declare namespace Event {
 
-    interface RecordsDeleted extends serializers.GenericEvent.Raw {
+    interface RecordsDeleted extends GenericEvent.Raw {
         topic: "records:deleted";
@@ -207,3 +214,3 @@ export declare namespace Event {
 
-    interface FileCreated extends serializers.GenericEvent.Raw {
+    interface FileCreated extends GenericEvent.Raw {
         topic: "file:created";
@@ -211,3 +218,3 @@ export declare namespace Event {
 
-    interface FileUpdated extends serializers.GenericEvent.Raw {
+    interface FileUpdated extends GenericEvent.Raw {
         topic: "file:updated";
@@ -215,3 +222,3 @@ export declare namespace Event {
 
-    interface FileDeleted extends serializers.GenericEvent.Raw {
+    interface FileDeleted extends GenericEvent.Raw {
         topic: "file:deleted";
@@ -219,3 +226,3 @@ export declare namespace Event {
 
-    interface FileExpired extends serializers.GenericEvent.Raw {
+    interface FileExpired extends GenericEvent.Raw {
         topic: "file:expired";
@@ -223,3 +230,3 @@ export declare namespace Event {
 
-    interface JobCreated extends serializers.GenericEvent.Raw {
+    interface JobCreated extends GenericEvent.Raw {
         topic: "job:created";
@@ -227,3 +234,3 @@ export declare namespace Event {
 
-    interface JobUpdated extends serializers.GenericEvent.Raw {
+    interface JobUpdated extends GenericEvent.Raw {
         topic: "job:updated";
@@ -231,3 +238,3 @@ export declare namespace Event {
 
-    interface JobDeleted extends serializers.GenericEvent.Raw {
+    interface JobDeleted extends GenericEvent.Raw {
         topic: "job:deleted";
@@ -235,3 +242,3 @@ export declare namespace Event {
 
-    interface JobFailed extends serializers.GenericEvent.Raw {
+    interface JobFailed extends GenericEvent.Raw {
         topic: "job:failed";
@@ -239,3 +246,3 @@ export declare namespace Event {
 
-    interface JobCompleted extends serializers.GenericEvent.Raw {
+    interface JobCompleted extends GenericEvent.Raw {
         topic: "job:completed";
@@ -243,3 +250,3 @@ export declare namespace Event {
 
-    interface JobReady extends serializers.GenericEvent.Raw {
+    interface JobReady extends GenericEvent.Raw {
         topic: "job:ready";
@@ -247,3 +254,3 @@ export declare namespace Event {
 
-    interface JobScheduled extends serializers.GenericEvent.Raw {
+    interface JobScheduled extends GenericEvent.Raw {
         topic: "job:scheduled";
@@ -251,3 +258,3 @@ export declare namespace Event {
 
-    interface JobOutcomeAcknowledged extends serializers.GenericEvent.Raw {
+    interface JobOutcomeAcknowledged extends GenericEvent.Raw {
         topic: "job:outcome-acknowledged";
@@ -255,3 +262,3 @@ export declare namespace Event {
 
-    interface JobPartsCompleted extends serializers.GenericEvent.Raw {
+    interface JobPartsCompleted extends GenericEvent.Raw {
         topic: "job:parts-completed";
@@ -259,3 +266,3 @@ export declare namespace Event {
 
-    interface ProgramCreated extends serializers.GenericEvent.Raw {
+    interface ProgramCreated extends GenericEvent.Raw {
         topic: "program:created";
@@ -263,3 +270,3 @@ export declare namespace Event {
 
-    interface ProgramUpdated extends serializers.GenericEvent.Raw {
+    interface ProgramUpdated extends GenericEvent.Raw {
         topic: "program:updated";
@@ -267,3 +274,3 @@ export declare namespace Event {
 
-    interface CommitCreated extends serializers.GenericEvent.Raw {
+    interface CommitCreated extends GenericEvent.Raw {
         topic: "commit:created";
@@ -271,3 +278,3 @@ export declare namespace Event {
 
-    interface CommitUpdated extends serializers.GenericEvent.Raw {
+    interface CommitUpdated extends GenericEvent.Raw {
         topic: "commit:updated";
@@ -275,3 +282,3 @@ export declare namespace Event {
 
-    interface CommitCompleted extends serializers.GenericEvent.Raw {
+    interface CommitCompleted extends GenericEvent.Raw {
         topic: "commit:completed";
@@ -279,3 +286,3 @@ export declare namespace Event {
 
-    interface SecretCreated extends serializers.GenericEvent.Raw {
+    interface SecretCreated extends GenericEvent.Raw {
         topic: "secret:created";
@@ -283,3 +290,3 @@ export declare namespace Event {
 
-    interface SecretUpdated extends serializers.GenericEvent.Raw {
+    interface SecretUpdated extends GenericEvent.Raw {
         topic: "secret:updated";
@@ -287,3 +294,3 @@ export declare namespace Event {
 
-    interface SecretDeleted extends serializers.GenericEvent.Raw {
+    interface SecretDeleted extends GenericEvent.Raw {
         topic: "secret:deleted";
@@ -291,3 +298,3 @@ export declare namespace Event {
 
-    interface LayerCreated extends serializers.GenericEvent.Raw {
+    interface LayerCreated extends GenericEvent.Raw {
         topic: "layer:created";
diff --git a/src/serialization/resources/events/types/EventAttributes.ts b/src/serialization/resources/events/types/EventAttributes.ts
index b7491b6..2c3d7a3 100644
--- a/src/serialization/resources/events/types/EventAttributes.ts
+++ b/src/serialization/resources/events/types/EventAttributes.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Progress } from "./Progress";
 
@@ -13,3 +14,3 @@ export const EventAttributes: core.serialization.ObjectSchema<
     targetUpdatedAt: core.serialization.date().optional(),
-    progress: core.serialization.lazyObject(async () => (await import("../../..")).Progress).optional(),
+    progress: Progress.optional(),
 });
@@ -19,3 +20,3 @@ export declare namespace EventAttributes {
         targetUpdatedAt?: string | null;
-        progress?: serializers.Progress.Raw | null;
+        progress?: Progress.Raw | null;
     }
diff --git a/src/serialization/resources/events/types/EventResponse.ts b/src/serialization/resources/events/types/EventResponse.ts
index ed7cea4..01c2432 100644
--- a/src/serialization/resources/events/types/EventResponse.ts
+++ b/src/serialization/resources/events/types/EventResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Event } from "./Event";
 
@@ -10,3 +11,3 @@ export const EventResponse: core.serialization.ObjectSchema<serializers.EventRes
     core.serialization.object({
-        data: core.serialization.lazy(async () => (await import("../../..")).Event),
+        data: Event,
     });
@@ -15,3 +16,3 @@ export declare namespace EventResponse {
     interface Raw {
-        data: serializers.Event.Raw;
+        data: Event.Raw;
     }
diff --git a/src/serialization/resources/events/types/EventTopic.ts b/src/serialization/resources/events/types/EventTopic.ts
index 4fd0d1d..5805426 100644
--- a/src/serialization/resources/events/types/EventTopic.ts
+++ b/src/serialization/resources/events/types/EventTopic.ts
@@ -30,2 +30,3 @@ export const EventTopic: core.serialization.Schema<serializers.EventTopic.Raw, F
         "sheet:deleted",
+        "sheet:counts-updated",
         "snapshot:created",
@@ -84,2 +85,3 @@ export declare namespace EventTopic {
         | "sheet:deleted"
+        | "sheet:counts-updated"
         | "snapshot:created"
diff --git a/src/serialization/resources/events/types/GenericEvent.ts b/src/serialization/resources/events/types/GenericEvent.ts
index 747656a..2355633 100644
--- a/src/serialization/resources/events/types/GenericEvent.ts
+++ b/src/serialization/resources/events/types/GenericEvent.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { EventId } from "../../commons/types/EventId";
+import { BaseEvent } from "./BaseEvent";
 
@@ -11,3 +13,3 @@ export const GenericEvent: core.serialization.ObjectSchema<serializers.GenericEv
         .object({
-            id: core.serialization.lazy(async () => (await import("../../..")).EventId),
+            id: EventId,
             createdAt: core.serialization.date(),
@@ -18,7 +20,7 @@ export const GenericEvent: core.serialization.ObjectSchema<serializers.GenericEv
         })
-        .extend(core.serialization.lazyObject(async () => (await import("../../..")).BaseEvent));
+        .extend(BaseEvent);
 
 export declare namespace GenericEvent {
-    interface Raw extends serializers.BaseEvent.Raw {
-        id: serializers.EventId.Raw;
+    interface Raw extends BaseEvent.Raw {
+        id: EventId.Raw;
         createdAt: string;
diff --git a/src/serialization/resources/events/types/ListAllEventsResponse.ts b/src/serialization/resources/events/types/ListAllEventsResponse.ts
index 4a5a4df..ea80637 100644
--- a/src/serialization/resources/events/types/ListAllEventsResponse.ts
+++ b/src/serialization/resources/events/types/ListAllEventsResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Event } from "./Event";
 
@@ -12,3 +13,3 @@ export const ListAllEventsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(core.serialization.lazy(async () => (await import("../../..")).Event)),
+    data: core.serialization.list(Event),
 });
@@ -17,3 +18,3 @@ export declare namespace ListAllEventsResponse {
     interface Raw {
-        data: serializers.Event.Raw[];
+        data: Event.Raw[];
     }
diff --git a/src/serialization/resources/files/client/requests/UpdateFileRequest.ts b/src/serialization/resources/files/client/requests/UpdateFileRequest.ts
index c051d5b..cdac336 100644
--- a/src/serialization/resources/files/client/requests/UpdateFileRequest.ts
+++ b/src/serialization/resources/files/client/requests/UpdateFileRequest.ts
@@ -7,2 +7,6 @@ import * as Flatfile from "../../../../../api";
 import * as core from "../../../../../core";
+import { WorkbookId } from "../../../commons/types/WorkbookId";
+import { Mode } from "../../types/Mode";
+import { ModelFileStatusEnum } from "../../types/ModelFileStatusEnum";
+import { Action } from "../../../commons/types/Action";
 
@@ -12,9 +16,7 @@ export const UpdateFileRequest: core.serialization.Schema<
 > = core.serialization.object({
-    workbookId: core.serialization.lazy(async () => (await import("../../../..")).WorkbookId).optional(),
+    workbookId: WorkbookId.optional(),
     name: core.serialization.string().optional(),
-    mode: core.serialization.lazy(async () => (await import("../../../..")).Mode).optional(),
-    status: core.serialization.lazy(async () => (await import("../../../..")).ModelFileStatusEnum).optional(),
-    actions: core.serialization
-        .list(core.serialization.lazyObject(async () => (await import("../../../..")).Action))
-        .optional(),
+    mode: Mode.optional(),
+    status: ModelFileStatusEnum.optional(),
+    actions: core.serialization.list(Action).optional(),
 });
@@ -23,7 +25,7 @@ export declare namespace UpdateFileRequest {
     interface Raw {
-        workbookId?: serializers.WorkbookId.Raw | null;
+        workbookId?: WorkbookId.Raw | null;
         name?: string | null;
-        mode?: serializers.Mode.Raw | null;
-        status?: serializers.ModelFileStatusEnum.Raw | null;
-        actions?: serializers.Action.Raw[] | null;
+        mode?: Mode.Raw | null;
+        status?: ModelFileStatusEnum.Raw | null;
+        actions?: Action.Raw[] | null;
     }
diff --git a/src/serialization/resources/files/types/FileResponse.ts b/src/serialization/resources/files/types/FileResponse.ts
index 6d471d0..dfdcf4a 100644
--- a/src/serialization/resources/files/types/FileResponse.ts
+++ b/src/serialization/resources/files/types/FileResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { File_ } from "./File_";
 
@@ -10,3 +11,3 @@ export const FileResponse: core.serialization.ObjectSchema<serializers.FileRespo
     core.serialization.object({
-        data: core.serialization.lazyObject(async () => (await import("../../..")).File_),
+        data: File_,
     });
@@ -15,3 +16,3 @@ export declare namespace FileResponse {
     interface Raw {
-        data: serializers.File_.Raw;
+        data: File_.Raw;
     }
diff --git a/src/serialization/resources/files/types/File_.ts b/src/serialization/resources/files/types/File_.ts
index be5afe6..e51ec4e 100644
--- a/src/serialization/resources/files/types/File_.ts
+++ b/src/serialization/resources/files/types/File_.ts
@@ -7,5 +7,12 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { FileId } from "../../commons/types/FileId";
+import { ModelFileStatusEnum } from "./ModelFileStatusEnum";
+import { Mode } from "./Mode";
+import { SpaceId } from "../../commons/types/SpaceId";
+import { WorkbookId } from "../../commons/types/WorkbookId";
+import { SheetId } from "../../commons/types/SheetId";
+import { Action } from "../../commons/types/Action";
 
 export const File_: core.serialization.ObjectSchema<serializers.File_.Raw, Flatfile.File_> = core.serialization.object({
-    id: core.serialization.lazy(async () => (await import("../../..")).FileId),
+    id: FileId,
     name: core.serialization.string(),
@@ -14,4 +21,4 @@ export const File_: core.serialization.ObjectSchema<serializers.File_.Raw, Flatf
     encoding: core.serialization.string(),
-    status: core.serialization.lazy(async () => (await import("../../..")).ModelFileStatusEnum),
-    mode: core.serialization.lazy(async () => (await import("../../..")).Mode).optional(),
+    status: ModelFileStatusEnum,
+    mode: Mode.optional(),
     size: core.serialization.number(),
@@ -21,8 +28,6 @@ export const File_: core.serialization.ObjectSchema<serializers.File_.Raw, Flatf
     expiredAt: core.serialization.date().optional(),
-    spaceId: core.serialization.lazy(async () => (await import("../../..")).SpaceId),
-    workbookId: core.serialization.lazy(async () => (await import("../../..")).WorkbookId).optional(),
-    sheetId: core.serialization.lazy(async () => (await import("../../..")).SheetId).optional(),
-    actions: core.serialization
-        .list(core.serialization.lazyObject(async () => (await import("../../..")).Action))
-        .optional(),
+    spaceId: SpaceId,
+    workbookId: WorkbookId.optional(),
+    sheetId: SheetId.optional(),
+    actions: core.serialization.list(Action).optional(),
 });
@@ -31,3 +36,3 @@ export declare namespace File_ {
     interface Raw {
-        id: serializers.FileId.Raw;
+        id: FileId.Raw;
         name: string;
@@ -36,4 +41,4 @@ export declare namespace File_ {
         encoding: string;
-        status: serializers.ModelFileStatusEnum.Raw;
-        mode?: serializers.Mode.Raw | null;
+        status: ModelFileStatusEnum.Raw;
+        mode?: Mode.Raw | null;
         size: number;
@@ -43,6 +48,6 @@ export declare namespace File_ {
         expiredAt?: string | null;
-        spaceId: serializers.SpaceId.Raw;
-        workbookId?: serializers.WorkbookId.Raw | null;
-        sheetId?: serializers.SheetId.Raw | null;
-        actions?: serializers.Action.Raw[] | null;
+        spaceId: SpaceId.Raw;
+        workbookId?: WorkbookId.Raw | null;
+        sheetId?: SheetId.Raw | null;
+        actions?: Action.Raw[] | null;
     }
diff --git a/src/serialization/resources/files/types/ListFilesResponse.ts b/src/serialization/resources/files/types/ListFilesResponse.ts
index 031df46..3fd4366 100644
--- a/src/serialization/resources/files/types/ListFilesResponse.ts
+++ b/src/serialization/resources/files/types/ListFilesResponse.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Pagination } from "../../commons/types/Pagination";
+import { File_ } from "./File_";
 
@@ -12,4 +14,4 @@ export const ListFilesResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    pagination: core.serialization.lazyObject(async () => (await import("../../..")).Pagination).optional(),
-    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).File_)),
+    pagination: Pagination.optional(),
+    data: core.serialization.list(File_),
 });
@@ -18,4 +20,4 @@ export declare namespace ListFilesResponse {
     interface Raw {
-        pagination?: serializers.Pagination.Raw | null;
-        data: serializers.File_.Raw[];
+        pagination?: Pagination.Raw | null;
+        data: File_.Raw[];
     }
diff --git a/src/serialization/resources/foreigndb/index.ts b/src/serialization/resources/foreigndb/index.ts
new file mode 100644
index 0000000..eea524d
--- /dev/null
+++ b/src/serialization/resources/foreigndb/index.ts
@@ -0,0 +1 @@
+export * from "./types";
diff --git a/src/serialization/resources/foreigndb/types/DatabaseTask.ts b/src/serialization/resources/foreigndb/types/DatabaseTask.ts
new file mode 100644
index 0000000..0ecae12
--- /dev/null
+++ b/src/serialization/resources/foreigndb/types/DatabaseTask.ts
@@ -0,0 +1,22 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+
+export const DatabaseTask: core.serialization.ObjectSchema<serializers.DatabaseTask.Raw, Flatfile.DatabaseTask> =
+    core.serialization.object({
+        status: core.serialization.string(),
+        type: core.serialization.string(),
+        progress: core.serialization.number(),
+    });
+
+export declare namespace DatabaseTask {
+    interface Raw {
+        status: string;
+        type: string;
+        progress: number;
+    }
+}
diff --git a/src/serialization/resources/foreigndb/types/GetDatabaseResponse.ts b/src/serialization/resources/foreigndb/types/GetDatabaseResponse.ts
new file mode 100644
index 0000000..c2ed67a
--- /dev/null
+++ b/src/serialization/resources/foreigndb/types/GetDatabaseResponse.ts
@@ -0,0 +1,21 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+import { DatabaseTask } from "./DatabaseTask";
+
+export const GetDatabaseResponse: core.serialization.ObjectSchema<
+    serializers.GetDatabaseResponse.Raw,
+    Flatfile.GetDatabaseResponse
+> = core.serialization.object({
+    task: DatabaseTask,
+});
+
+export declare namespace GetDatabaseResponse {
+    interface Raw {
+        task: DatabaseTask.Raw;
+    }
+}
diff --git a/src/serialization/resources/foreigndb/types/GetDatabaseUserResponse.ts b/src/serialization/resources/foreigndb/types/GetDatabaseUserResponse.ts
new file mode 100644
index 0000000..60c4812
--- /dev/null
+++ b/src/serialization/resources/foreigndb/types/GetDatabaseUserResponse.ts
@@ -0,0 +1,22 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+
+export const GetDatabaseUserResponse: core.serialization.ObjectSchema<
+    serializers.GetDatabaseUserResponse.Raw,
+    Flatfile.GetDatabaseUserResponse
+> = core.serialization.object({
+    username: core.serialization.string(),
+    password: core.serialization.string(),
+});
+
+export declare namespace GetDatabaseUserResponse {
+    interface Raw {
+        username: string;
+        password: string;
+    }
+}
diff --git a/src/serialization/resources/foreigndb/types/RestoreDatabaseRequest.ts b/src/serialization/resources/foreigndb/types/RestoreDatabaseRequest.ts
new file mode 100644
index 0000000..54f0df8
--- /dev/null
+++ b/src/serialization/resources/foreigndb/types/RestoreDatabaseRequest.ts
@@ -0,0 +1,20 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+
+export const RestoreDatabaseRequest: core.serialization.ObjectSchema<
+    serializers.RestoreDatabaseRequest.Raw,
+    Flatfile.RestoreDatabaseRequest
+> = core.serialization.object({
+    fileId: core.serialization.string(),
+});
+
+export declare namespace RestoreDatabaseRequest {
+    interface Raw {
+        fileId: string;
+    }
+}
diff --git a/src/serialization/resources/foreigndb/types/RestoreDatabaseResponse.ts b/src/serialization/resources/foreigndb/types/RestoreDatabaseResponse.ts
new file mode 100644
index 0000000..963dfea
--- /dev/null
+++ b/src/serialization/resources/foreigndb/types/RestoreDatabaseResponse.ts
@@ -0,0 +1,24 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+
+export const RestoreDatabaseResponse: core.serialization.ObjectSchema<
+    serializers.RestoreDatabaseResponse.Raw,
+    Flatfile.RestoreDatabaseResponse
+> = core.serialization.object({
+    host: core.serialization.string(),
+    port: core.serialization.number(),
+    dbname: core.serialization.string(),
+});
+
+export declare namespace RestoreDatabaseResponse {
+    interface Raw {
+        host: string;
+        port: number;
+        dbname: string;
+    }
+}
diff --git a/src/serialization/resources/foreigndb/types/UploadToObjectStorageRequest.ts b/src/serialization/resources/foreigndb/types/UploadToObjectStorageRequest.ts
new file mode 100644
index 0000000..6aada70
--- /dev/null
+++ b/src/serialization/resources/foreigndb/types/UploadToObjectStorageRequest.ts
@@ -0,0 +1,20 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+
+export const UploadToObjectStorageRequest: core.serialization.ObjectSchema<
+    serializers.UploadToObjectStorageRequest.Raw,
+    Flatfile.UploadToObjectStorageRequest
+> = core.serialization.object({
+    fileId: core.serialization.string(),
+});
+
+export declare namespace UploadToObjectStorageRequest {
+    interface Raw {
+        fileId: string;
+    }
+}
diff --git a/src/serialization/resources/foreigndb/types/index.ts b/src/serialization/resources/foreigndb/types/index.ts
new file mode 100644
index 0000000..8086286
--- /dev/null
+++ b/src/serialization/resources/foreigndb/types/index.ts
@@ -0,0 +1,6 @@
+export * from "./UploadToObjectStorageRequest";
+export * from "./RestoreDatabaseRequest";
+export * from "./RestoreDatabaseResponse";
+export * from "./GetDatabaseResponse";
+export * from "./DatabaseTask";
+export * from "./GetDatabaseUserResponse";
diff --git a/src/serialization/resources/guests/client/create.ts b/src/serialization/resources/guests/client/create.ts
index cb67c36..864ae1c 100644
--- a/src/serialization/resources/guests/client/create.ts
+++ b/src/serialization/resources/guests/client/create.ts
@@ -7,8 +7,9 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { GuestConfig } from "../types/GuestConfig";
 
 export const Request: core.serialization.Schema<serializers.guests.create.Request.Raw, Flatfile.GuestConfig[]> =
-    core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).GuestConfig));
+    core.serialization.list(GuestConfig);
 
 export declare namespace Request {
-    type Raw = serializers.GuestConfig.Raw[];
+    type Raw = GuestConfig.Raw[];
 }
diff --git a/src/serialization/resources/guests/client/invite.ts b/src/serialization/resources/guests/client/invite.ts
index efd1d9d..6c27969 100644
--- a/src/serialization/resources/guests/client/invite.ts
+++ b/src/serialization/resources/guests/client/invite.ts
@@ -7,8 +7,9 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Invite } from "../types/Invite";
 
 export const Request: core.serialization.Schema<serializers.guests.invite.Request.Raw, Flatfile.Invite[]> =
-    core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Invite));
+    core.serialization.list(Invite);
 
 export declare namespace Request {
-    type Raw = serializers.Invite.Raw[];
+    type Raw = Invite.Raw[];
 }
diff --git a/src/serialization/resources/guests/types/CreateGuestResponse.ts b/src/serialization/resources/guests/types/CreateGuestResponse.ts
index 83ae108..153dc3f 100644
--- a/src/serialization/resources/guests/types/CreateGuestResponse.ts
+++ b/src/serialization/resources/guests/types/CreateGuestResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Guest } from "./Guest";
 
@@ -12,3 +13,3 @@ export const CreateGuestResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Guest)),
+    data: core.serialization.list(Guest),
 });
@@ -17,3 +18,3 @@ export declare namespace CreateGuestResponse {
     interface Raw {
-        data: serializers.Guest.Raw[];
+        data: Guest.Raw[];
     }
diff --git a/src/serialization/resources/guests/types/Guest.ts b/src/serialization/resources/guests/types/Guest.ts
index 7e86e97..6eddce0 100644
--- a/src/serialization/resources/guests/types/Guest.ts
+++ b/src/serialization/resources/guests/types/Guest.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { GuestId } from "../../commons/types/GuestId";
+import { GuestConfig } from "./GuestConfig";
 
@@ -10,3 +12,3 @@ export const Guest: core.serialization.ObjectSchema<serializers.Guest.Raw, Flatf
     .object({
-        id: core.serialization.lazy(async () => (await import("../../..")).GuestId),
+        id: GuestId,
         createdAt: core.serialization.date(),
@@ -14,7 +16,7 @@ export const Guest: core.serialization.ObjectSchema<serializers.Guest.Raw, Flatf
     })
-    .extend(core.serialization.lazyObject(async () => (await import("../../..")).GuestConfig));
+    .extend(GuestConfig);
 
 export declare namespace Guest {
-    interface Raw extends serializers.GuestConfig.Raw {
-        id: serializers.GuestId.Raw;
+    interface Raw extends GuestConfig.Raw {
+        id: GuestId.Raw;
         createdAt: string;
diff --git a/src/serialization/resources/guests/types/GuestConfig.ts b/src/serialization/resources/guests/types/GuestConfig.ts
index d996f49..c329126 100644
--- a/src/serialization/resources/guests/types/GuestConfig.ts
+++ b/src/serialization/resources/guests/types/GuestConfig.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { EnvironmentId } from "../../commons/types/EnvironmentId";
+import { GuestSpace } from "./GuestSpace";
 
@@ -10,8 +12,6 @@ export const GuestConfig: core.serialization.ObjectSchema<serializers.GuestConfi
     core.serialization.object({
-        environmentId: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId),
+        environmentId: EnvironmentId,
         email: core.serialization.string(),
         name: core.serialization.string(),
-        spaces: core.serialization.list(
-            core.serialization.lazyObject(async () => (await import("../../..")).GuestSpace)
-        ),
+        spaces: core.serialization.list(GuestSpace),
     });
@@ -20,6 +20,6 @@ export declare namespace GuestConfig {
     interface Raw {
-        environmentId: serializers.EnvironmentId.Raw;
+        environmentId: EnvironmentId.Raw;
         email: string;
         name: string;
-        spaces: serializers.GuestSpace.Raw[];
+        spaces: GuestSpace.Raw[];
     }
diff --git a/src/serialization/resources/guests/types/GuestConfigUpdate.ts b/src/serialization/resources/guests/types/GuestConfigUpdate.ts
index 38c8b39..53eed6f 100644
--- a/src/serialization/resources/guests/types/GuestConfigUpdate.ts
+++ b/src/serialization/resources/guests/types/GuestConfigUpdate.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { EnvironmentId } from "../../commons/types/EnvironmentId";
+import { GuestSpace } from "./GuestSpace";
 
@@ -12,8 +14,6 @@ export const GuestConfigUpdate: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    environmentId: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId).optional(),
+    environmentId: EnvironmentId.optional(),
     email: core.serialization.string().optional(),
     name: core.serialization.string().optional(),
-    spaces: core.serialization
-        .list(core.serialization.lazyObject(async () => (await import("../../..")).GuestSpace))
-        .optional(),
+    spaces: core.serialization.list(GuestSpace).optional(),
 });
@@ -22,6 +22,6 @@ export declare namespace GuestConfigUpdate {
     interface Raw {
-        environmentId?: serializers.EnvironmentId.Raw | null;
+        environmentId?: EnvironmentId.Raw | null;
         email?: string | null;
         name?: string | null;
-        spaces?: serializers.GuestSpace.Raw[] | null;
+        spaces?: GuestSpace.Raw[] | null;
     }
diff --git a/src/serialization/resources/guests/types/GuestResponse.ts b/src/serialization/resources/guests/types/GuestResponse.ts
index 89a0694..940f16b 100644
--- a/src/serialization/resources/guests/types/GuestResponse.ts
+++ b/src/serialization/resources/guests/types/GuestResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Guest } from "./Guest";
 
@@ -10,3 +11,3 @@ export const GuestResponse: core.serialization.ObjectSchema<serializers.GuestRes
     core.serialization.object({
-        data: core.serialization.lazyObject(async () => (await import("../../..")).Guest),
+        data: Guest,
     });
@@ -15,3 +16,3 @@ export declare namespace GuestResponse {
     interface Raw {
-        data: serializers.Guest.Raw;
+        data: Guest.Raw;
     }
diff --git a/src/serialization/resources/guests/types/GuestSpace.ts b/src/serialization/resources/guests/types/GuestSpace.ts
index 9b80f8a..dfe9099 100644
--- a/src/serialization/resources/guests/types/GuestSpace.ts
+++ b/src/serialization/resources/guests/types/GuestSpace.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { SpaceId } from "../../commons/types/SpaceId";
+import { GuestWorkbook } from "./GuestWorkbook";
 
@@ -10,6 +12,4 @@ export const GuestSpace: core.serialization.ObjectSchema<serializers.GuestSpace.
     core.serialization.object({
-        id: core.serialization.lazy(async () => (await import("../../..")).SpaceId),
-        workbooks: core.serialization
-            .list(core.serialization.lazyObject(async () => (await import("../../..")).GuestWorkbook))
-            .optional(),
+        id: SpaceId,
+        workbooks: core.serialization.list(GuestWorkbook).optional(),
         lastAccessed: core.serialization.date().optional(),
@@ -19,4 +19,4 @@ export declare namespace GuestSpace {
     interface Raw {
-        id: serializers.SpaceId.Raw;
-        workbooks?: serializers.GuestWorkbook.Raw[] | null;
+        id: SpaceId.Raw;
+        workbooks?: GuestWorkbook.Raw[] | null;
         lastAccessed?: string | null;
diff --git a/src/serialization/resources/guests/types/GuestTokenResponse.ts b/src/serialization/resources/guests/types/GuestTokenResponse.ts
index 29ed00c..c1f31b5 100644
--- a/src/serialization/resources/guests/types/GuestTokenResponse.ts
+++ b/src/serialization/resources/guests/types/GuestTokenResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { GuestToken } from "./GuestToken";
 
@@ -12,3 +13,3 @@ export const GuestTokenResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.lazyObject(async () => (await import("../../..")).GuestToken),
+    data: GuestToken,
 });
@@ -17,3 +18,3 @@ export declare namespace GuestTokenResponse {
     interface Raw {
-        data: serializers.GuestToken.Raw;
+        data: GuestToken.Raw;
     }
diff --git a/src/serialization/resources/guests/types/GuestWorkbook.ts b/src/serialization/resources/guests/types/GuestWorkbook.ts
index a98d6e0..d4d47c5 100644
--- a/src/serialization/resources/guests/types/GuestWorkbook.ts
+++ b/src/serialization/resources/guests/types/GuestWorkbook.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { WorkbookId } from "../../commons/types/WorkbookId";
 
@@ -10,3 +11,3 @@ export const GuestWorkbook: core.serialization.ObjectSchema<serializers.GuestWor
     core.serialization.object({
-        id: core.serialization.lazy(async () => (await import("../../..")).WorkbookId),
+        id: WorkbookId,
     });
@@ -15,3 +16,3 @@ export declare namespace GuestWorkbook {
     interface Raw {
-        id: serializers.WorkbookId.Raw;
+        id: WorkbookId.Raw;
     }
diff --git a/src/serialization/resources/guests/types/Invite.ts b/src/serialization/resources/guests/types/Invite.ts
index c13ddcc..3b68895 100644
--- a/src/serialization/resources/guests/types/Invite.ts
+++ b/src/serialization/resources/guests/types/Invite.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { GuestId } from "../../commons/types/GuestId";
+import { SpaceId } from "../../commons/types/SpaceId";
 
@@ -10,4 +12,4 @@ export const Invite: core.serialization.ObjectSchema<serializers.Invite.Raw, Fla
     core.serialization.object({
-        guestId: core.serialization.lazy(async () => (await import("../../..")).GuestId),
-        spaceId: core.serialization.lazy(async () => (await import("../../..")).SpaceId),
+        guestId: GuestId,
+        spaceId: SpaceId,
         fromName: core.serialization.string().optional(),
@@ -18,4 +20,4 @@ export declare namespace Invite {
     interface Raw {
-        guestId: serializers.GuestId.Raw;
-        spaceId: serializers.SpaceId.Raw;
+        guestId: GuestId.Raw;
+        spaceId: SpaceId.Raw;
         fromName?: string | null;
diff --git a/src/serialization/resources/guests/types/ListGuestsResponse.ts b/src/serialization/resources/guests/types/ListGuestsResponse.ts
index 3c56e62..fd06575 100644
--- a/src/serialization/resources/guests/types/ListGuestsResponse.ts
+++ b/src/serialization/resources/guests/types/ListGuestsResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Guest } from "./Guest";
 
@@ -12,3 +13,3 @@ export const ListGuestsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Guest)),
+    data: core.serialization.list(Guest),
 });
@@ -17,3 +18,3 @@ export declare namespace ListGuestsResponse {
     interface Raw {
-        data: serializers.Guest.Raw[];
+        data: Guest.Raw[];
     }
diff --git a/src/serialization/resources/index.ts b/src/serialization/resources/index.ts
index 06437e8..481e6bc 100644
--- a/src/serialization/resources/index.ts
+++ b/src/serialization/resources/index.ts
@@ -1 +1,3 @@
+export * as accounts from "./accounts";
+export * from "./accounts/types";
 export * as agents from "./agents";
@@ -4,2 +6,4 @@ export * as apps from "./apps";
 export * from "./apps/types";
+export * as assistant from "./assistant";
+export * from "./assistant/types";
 export * as auth from "./auth";
@@ -24,2 +28,4 @@ export * as files from "./files";
 export * from "./files/types";
+export * as foreigndb from "./foreigndb";
+export * from "./foreigndb/types";
 export * as guests from "./guests";
diff --git a/src/serialization/resources/jobs/client/ack.ts b/src/serialization/resources/jobs/client/ack.ts
index 6093d08..5d541b3 100644
--- a/src/serialization/resources/jobs/client/ack.ts
+++ b/src/serialization/resources/jobs/client/ack.ts
@@ -7,8 +7,9 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { JobAckDetails } from "../types/JobAckDetails";
 
 export const Request: core.serialization.Schema<serializers.jobs.ack.Request.Raw, Flatfile.JobAckDetails | undefined> =
-    core.serialization.lazyObject(async () => (await import("../../..")).JobAckDetails).optional();
+    JobAckDetails.optional();
 
 export declare namespace Request {
-    type Raw = serializers.JobAckDetails.Raw | null | undefined;
+    type Raw = JobAckDetails.Raw | null | undefined;
 }
diff --git a/src/serialization/resources/jobs/client/cancel.ts b/src/serialization/resources/jobs/client/cancel.ts
index d1a7e1b..8751b32 100644
--- a/src/serialization/resources/jobs/client/cancel.ts
+++ b/src/serialization/resources/jobs/client/cancel.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { JobCancelDetails } from "../types/JobCancelDetails";
 
@@ -11,6 +12,6 @@ export const Request: core.serialization.Schema<
     Flatfile.JobCancelDetails | undefined
-> = core.serialization.lazyObject(async () => (await import("../../..")).JobCancelDetails).optional();
+> = JobCancelDetails.optional();
 
 export declare namespace Request {
-    type Raw = serializers.JobCancelDetails.Raw | null | undefined;
+    type Raw = JobCancelDetails.Raw | null | undefined;
 }
diff --git a/src/serialization/resources/jobs/client/complete.ts b/src/serialization/resources/jobs/client/complete.ts
index 2c1a1f5..84761c5 100644
--- a/src/serialization/resources/jobs/client/complete.ts
+++ b/src/serialization/resources/jobs/client/complete.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { JobCompleteDetails } from "../types/JobCompleteDetails";
 
@@ -11,6 +12,6 @@ export const Request: core.serialization.Schema<
     Flatfile.JobCompleteDetails | undefined
-> = core.serialization.lazyObject(async () => (await import("../../..")).JobCompleteDetails).optional();
+> = JobCompleteDetails.optional();
 
 export declare namespace Request {
-    type Raw = serializers.JobCompleteDetails.Raw | null | undefined;
+    type Raw = JobCompleteDetails.Raw | null | undefined;
 }
diff --git a/src/serialization/resources/jobs/client/fail.ts b/src/serialization/resources/jobs/client/fail.ts
index 87d0ca9..675ecdc 100644
--- a/src/serialization/resources/jobs/client/fail.ts
+++ b/src/serialization/resources/jobs/client/fail.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { JobCompleteDetails } from "../types/JobCompleteDetails";
 
@@ -11,6 +12,6 @@ export const Request: core.serialization.Schema<
     Flatfile.JobCompleteDetails | undefined
-> = core.serialization.lazyObject(async () => (await import("../../..")).JobCompleteDetails).optional();
+> = JobCompleteDetails.optional();
 
 export declare namespace Request {
-    type Raw = serializers.JobCompleteDetails.Raw | null | undefined;
+    type Raw = JobCompleteDetails.Raw | null | undefined;
 }
diff --git a/src/serialization/resources/jobs/types/CategoryMapping.ts b/src/serialization/resources/jobs/types/CategoryMapping.ts
index e4a805e..4d7c7ae 100644
--- a/src/serialization/resources/jobs/types/CategoryMapping.ts
+++ b/src/serialization/resources/jobs/types/CategoryMapping.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { EnumValue } from "./EnumValue";
 
@@ -12,4 +13,4 @@ export const CategoryMapping: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    sourceValue: core.serialization.lazy(async () => (await import("../../..")).EnumValue).optional(),
-    destinationValue: core.serialization.lazy(async () => (await import("../../..")).EnumValue).optional(),
+    sourceValue: EnumValue.optional(),
+    destinationValue: EnumValue.optional(),
 });
@@ -18,4 +19,4 @@ export declare namespace CategoryMapping {
     interface Raw {
-        sourceValue?: serializers.EnumValue.Raw | null;
-        destinationValue?: serializers.EnumValue.Raw | null;
+        sourceValue?: EnumValue.Raw | null;
+        destinationValue?: EnumValue.Raw | null;
     }
diff --git a/src/serialization/resources/jobs/types/DeleteRecordsJobConfig.ts b/src/serialization/resources/jobs/types/DeleteRecordsJobConfig.ts
index c57ef84..59fe917 100644
--- a/src/serialization/resources/jobs/types/DeleteRecordsJobConfig.ts
+++ b/src/serialization/resources/jobs/types/DeleteRecordsJobConfig.ts
@@ -7,2 +7,8 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Filter } from "../../commons/types/Filter";
+import { FilterField } from "../../commons/types/FilterField";
+import { SearchValue } from "../../commons/types/SearchValue";
+import { SearchField } from "../../commons/types/SearchField";
+import { SheetId } from "../../commons/types/SheetId";
+import { RecordId } from "../../commons/types/RecordId";
 
@@ -12,11 +18,9 @@ export const DeleteRecordsJobConfig: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    filter: core.serialization.lazy(async () => (await import("../../..")).Filter).optional(),
-    filterField: core.serialization.lazy(async () => (await import("../../..")).FilterField).optional(),
-    searchValue: core.serialization.lazy(async () => (await import("../../..")).SearchValue).optional(),
-    searchField: core.serialization.lazy(async () => (await import("../../..")).SearchField).optional(),
+    filter: Filter.optional(),
+    filterField: FilterField.optional(),
+    searchValue: SearchValue.optional(),
+    searchField: SearchField.optional(),
     q: core.serialization.string().optional(),
-    sheet: core.serialization.lazy(async () => (await import("../../..")).SheetId),
-    exceptions: core.serialization
-        .list(core.serialization.lazy(async () => (await import("../../..")).RecordId))
-        .optional(),
+    sheet: SheetId,
+    exceptions: core.serialization.list(RecordId).optional(),
 });
@@ -25,9 +29,9 @@ export declare namespace DeleteRecordsJobConfig {
     interface Raw {
-        filter?: serializers.Filter.Raw | null;
-        filterField?: serializers.FilterField.Raw | null;
-        searchValue?: serializers.SearchValue.Raw | null;
-        searchField?: serializers.SearchField.Raw | null;
+        filter?: Filter.Raw | null;
+        filterField?: FilterField.Raw | null;
+        searchValue?: SearchValue.Raw | null;
+        searchField?: SearchField.Raw | null;
         q?: string | null;
-        sheet: serializers.SheetId.Raw;
-        exceptions?: serializers.RecordId.Raw[] | null;
+        sheet: SheetId.Raw;
+        exceptions?: RecordId.Raw[] | null;
     }
diff --git a/src/serialization/resources/jobs/types/DestinationField.ts b/src/serialization/resources/jobs/types/DestinationField.ts
index 31e1f45..3fc0838 100644
--- a/src/serialization/resources/jobs/types/DestinationField.ts
+++ b/src/serialization/resources/jobs/types/DestinationField.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Property } from "../../property/types/Property";
 
@@ -12,3 +13,3 @@ export const DestinationField: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    destinationField: core.serialization.lazy(async () => (await import("../../..")).Property),
+    destinationField: Property,
     preview: core.serialization.list(core.serialization.string()).optional(),
@@ -18,3 +19,3 @@ export declare namespace DestinationField {
     interface Raw {
-        destinationField: serializers.Property.Raw;
+        destinationField: Property.Raw;
         preview?: string[] | null;
diff --git a/src/serialization/resources/jobs/types/Edge.ts b/src/serialization/resources/jobs/types/Edge.ts
index 213c1d7..21d4702 100644
--- a/src/serialization/resources/jobs/types/Edge.ts
+++ b/src/serialization/resources/jobs/types/Edge.ts
@@ -7,9 +7,12 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Property } from "../../property/types/Property";
+import { EnumDetails } from "./EnumDetails";
+import { Metadata } from "./Metadata";
 
 export const Edge: core.serialization.ObjectSchema<serializers.Edge.Raw, Flatfile.Edge> = core.serialization.object({
-    sourceField: core.serialization.lazy(async () => (await import("../../..")).Property),
-    destinationField: core.serialization.lazy(async () => (await import("../../..")).Property),
+    sourceField: Property,
+    destinationField: Property,
     preview: core.serialization.list(core.serialization.string()).optional(),
-    enumDetails: core.serialization.lazyObject(async () => (await import("../../..")).EnumDetails).optional(),
-    metadata: core.serialization.lazyObject(async () => (await import("../../..")).Metadata).optional(),
+    enumDetails: EnumDetails.optional(),
+    metadata: Metadata.optional(),
 });
@@ -18,7 +21,7 @@ export declare namespace Edge {
     interface Raw {
-        sourceField: serializers.Property.Raw;
-        destinationField: serializers.Property.Raw;
+        sourceField: Property.Raw;
+        destinationField: Property.Raw;
         preview?: string[] | null;
-        enumDetails?: serializers.EnumDetails.Raw | null;
-        metadata?: serializers.Metadata.Raw | null;
+        enumDetails?: EnumDetails.Raw | null;
+        metadata?: Metadata.Raw | null;
     }
diff --git a/src/serialization/resources/jobs/types/EnumDetails.ts b/src/serialization/resources/jobs/types/EnumDetails.ts
index bb54392..a1b6ea5 100644
--- a/src/serialization/resources/jobs/types/EnumDetails.ts
+++ b/src/serialization/resources/jobs/types/EnumDetails.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { CategoryMapping } from "./CategoryMapping";
+import { EnumValue } from "./EnumValue";
 
@@ -10,11 +12,5 @@ export const EnumDetails: core.serialization.ObjectSchema<serializers.EnumDetail
     core.serialization.object({
-        mapping: core.serialization.list(
-            core.serialization.lazyObject(async () => (await import("../../..")).CategoryMapping)
-        ),
-        unusedSourceValues: core.serialization
-            .list(core.serialization.lazy(async () => (await import("../../..")).EnumValue))
-            .optional(),
-        unusedDestinationValues: core.serialization
-            .list(core.serialization.lazy(async () => (await import("../../..")).EnumValue))
-            .optional(),
+        mapping: core.serialization.list(CategoryMapping),
+        unusedSourceValues: core.serialization.list(EnumValue).optional(),
+        unusedDestinationValues: core.serialization.list(EnumValue).optional(),
     });
@@ -23,5 +19,5 @@ export declare namespace EnumDetails {
     interface Raw {
-        mapping: serializers.CategoryMapping.Raw[];
-        unusedSourceValues?: serializers.EnumValue.Raw[] | null;
-        unusedDestinationValues?: serializers.EnumValue.Raw[] | null;
+        mapping: CategoryMapping.Raw[];
+        unusedSourceValues?: EnumValue.Raw[] | null;
+        unusedDestinationValues?: EnumValue.Raw[] | null;
     }
diff --git a/src/serialization/resources/jobs/types/ExportJobConfig.ts b/src/serialization/resources/jobs/types/ExportJobConfig.ts
index a846432..6ec7e0e 100644
--- a/src/serialization/resources/jobs/types/ExportJobConfig.ts
+++ b/src/serialization/resources/jobs/types/ExportJobConfig.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { ExportOptions } from "./ExportOptions";
 
@@ -12,3 +13,3 @@ export const ExportJobConfig: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    options: core.serialization.lazyObject(async () => (await import("../../..")).ExportOptions),
+    options: ExportOptions,
 });
@@ -17,3 +18,3 @@ export declare namespace ExportJobConfig {
     interface Raw {
-        options: serializers.ExportOptions.Raw;
+        options: ExportOptions.Raw;
     }
diff --git a/src/serialization/resources/jobs/types/ExportOptions.ts b/src/serialization/resources/jobs/types/ExportOptions.ts
index a8f4db9..69719ef 100644
--- a/src/serialization/resources/jobs/types/ExportOptions.ts
+++ b/src/serialization/resources/jobs/types/ExportOptions.ts
@@ -7,2 +7,11 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { VersionId } from "../../commons/types/VersionId";
+import { CommitId } from "../../commons/types/CommitId";
+import { SortField } from "../../commons/types/SortField";
+import { SortDirection } from "../../commons/types/SortDirection";
+import { Filter } from "../../commons/types/Filter";
+import { FilterField } from "../../commons/types/FilterField";
+import { SearchValue } from "../../commons/types/SearchValue";
+import { SearchField } from "../../commons/types/SearchField";
+import { RecordId } from "../../commons/types/RecordId";
 
@@ -10,14 +19,12 @@ export const ExportOptions: core.serialization.ObjectSchema<serializers.ExportOp
     core.serialization.object({
-        versionId: core.serialization.lazy(async () => (await import("../../..")).VersionId).optional(),
-        commitId: core.serialization.lazy(async () => (await import("../../..")).CommitId).optional(),
-        sortField: core.serialization.lazy(async () => (await import("../../..")).SortField).optional(),
-        sortDirection: core.serialization.lazy(async () => (await import("../../..")).SortDirection).optional(),
-        filter: core.serialization.lazy(async () => (await import("../../..")).Filter).optional(),
-        filterField: core.serialization.lazy(async () => (await import("../../..")).FilterField).optional(),
-        searchValue: core.serialization.lazy(async () => (await import("../../..")).SearchValue).optional(),
-        searchField: core.serialization.lazy(async () => (await import("../../..")).SearchField).optional(),
+        versionId: VersionId.optional(),
+        commitId: CommitId.optional(),
+        sortField: SortField.optional(),
+        sortDirection: SortDirection.optional(),
+        filter: Filter.optional(),
+        filterField: FilterField.optional(),
+        searchValue: SearchValue.optional(),
+        searchField: SearchField.optional(),
         q: core.serialization.string().optional(),
-        ids: core.serialization
-            .list(core.serialization.lazy(async () => (await import("../../..")).RecordId))
-            .optional(),
+        ids: core.serialization.list(RecordId).optional(),
     });
@@ -26,12 +33,12 @@ export declare namespace ExportOptions {
     interface Raw {
-        versionId?: serializers.VersionId.Raw | null;
-        commitId?: serializers.CommitId.Raw | null;
-        sortField?: serializers.SortField.Raw | null;
-        sortDirection?: serializers.SortDirection.Raw | null;
-        filter?: serializers.Filter.Raw | null;
-        filterField?: serializers.FilterField.Raw | null;
-        searchValue?: serializers.SearchValue.Raw | null;
-        searchField?: serializers.SearchField.Raw | null;
+        versionId?: VersionId.Raw | null;
+        commitId?: CommitId.Raw | null;
+        sortField?: SortField.Raw | null;
+        sortDirection?: SortDirection.Raw | null;
+        filter?: Filter.Raw | null;
+        filterField?: FilterField.Raw | null;
+        searchValue?: SearchValue.Raw | null;
+        searchField?: SearchField.Raw | null;
         q?: string | null;
-        ids?: serializers.RecordId.Raw[] | null;
+        ids?: RecordId.Raw[] | null;
     }
diff --git a/src/serialization/resources/jobs/types/FileJobConfig.ts b/src/serialization/resources/jobs/types/FileJobConfig.ts
index 24589c9..2264e24 100644
--- a/src/serialization/resources/jobs/types/FileJobConfig.ts
+++ b/src/serialization/resources/jobs/types/FileJobConfig.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Driver } from "./Driver";
 
@@ -10,3 +11,3 @@ export const FileJobConfig: core.serialization.ObjectSchema<serializers.FileJobC
     core.serialization.object({
-        driver: core.serialization.lazy(async () => (await import("../../..")).Driver),
+        driver: Driver,
         options: core.serialization.record(core.serialization.string(), core.serialization.any()).optional(),
@@ -16,3 +17,3 @@ export declare namespace FileJobConfig {
     interface Raw {
-        driver: serializers.Driver.Raw;
+        driver: Driver.Raw;
         options?: Record<string, any> | null;
diff --git a/src/serialization/resources/jobs/types/FindAndReplaceJobConfig.ts b/src/serialization/resources/jobs/types/FindAndReplaceJobConfig.ts
index 4053fe5..a2173f9 100644
--- a/src/serialization/resources/jobs/types/FindAndReplaceJobConfig.ts
+++ b/src/serialization/resources/jobs/types/FindAndReplaceJobConfig.ts
@@ -7,2 +7,8 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Filter } from "../../commons/types/Filter";
+import { FilterField } from "../../commons/types/FilterField";
+import { SearchValue } from "../../commons/types/SearchValue";
+import { SearchField } from "../../commons/types/SearchField";
+import { RecordId } from "../../commons/types/RecordId";
+import { CellValueUnion } from "../../records/types/CellValueUnion";
 
@@ -12,10 +18,10 @@ export const FindAndReplaceJobConfig: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    filter: core.serialization.lazy(async () => (await import("../../..")).Filter).optional(),
-    filterField: core.serialization.lazy(async () => (await import("../../..")).FilterField).optional(),
-    searchValue: core.serialization.lazy(async () => (await import("../../..")).SearchValue).optional(),
-    searchField: core.serialization.lazy(async () => (await import("../../..")).SearchField).optional(),
+    filter: Filter.optional(),
+    filterField: FilterField.optional(),
+    searchValue: SearchValue.optional(),
+    searchField: SearchField.optional(),
     q: core.serialization.string().optional(),
-    ids: core.serialization.list(core.serialization.lazy(async () => (await import("../../..")).RecordId)).optional(),
-    find: core.serialization.lazy(async () => (await import("../../..")).CellValueUnion).optional(),
-    replace: core.serialization.lazy(async () => (await import("../../..")).CellValueUnion).optional(),
+    ids: core.serialization.list(RecordId).optional(),
+    find: CellValueUnion.optional(),
+    replace: CellValueUnion.optional(),
     fieldKey: core.serialization.string(),
@@ -25,10 +31,10 @@ export declare namespace FindAndReplaceJobConfig {
     interface Raw {
-        filter?: serializers.Filter.Raw | null;
-        filterField?: serializers.FilterField.Raw | null;
-        searchValue?: serializers.SearchValue.Raw | null;
-        searchField?: serializers.SearchField.Raw | null;
+        filter?: Filter.Raw | null;
+        filterField?: FilterField.Raw | null;
+        searchValue?: SearchValue.Raw | null;
+        searchField?: SearchField.Raw | null;
         q?: string | null;
-        ids?: serializers.RecordId.Raw[] | null;
-        find?: serializers.CellValueUnion.Raw | null;
-        replace?: serializers.CellValueUnion.Raw | null;
+        ids?: RecordId.Raw[] | null;
+        find?: CellValueUnion.Raw | null;
+        replace?: CellValueUnion.Raw | null;
         fieldKey: string;
diff --git a/src/serialization/resources/jobs/types/Job.ts b/src/serialization/resources/jobs/types/Job.ts
index 16a64d2..5726ad4 100644
--- a/src/serialization/resources/jobs/types/Job.ts
+++ b/src/serialization/resources/jobs/types/Job.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { JobId } from "../../commons/types/JobId";
+import { JobConfig } from "./JobConfig";
 
@@ -10,3 +12,3 @@ export const Job: core.serialization.ObjectSchema<serializers.Job.Raw, Flatfile.
     .object({
-        id: core.serialization.lazy(async () => (await import("../../..")).JobId),
+        id: JobId,
         createdAt: core.serialization.date(),
@@ -17,7 +19,7 @@ export const Job: core.serialization.ObjectSchema<serializers.Job.Raw, Flatfile.
     })
-    .extend(core.serialization.lazyObject(async () => (await import("../../..")).JobConfig));
+    .extend(JobConfig);
 
 export declare namespace Job {
-    interface Raw extends serializers.JobConfig.Raw {
-        id: serializers.JobId.Raw;
+    interface Raw extends JobConfig.Raw {
+        id: JobId.Raw;
         createdAt: string;
diff --git a/src/serialization/resources/jobs/types/JobCompleteDetails.ts b/src/serialization/resources/jobs/types/JobCompleteDetails.ts
index a0a9321..762e8e4 100644
--- a/src/serialization/resources/jobs/types/JobCompleteDetails.ts
+++ b/src/serialization/resources/jobs/types/JobCompleteDetails.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { JobOutcome } from "./JobOutcome";
 
@@ -12,3 +13,3 @@ export const JobCompleteDetails: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    outcome: core.serialization.lazyObject(async () => (await import("../../..")).JobOutcome).optional(),
+    outcome: JobOutcome.optional(),
     info: core.serialization.string().optional(),
@@ -18,3 +19,3 @@ export declare namespace JobCompleteDetails {
     interface Raw {
-        outcome?: serializers.JobOutcome.Raw | null;
+        outcome?: JobOutcome.Raw | null;
         info?: string | null;
diff --git a/src/serialization/resources/jobs/types/JobConfig.ts b/src/serialization/resources/jobs/types/JobConfig.ts
index 942ff42..46c6384 100644
--- a/src/serialization/resources/jobs/types/JobConfig.ts
+++ b/src/serialization/resources/jobs/types/JobConfig.ts
@@ -7,2 +7,14 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { JobType } from "./JobType";
+import { JobSource } from "./JobSource";
+import { JobDestination } from "./JobDestination";
+import { JobUpdateConfig } from "./JobUpdateConfig";
+import { Trigger } from "./Trigger";
+import { JobStatus } from "./JobStatus";
+import { FileId } from "../../commons/types/FileId";
+import { JobMode } from "./JobMode";
+import { JobSubject } from "./JobSubject";
+import { EnvironmentId } from "../../commons/types/EnvironmentId";
+import { JobPartExecution } from "./JobPartExecution";
+import { JobId } from "../../commons/types/JobId";
 
@@ -10,14 +22,14 @@ export const JobConfig: core.serialization.ObjectSchema<serializers.JobConfig.Ra
     core.serialization.object({
-        type: core.serialization.lazy(async () => (await import("../../..")).JobType),
+        type: JobType,
         operation: core.serialization.string(),
-        source: core.serialization.lazy(async () => (await import("../../..")).JobSource),
-        destination: core.serialization.lazy(async () => (await import("../../..")).JobDestination).optional(),
-        config: core.serialization.lazy(async () => (await import("../../..")).JobUpdateConfig).optional(),
-        trigger: core.serialization.lazy(async () => (await import("../../..")).Trigger).optional(),
-        status: core.serialization.lazy(async () => (await import("../../..")).JobStatus).optional(),
+        source: JobSource,
+        destination: JobDestination.optional(),
+        config: JobUpdateConfig.optional(),
+        trigger: Trigger.optional(),
+        status: JobStatus.optional(),
         progress: core.serialization.number().optional(),
-        fileId: core.serialization.lazy(async () => (await import("../../..")).FileId).optional(),
-        mode: core.serialization.lazy(async () => (await import("../../..")).JobMode).optional(),
+        fileId: FileId.optional(),
+        mode: JobMode.optional(),
         input: core.serialization.record(core.serialization.string(), core.serialization.any()).optional(),
-        subject: core.serialization.lazy(async () => (await import("../../..")).JobSubject).optional(),
+        subject: JobSubject.optional(),
         outcome: core.serialization.record(core.serialization.string(), core.serialization.any()).optional(),
@@ -25,7 +37,7 @@ export const JobConfig: core.serialization.ObjectSchema<serializers.JobConfig.Ra
         managed: core.serialization.boolean().optional(),
-        environmentId: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId).optional(),
+        environmentId: EnvironmentId.optional(),
         part: core.serialization.number().optional(),
         partData: core.serialization.record(core.serialization.string(), core.serialization.any()).optional(),
-        partExecution: core.serialization.lazy(async () => (await import("../../..")).JobPartExecution).optional(),
-        parentId: core.serialization.lazy(async () => (await import("../../..")).JobId).optional(),
+        partExecution: JobPartExecution.optional(),
+        parentId: JobId.optional(),
     });
@@ -34,14 +46,14 @@ export declare namespace JobConfig {
     interface Raw {
-        type: serializers.JobType.Raw;
+        type: JobType.Raw;
         operation: string;
-        source: serializers.JobSource.Raw;
-        destination?: serializers.JobDestination.Raw | null;
-        config?: serializers.JobUpdateConfig.Raw | null;
-        trigger?: serializers.Trigger.Raw | null;
-        status?: serializers.JobStatus.Raw | null;
+        source: JobSource.Raw;
+        destination?: JobDestination.Raw | null;
+        config?: JobUpdateConfig.Raw | null;
+        trigger?: Trigger.Raw | null;
+        status?: JobStatus.Raw | null;
         progress?: number | null;
-        fileId?: serializers.FileId.Raw | null;
-        mode?: serializers.JobMode.Raw | null;
+        fileId?: FileId.Raw | null;
+        mode?: JobMode.Raw | null;
         input?: Record<string, any> | null;
-        subject?: serializers.JobSubject.Raw | null;
+        subject?: JobSubject.Raw | null;
         outcome?: Record<string, any> | null;
@@ -49,7 +61,7 @@ export declare namespace JobConfig {
         managed?: boolean | null;
-        environmentId?: serializers.EnvironmentId.Raw | null;
+        environmentId?: EnvironmentId.Raw | null;
         part?: number | null;
         partData?: Record<string, any> | null;
-        partExecution?: serializers.JobPartExecution.Raw | null;
-        parentId?: serializers.JobId.Raw | null;
+        partExecution?: JobPartExecution.Raw | null;
+        parentId?: JobId.Raw | null;
     }
diff --git a/src/serialization/resources/jobs/types/JobDestination.ts b/src/serialization/resources/jobs/types/JobDestination.ts
index 21ac2f8..2594d3f 100644
--- a/src/serialization/resources/jobs/types/JobDestination.ts
+++ b/src/serialization/resources/jobs/types/JobDestination.ts
@@ -7,8 +7,9 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { WorkbookId } from "../../commons/types/WorkbookId";
 
 export const JobDestination: core.serialization.Schema<serializers.JobDestination.Raw, Flatfile.JobDestination> =
-    core.serialization.lazy(async () => (await import("../../..")).WorkbookId);
+    WorkbookId;
 
 export declare namespace JobDestination {
-    type Raw = serializers.WorkbookId.Raw;
+    type Raw = WorkbookId.Raw;
 }
diff --git a/src/serialization/resources/jobs/types/JobExecutionPlan.ts b/src/serialization/resources/jobs/types/JobExecutionPlan.ts
index f392d75..2937830 100644
--- a/src/serialization/resources/jobs/types/JobExecutionPlan.ts
+++ b/src/serialization/resources/jobs/types/JobExecutionPlan.ts
@@ -7,2 +7,5 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Edge } from "./Edge";
+import { SourceField } from "./SourceField";
+import { DestinationField } from "./DestinationField";
 
@@ -12,9 +15,5 @@ export const JobExecutionPlan: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    fieldMapping: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Edge)),
-    unmappedSourceFields: core.serialization.list(
-        core.serialization.lazyObject(async () => (await import("../../..")).SourceField)
-    ),
-    unmappedDestinationFields: core.serialization.list(
-        core.serialization.lazyObject(async () => (await import("../../..")).DestinationField)
-    ),
+    fieldMapping: core.serialization.list(Edge),
+    unmappedSourceFields: core.serialization.list(SourceField),
+    unmappedDestinationFields: core.serialization.list(DestinationField),
     programId: core.serialization.string().optional(),
@@ -24,5 +23,5 @@ export declare namespace JobExecutionPlan {
     interface Raw {
-        fieldMapping: serializers.Edge.Raw[];
-        unmappedSourceFields: serializers.SourceField.Raw[];
-        unmappedDestinationFields: serializers.DestinationField.Raw[];
+        fieldMapping: Edge.Raw[];
+        unmappedSourceFields: SourceField.Raw[];
+        unmappedDestinationFields: DestinationField.Raw[];
         programId?: string | null;
diff --git a/src/serialization/resources/jobs/types/JobExecutionPlanConfig.ts b/src/serialization/resources/jobs/types/JobExecutionPlanConfig.ts
index 4a1ff58..adbf6ec 100644
--- a/src/serialization/resources/jobs/types/JobExecutionPlanConfig.ts
+++ b/src/serialization/resources/jobs/types/JobExecutionPlanConfig.ts
@@ -7,2 +7,5 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Edge } from "./Edge";
+import { SourceField } from "./SourceField";
+import { DestinationField } from "./DestinationField";
 
@@ -12,11 +15,5 @@ export const JobExecutionPlanConfig: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    fieldMapping: core.serialization
-        .list(core.serialization.lazyObject(async () => (await import("../../..")).Edge))
-        .optional(),
-    unmappedSourceFields: core.serialization
-        .list(core.serialization.lazyObject(async () => (await import("../../..")).SourceField))
-        .optional(),
-    unmappedDestinationFields: core.serialization
-        .list(core.serialization.lazyObject(async () => (await import("../../..")).DestinationField))
-        .optional(),
+    fieldMapping: core.serialization.list(Edge).optional(),
+    unmappedSourceFields: core.serialization.list(SourceField).optional(),
+    unmappedDestinationFields: core.serialization.list(DestinationField).optional(),
     programId: core.serialization.string().optional(),
@@ -26,5 +23,5 @@ export declare namespace JobExecutionPlanConfig {
     interface Raw {
-        fieldMapping?: serializers.Edge.Raw[] | null;
-        unmappedSourceFields?: serializers.SourceField.Raw[] | null;
-        unmappedDestinationFields?: serializers.DestinationField.Raw[] | null;
+        fieldMapping?: Edge.Raw[] | null;
+        unmappedSourceFields?: SourceField.Raw[] | null;
+        unmappedDestinationFields?: DestinationField.Raw[] | null;
         programId?: string | null;
diff --git a/src/serialization/resources/jobs/types/JobExecutionPlanConfigRequest.ts b/src/serialization/resources/jobs/types/JobExecutionPlanConfigRequest.ts
index 3297026..b0be6dd 100644
--- a/src/serialization/resources/jobs/types/JobExecutionPlanConfigRequest.ts
+++ b/src/serialization/resources/jobs/types/JobExecutionPlanConfigRequest.ts
@@ -7,2 +7,5 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { FileId } from "../../commons/types/FileId";
+import { JobId } from "../../commons/types/JobId";
+import { JobExecutionPlanConfig } from "./JobExecutionPlanConfig";
 
@@ -13,11 +16,11 @@ export const JobExecutionPlanConfigRequest: core.serialization.ObjectSchema<
     .object({
-        fileId: core.serialization.lazy(async () => (await import("../../..")).FileId),
-        jobId: core.serialization.lazy(async () => (await import("../../..")).JobId),
+        fileId: FileId,
+        jobId: JobId,
     })
-    .extend(core.serialization.lazyObject(async () => (await import("../../..")).JobExecutionPlanConfig));
+    .extend(JobExecutionPlanConfig);
 
 export declare namespace JobExecutionPlanConfigRequest {
-    interface Raw extends serializers.JobExecutionPlanConfig.Raw {
-        fileId: serializers.FileId.Raw;
-        jobId: serializers.JobId.Raw;
+    interface Raw extends JobExecutionPlanConfig.Raw {
+        fileId: FileId.Raw;
+        jobId: JobId.Raw;
     }
diff --git a/src/serialization/resources/jobs/types/JobExecutionPlanRequest.ts b/src/serialization/resources/jobs/types/JobExecutionPlanRequest.ts
index 8fae6d3..79eb9f7 100644
--- a/src/serialization/resources/jobs/types/JobExecutionPlanRequest.ts
+++ b/src/serialization/resources/jobs/types/JobExecutionPlanRequest.ts
@@ -7,2 +7,5 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { FileId } from "../../commons/types/FileId";
+import { JobId } from "../../commons/types/JobId";
+import { JobExecutionPlan } from "./JobExecutionPlan";
 
@@ -13,11 +16,11 @@ export const JobExecutionPlanRequest: core.serialization.ObjectSchema<
     .object({
-        fileId: core.serialization.lazy(async () => (await import("../../..")).FileId),
-        jobId: core.serialization.lazy(async () => (await import("../../..")).JobId),
+        fileId: FileId,
+        jobId: JobId,
     })
-    .extend(core.serialization.lazyObject(async () => (await import("../../..")).JobExecutionPlan));
+    .extend(JobExecutionPlan);
 
 export declare namespace JobExecutionPlanRequest {
-    interface Raw extends serializers.JobExecutionPlan.Raw {
-        fileId: serializers.FileId.Raw;
-        jobId: serializers.JobId.Raw;
+    interface Raw extends JobExecutionPlan.Raw {
+        fileId: FileId.Raw;
+        jobId: JobId.Raw;
     }
diff --git a/src/serialization/resources/jobs/types/JobOutcome.ts b/src/serialization/resources/jobs/types/JobOutcome.ts
index fc3fd24..f5fe6b9 100644
--- a/src/serialization/resources/jobs/types/JobOutcome.ts
+++ b/src/serialization/resources/jobs/types/JobOutcome.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { JobOutcomeNext } from "./JobOutcomeNext";
 
@@ -12,3 +13,3 @@ export const JobOutcome: core.serialization.ObjectSchema<serializers.JobOutcome.
         buttonText: core.serialization.string().optional(),
-        next: core.serialization.lazy(async () => (await import("../../..")).JobOutcomeNext).optional(),
+        next: JobOutcomeNext.optional(),
         heading: core.serialization.string().optional(),
@@ -22,3 +23,3 @@ export declare namespace JobOutcome {
         buttonText?: string | null;
-        next?: serializers.JobOutcomeNext.Raw | null;
+        next?: JobOutcomeNext.Raw | null;
         heading?: string | null;
diff --git a/src/serialization/resources/jobs/types/JobOutcomeNext.ts b/src/serialization/resources/jobs/types/JobOutcomeNext.ts
index fc2c959..b7cddc0 100644
--- a/src/serialization/resources/jobs/types/JobOutcomeNext.ts
+++ b/src/serialization/resources/jobs/types/JobOutcomeNext.ts
@@ -7,2 +7,8 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { JobOutcomeNextId } from "./JobOutcomeNextId";
+import { JobOutcomeNextUrl } from "./JobOutcomeNextUrl";
+import { JobOutcomeNextDownload } from "./JobOutcomeNextDownload";
+import { JobOutcomeNextWait } from "./JobOutcomeNextWait";
+import { JobOutcomeNextSnapshot } from "./JobOutcomeNextSnapshot";
+import { JobOutcomeNextRetry } from "./JobOutcomeNextRetry";
 
@@ -11,8 +17,8 @@ export const JobOutcomeNext: core.serialization.Schema<serializers.JobOutcomeNex
         .union("type", {
-            id: core.serialization.lazyObject(async () => (await import("../../..")).JobOutcomeNextId),
-            url: core.serialization.lazyObject(async () => (await import("../../..")).JobOutcomeNextUrl),
-            download: core.serialization.lazyObject(async () => (await import("../../..")).JobOutcomeNextDownload),
-            wait: core.serialization.lazyObject(async () => (await import("../../..")).JobOutcomeNextWait),
-            snapshot: core.serialization.lazyObject(async () => (await import("../../..")).JobOutcomeNextSnapshot),
-            retry: core.serialization.lazyObject(async () => (await import("../../..")).JobOutcomeNextRetry),
+            id: JobOutcomeNextId,
+            url: JobOutcomeNextUrl,
+            download: JobOutcomeNextDownload,
+            wait: JobOutcomeNextWait,
+            snapshot: JobOutcomeNextSnapshot,
+            retry: JobOutcomeNextRetry,
         })
@@ -32,3 +38,3 @@ export declare namespace JobOutcomeNext {
 
-    interface Id extends serializers.JobOutcomeNextId.Raw {
+    interface Id extends JobOutcomeNextId.Raw {
         type: "id";
@@ -36,3 +42,3 @@ export declare namespace JobOutcomeNext {
 
-    interface Url extends serializers.JobOutcomeNextUrl.Raw {
+    interface Url extends JobOutcomeNextUrl.Raw {
         type: "url";
@@ -40,3 +46,3 @@ export declare namespace JobOutcomeNext {
 
-    interface Download extends serializers.JobOutcomeNextDownload.Raw {
+    interface Download extends JobOutcomeNextDownload.Raw {
         type: "download";
@@ -44,3 +50,3 @@ export declare namespace JobOutcomeNext {
 
-    interface Wait extends serializers.JobOutcomeNextWait.Raw {
+    interface Wait extends JobOutcomeNextWait.Raw {
         type: "wait";
@@ -48,3 +54,3 @@ export declare namespace JobOutcomeNext {
 
-    interface Snapshot extends serializers.JobOutcomeNextSnapshot.Raw {
+    interface Snapshot extends JobOutcomeNextSnapshot.Raw {
         type: "snapshot";
@@ -52,3 +58,3 @@ export declare namespace JobOutcomeNext {
 
-    interface Retry extends serializers.JobOutcomeNextRetry.Raw {
+    interface Retry extends JobOutcomeNextRetry.Raw {
         type: "retry";
diff --git a/src/serialization/resources/jobs/types/JobParts.ts b/src/serialization/resources/jobs/types/JobParts.ts
index 87207e8..3f6a1e8 100644
--- a/src/serialization/resources/jobs/types/JobParts.ts
+++ b/src/serialization/resources/jobs/types/JobParts.ts
@@ -7,11 +7,9 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { JobPartsArray } from "./JobPartsArray";
 
 export const JobParts: core.serialization.Schema<serializers.JobParts.Raw, Flatfile.JobParts> =
-    core.serialization.undiscriminatedUnion([
-        core.serialization.number(),
-        core.serialization.lazy(async () => (await import("../../..")).JobPartsArray),
-    ]);
+    core.serialization.undiscriminatedUnion([core.serialization.number(), JobPartsArray]);
 
 export declare namespace JobParts {
-    type Raw = number | serializers.JobPartsArray.Raw;
+    type Raw = number | JobPartsArray.Raw;
 }
diff --git a/src/serialization/resources/jobs/types/JobPlan.ts b/src/serialization/resources/jobs/types/JobPlan.ts
index 6f287d1..ceb95df 100644
--- a/src/serialization/resources/jobs/types/JobPlan.ts
+++ b/src/serialization/resources/jobs/types/JobPlan.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Job } from "./Job";
+import { JobExecutionPlan } from "./JobExecutionPlan";
 
@@ -10,4 +12,4 @@ export const JobPlan: core.serialization.ObjectSchema<serializers.JobPlan.Raw, F
     core.serialization.object({
-        job: core.serialization.lazyObject(async () => (await import("../../..")).Job),
-        plan: core.serialization.lazyObject(async () => (await import("../../..")).JobExecutionPlan),
+        job: Job,
+        plan: JobExecutionPlan,
     });
@@ -16,4 +18,4 @@ export declare namespace JobPlan {
     interface Raw {
-        job: serializers.Job.Raw;
-        plan: serializers.JobExecutionPlan.Raw;
+        job: Job.Raw;
+        plan: JobExecutionPlan.Raw;
     }
diff --git a/src/serialization/resources/jobs/types/JobPlanResponse.ts b/src/serialization/resources/jobs/types/JobPlanResponse.ts
index f47c498..a12c053 100644
--- a/src/serialization/resources/jobs/types/JobPlanResponse.ts
+++ b/src/serialization/resources/jobs/types/JobPlanResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { JobPlan } from "./JobPlan";
 
@@ -12,3 +13,3 @@ export const JobPlanResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.lazyObject(async () => (await import("../../..")).JobPlan),
+    data: JobPlan,
 });
@@ -17,3 +18,3 @@ export declare namespace JobPlanResponse {
     interface Raw {
-        data: serializers.JobPlan.Raw;
+        data: JobPlan.Raw;
     }
diff --git a/src/serialization/resources/jobs/types/JobResponse.ts b/src/serialization/resources/jobs/types/JobResponse.ts
index 02341d1..6998886 100644
--- a/src/serialization/resources/jobs/types/JobResponse.ts
+++ b/src/serialization/resources/jobs/types/JobResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Job } from "./Job";
 
@@ -10,3 +11,3 @@ export const JobResponse: core.serialization.ObjectSchema<serializers.JobRespons
     core.serialization.object({
-        data: core.serialization.lazyObject(async () => (await import("../../..")).Job),
+        data: Job,
     });
@@ -15,3 +16,3 @@ export declare namespace JobResponse {
     interface Raw {
-        data: serializers.Job.Raw;
+        data: Job.Raw;
     }
diff --git a/src/serialization/resources/jobs/types/JobSplitDetails.ts b/src/serialization/resources/jobs/types/JobSplitDetails.ts
index 4e6ef1c..647f3cb 100644
--- a/src/serialization/resources/jobs/types/JobSplitDetails.ts
+++ b/src/serialization/resources/jobs/types/JobSplitDetails.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { JobParts } from "./JobParts";
 
@@ -12,3 +13,3 @@ export const JobSplitDetails: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    parts: core.serialization.lazy(async () => (await import("../../..")).JobParts),
+    parts: JobParts,
     runInParallel: core.serialization.boolean().optional(),
@@ -18,3 +19,3 @@ export declare namespace JobSplitDetails {
     interface Raw {
-        parts: serializers.JobParts.Raw;
+        parts: JobParts.Raw;
         runInParallel?: boolean | null;
diff --git a/src/serialization/resources/jobs/types/JobSubject.ts b/src/serialization/resources/jobs/types/JobSubject.ts
index 9b40b0f..ea77ec2 100644
--- a/src/serialization/resources/jobs/types/JobSubject.ts
+++ b/src/serialization/resources/jobs/types/JobSubject.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { ResourceJobSubject } from "./ResourceJobSubject";
+import { CollectionJobSubject } from "./CollectionJobSubject";
 
@@ -10,4 +12,4 @@ export const JobSubject: core.serialization.Schema<serializers.JobSubject.Raw, F
     .union("type", {
-        resource: core.serialization.lazyObject(async () => (await import("../../..")).ResourceJobSubject),
-        collection: core.serialization.lazyObject(async () => (await import("../../..")).CollectionJobSubject),
+        resource: ResourceJobSubject,
+        collection: CollectionJobSubject,
     })
@@ -21,3 +23,3 @@ export declare namespace JobSubject {
 
-    interface Resource extends serializers.ResourceJobSubject.Raw {
+    interface Resource extends ResourceJobSubject.Raw {
         type: "resource";
@@ -25,3 +27,3 @@ export declare namespace JobSubject {
 
-    interface Collection extends serializers.CollectionJobSubject.Raw {
+    interface Collection extends CollectionJobSubject.Raw {
         type: "collection";
diff --git a/src/serialization/resources/jobs/types/JobUpdate.ts b/src/serialization/resources/jobs/types/JobUpdate.ts
index f4d6a2a..7b3c636 100644
--- a/src/serialization/resources/jobs/types/JobUpdate.ts
+++ b/src/serialization/resources/jobs/types/JobUpdate.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { JobUpdateConfig } from "./JobUpdateConfig";
+import { JobStatus } from "./JobStatus";
 
@@ -10,4 +12,4 @@ export const JobUpdate: core.serialization.ObjectSchema<serializers.JobUpdate.Ra
     core.serialization.object({
-        config: core.serialization.lazy(async () => (await import("../../..")).JobUpdateConfig).optional(),
-        status: core.serialization.lazy(async () => (await import("../../..")).JobStatus).optional(),
+        config: JobUpdateConfig.optional(),
+        status: JobStatus.optional(),
         progress: core.serialization.number().optional(),
@@ -19,4 +21,4 @@ export declare namespace JobUpdate {
     interface Raw {
-        config?: serializers.JobUpdateConfig.Raw | null;
-        status?: serializers.JobStatus.Raw | null;
+        config?: JobUpdateConfig.Raw | null;
+        status?: JobStatus.Raw | null;
         progress?: number | null;
diff --git a/src/serialization/resources/jobs/types/JobUpdateConfig.ts b/src/serialization/resources/jobs/types/JobUpdateConfig.ts
index fe4846d..01fc721 100644
--- a/src/serialization/resources/jobs/types/JobUpdateConfig.ts
+++ b/src/serialization/resources/jobs/types/JobUpdateConfig.ts
@@ -7,2 +7,10 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { DeleteRecordsJobConfig } from "./DeleteRecordsJobConfig";
+import { FileJobConfig } from "./FileJobConfig";
+import { PipelineJobConfig } from "./PipelineJobConfig";
+import { ExportJobConfig } from "./ExportJobConfig";
+import { MutateJobConfig } from "./MutateJobConfig";
+import { FindAndReplaceJobConfig } from "./FindAndReplaceJobConfig";
+import { MappingProgramJobConfig } from "./MappingProgramJobConfig";
+import { EmptyObject } from "./EmptyObject";
 
@@ -10,10 +18,10 @@ export const JobUpdateConfig: core.serialization.Schema<serializers.JobUpdateCon
     core.serialization.undiscriminatedUnion([
-        core.serialization.lazyObject(async () => (await import("../../..")).DeleteRecordsJobConfig),
-        core.serialization.lazyObject(async () => (await import("../../..")).FileJobConfig),
-        core.serialization.lazyObject(async () => (await import("../../..")).PipelineJobConfig),
-        core.serialization.lazyObject(async () => (await import("../../..")).ExportJobConfig),
-        core.serialization.lazyObject(async () => (await import("../../..")).MutateJobConfig),
-        core.serialization.lazyObject(async () => (await import("../../..")).FindAndReplaceJobConfig),
-        core.serialization.lazyObject(async () => (await import("../../..")).MappingProgramJobConfig),
-        core.serialization.lazyObject(async () => (await import("../../..")).EmptyObject),
+        DeleteRecordsJobConfig,
+        FileJobConfig,
+        PipelineJobConfig,
+        ExportJobConfig,
+        MutateJobConfig,
+        FindAndReplaceJobConfig,
+        MappingProgramJobConfig,
+        EmptyObject,
     ]);
@@ -22,10 +30,10 @@ export declare namespace JobUpdateConfig {
     type Raw =
-        | serializers.DeleteRecordsJobConfig.Raw
-        | serializers.FileJobConfig.Raw
-        | serializers.PipelineJobConfig.Raw
-        | serializers.ExportJobConfig.Raw
-        | serializers.MutateJobConfig.Raw
-        | serializers.FindAndReplaceJobConfig.Raw
-        | serializers.MappingProgramJobConfig.Raw
-        | serializers.EmptyObject.Raw;
+        | DeleteRecordsJobConfig.Raw
+        | FileJobConfig.Raw
+        | PipelineJobConfig.Raw
+        | ExportJobConfig.Raw
+        | MutateJobConfig.Raw
+        | FindAndReplaceJobConfig.Raw
+        | MappingProgramJobConfig.Raw
+        | EmptyObject.Raw;
 }
diff --git a/src/serialization/resources/jobs/types/ListJobsResponse.ts b/src/serialization/resources/jobs/types/ListJobsResponse.ts
index a6e41ec..b5530f7 100644
--- a/src/serialization/resources/jobs/types/ListJobsResponse.ts
+++ b/src/serialization/resources/jobs/types/ListJobsResponse.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Pagination } from "../../commons/types/Pagination";
+import { Job } from "./Job";
 
@@ -12,4 +14,4 @@ export const ListJobsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    pagination: core.serialization.lazyObject(async () => (await import("../../..")).Pagination).optional(),
-    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Job)),
+    pagination: Pagination.optional(),
+    data: core.serialization.list(Job),
 });
@@ -18,4 +20,4 @@ export declare namespace ListJobsResponse {
     interface Raw {
-        pagination?: serializers.Pagination.Raw | null;
-        data: serializers.Job.Raw[];
+        pagination?: Pagination.Raw | null;
+        data: Job.Raw[];
     }
diff --git a/src/serialization/resources/jobs/types/MappingProgramJobConfig.ts b/src/serialization/resources/jobs/types/MappingProgramJobConfig.ts
index 69b786f..7544b66 100644
--- a/src/serialization/resources/jobs/types/MappingProgramJobConfig.ts
+++ b/src/serialization/resources/jobs/types/MappingProgramJobConfig.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { SheetId } from "../../commons/types/SheetId";
 
@@ -12,4 +13,4 @@ export const MappingProgramJobConfig: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    sourceSheetId: core.serialization.lazy(async () => (await import("../../..")).SheetId),
-    destinationSheetId: core.serialization.lazy(async () => (await import("../../..")).SheetId),
+    sourceSheetId: SheetId,
+    destinationSheetId: SheetId,
     mappingRules: core.serialization.list(
@@ -21,4 +22,4 @@ export declare namespace MappingProgramJobConfig {
     interface Raw {
-        sourceSheetId: serializers.SheetId.Raw;
-        destinationSheetId: serializers.SheetId.Raw;
+        sourceSheetId: SheetId.Raw;
+        destinationSheetId: SheetId.Raw;
         mappingRules: Record<string, any>[];
diff --git a/src/serialization/resources/jobs/types/Metadata.ts b/src/serialization/resources/jobs/types/Metadata.ts
index 857c189..469d161 100644
--- a/src/serialization/resources/jobs/types/Metadata.ts
+++ b/src/serialization/resources/jobs/types/Metadata.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Certainty } from "./Certainty";
 
@@ -10,3 +11,3 @@ export const Metadata: core.serialization.ObjectSchema<serializers.Metadata.Raw,
     core.serialization.object({
-        certainty: core.serialization.lazy(async () => (await import("../../..")).Certainty).optional(),
+        certainty: Certainty.optional(),
         confidence: core.serialization.number().optional(),
@@ -17,3 +18,3 @@ export declare namespace Metadata {
     interface Raw {
-        certainty?: serializers.Certainty.Raw | null;
+        certainty?: Certainty.Raw | null;
         confidence?: number | null;
diff --git a/src/serialization/resources/jobs/types/MutateJobConfig.ts b/src/serialization/resources/jobs/types/MutateJobConfig.ts
index 0693fed..eacea80 100644
--- a/src/serialization/resources/jobs/types/MutateJobConfig.ts
+++ b/src/serialization/resources/jobs/types/MutateJobConfig.ts
@@ -7,2 +7,8 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { SheetId } from "../../commons/types/SheetId";
+import { Filter } from "../../commons/types/Filter";
+import { FilterField } from "../../commons/types/FilterField";
+import { SearchValue } from "../../commons/types/SearchValue";
+import { SearchField } from "../../commons/types/SearchField";
+import { RecordId } from "../../commons/types/RecordId";
 
@@ -12,11 +18,13 @@ export const MutateJobConfig: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    sheetId: core.serialization.lazy(async () => (await import("../../..")).SheetId),
+    sheetId: SheetId,
     mutateRecord: core.serialization.string(),
     mutationId: core.serialization.string().optional(),
-    filter: core.serialization.lazy(async () => (await import("../../..")).Filter).optional(),
-    filterField: core.serialization.lazy(async () => (await import("../../..")).FilterField).optional(),
-    searchValue: core.serialization.lazy(async () => (await import("../../..")).SearchValue).optional(),
-    searchField: core.serialization.lazy(async () => (await import("../../..")).SearchField).optional(),
+    snapshotLabel: core.serialization.string().optional(),
+    snapshotId: core.serialization.string().optional(),
+    filter: Filter.optional(),
+    filterField: FilterField.optional(),
+    searchValue: SearchValue.optional(),
+    searchField: SearchField.optional(),
     q: core.serialization.string().optional(),
-    ids: core.serialization.list(core.serialization.lazy(async () => (await import("../../..")).RecordId)).optional(),
+    ids: core.serialization.list(RecordId).optional(),
 });
@@ -25,11 +33,13 @@ export declare namespace MutateJobConfig {
     interface Raw {
-        sheetId: serializers.SheetId.Raw;
+        sheetId: SheetId.Raw;
         mutateRecord: string;
         mutationId?: string | null;
-        filter?: serializers.Filter.Raw | null;
-        filterField?: serializers.FilterField.Raw | null;
-        searchValue?: serializers.SearchValue.Raw | null;
-        searchField?: serializers.SearchField.Raw | null;
+        snapshotLabel?: string | null;
+        snapshotId?: string | null;
+        filter?: Filter.Raw | null;
+        filterField?: FilterField.Raw | null;
+        searchValue?: SearchValue.Raw | null;
+        searchField?: SearchField.Raw | null;
         q?: string | null;
-        ids?: serializers.RecordId.Raw[] | null;
+        ids?: RecordId.Raw[] | null;
     }
diff --git a/src/serialization/resources/jobs/types/PipelineJobConfig.ts b/src/serialization/resources/jobs/types/PipelineJobConfig.ts
index bdfe772..a100e02 100644
--- a/src/serialization/resources/jobs/types/PipelineJobConfig.ts
+++ b/src/serialization/resources/jobs/types/PipelineJobConfig.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { SheetId } from "../../commons/types/SheetId";
 
@@ -12,4 +13,4 @@ export const PipelineJobConfig: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    sourceSheetId: core.serialization.lazy(async () => (await import("../../..")).SheetId),
-    destinationSheetId: core.serialization.lazy(async () => (await import("../../..")).SheetId),
+    sourceSheetId: SheetId,
+    destinationSheetId: SheetId,
 });
@@ -18,4 +19,4 @@ export declare namespace PipelineJobConfig {
     interface Raw {
-        sourceSheetId: serializers.SheetId.Raw;
-        destinationSheetId: serializers.SheetId.Raw;
+        sourceSheetId: SheetId.Raw;
+        destinationSheetId: SheetId.Raw;
     }
diff --git a/src/serialization/resources/jobs/types/SourceField.ts b/src/serialization/resources/jobs/types/SourceField.ts
index 4a4115f..a5010b2 100644
--- a/src/serialization/resources/jobs/types/SourceField.ts
+++ b/src/serialization/resources/jobs/types/SourceField.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Property } from "../../property/types/Property";
 
@@ -10,3 +11,3 @@ export const SourceField: core.serialization.ObjectSchema<serializers.SourceFiel
     core.serialization.object({
-        sourceField: core.serialization.lazy(async () => (await import("../../..")).Property),
+        sourceField: Property,
         preview: core.serialization.list(core.serialization.string()).optional(),
@@ -16,3 +17,3 @@ export declare namespace SourceField {
     interface Raw {
-        sourceField: serializers.Property.Raw;
+        sourceField: Property.Raw;
         preview?: string[] | null;
diff --git a/src/serialization/resources/mapping/types/CreateMappingRulesRequest.ts b/src/serialization/resources/mapping/types/CreateMappingRulesRequest.ts
index 0164b1d..56bc173 100644
--- a/src/serialization/resources/mapping/types/CreateMappingRulesRequest.ts
+++ b/src/serialization/resources/mapping/types/CreateMappingRulesRequest.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { MappingRuleConfig } from "./MappingRuleConfig";
 
@@ -11,6 +12,6 @@ export const CreateMappingRulesRequest: core.serialization.Schema<
     Flatfile.CreateMappingRulesRequest
-> = core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).MappingRuleConfig));
+> = core.serialization.list(MappingRuleConfig);
 
 export declare namespace CreateMappingRulesRequest {
-    type Raw = serializers.MappingRuleConfig.Raw[];
+    type Raw = MappingRuleConfig.Raw[];
 }
diff --git a/src/serialization/resources/mapping/types/MappingRule.ts b/src/serialization/resources/mapping/types/MappingRule.ts
index 105b773..9d60a2f 100644
--- a/src/serialization/resources/mapping/types/MappingRule.ts
+++ b/src/serialization/resources/mapping/types/MappingRule.ts
@@ -7,2 +7,5 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { MappingId } from "../../commons/types/MappingId";
+import { UserId } from "../../commons/types/UserId";
+import { MappingRuleConfig } from "./MappingRuleConfig";
 
@@ -11,5 +14,5 @@ export const MappingRule: core.serialization.ObjectSchema<serializers.MappingRul
         .object({
-            id: core.serialization.lazy(async () => (await import("../../..")).MappingId),
+            id: MappingId,
             confidence: core.serialization.number().optional(),
-            createdBy: core.serialization.lazy(async () => (await import("../../..")).UserId).optional(),
+            createdBy: UserId.optional(),
             createdAt: core.serialization.date(),
@@ -18,9 +21,9 @@ export const MappingRule: core.serialization.ObjectSchema<serializers.MappingRul
         })
-        .extend(core.serialization.lazyObject(async () => (await import("../../..")).MappingRuleConfig));
+        .extend(MappingRuleConfig);
 
 export declare namespace MappingRule {
-    interface Raw extends serializers.MappingRuleConfig.Raw {
-        id: serializers.MappingId.Raw;
+    interface Raw extends MappingRuleConfig.Raw {
+        id: MappingId.Raw;
         confidence?: number | null;
-        createdBy?: serializers.UserId.Raw | null;
+        createdBy?: UserId.Raw | null;
         createdAt: string;
diff --git a/src/serialization/resources/mapping/types/MappingRuleConfig.ts b/src/serialization/resources/mapping/types/MappingRuleConfig.ts
index a7bf3b8..eafd8b3 100644
--- a/src/serialization/resources/mapping/types/MappingRuleConfig.ts
+++ b/src/serialization/resources/mapping/types/MappingRuleConfig.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { UserId } from "../../commons/types/UserId";
 
@@ -16,3 +17,3 @@ export const MappingRuleConfig: core.serialization.ObjectSchema<
     acceptedAt: core.serialization.date().optional(),
-    acceptedBy: core.serialization.lazy(async () => (await import("../../..")).UserId).optional(),
+    acceptedBy: UserId.optional(),
 });
@@ -25,3 +26,3 @@ export declare namespace MappingRuleConfig {
         acceptedAt?: string | null;
-        acceptedBy?: serializers.UserId.Raw | null;
+        acceptedBy?: UserId.Raw | null;
     }
diff --git a/src/serialization/resources/mapping/types/MappingRuleOrConfig.ts b/src/serialization/resources/mapping/types/MappingRuleOrConfig.ts
index 2a9f566..feba62d 100644
--- a/src/serialization/resources/mapping/types/MappingRuleOrConfig.ts
+++ b/src/serialization/resources/mapping/types/MappingRuleOrConfig.ts
@@ -7,2 +7,5 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { MappingId } from "../../commons/types/MappingId";
+import { UserId } from "../../commons/types/UserId";
+import { MappingRuleConfig } from "./MappingRuleConfig";
 
@@ -13,5 +16,5 @@ export const MappingRuleOrConfig: core.serialization.ObjectSchema<
     .object({
-        id: core.serialization.lazy(async () => (await import("../../..")).MappingId).optional(),
+        id: MappingId.optional(),
         confidence: core.serialization.number().optional(),
-        createdBy: core.serialization.lazy(async () => (await import("../../..")).UserId).optional(),
+        createdBy: UserId.optional(),
         createdAt: core.serialization.date().optional(),
@@ -20,9 +23,9 @@ export const MappingRuleOrConfig: core.serialization.ObjectSchema<
     })
-    .extend(core.serialization.lazyObject(async () => (await import("../../..")).MappingRuleConfig));
+    .extend(MappingRuleConfig);
 
 export declare namespace MappingRuleOrConfig {
-    interface Raw extends serializers.MappingRuleConfig.Raw {
-        id?: serializers.MappingId.Raw | null;
+    interface Raw extends MappingRuleConfig.Raw {
+        id?: MappingId.Raw | null;
         confidence?: number | null;
-        createdBy?: serializers.UserId.Raw | null;
+        createdBy?: UserId.Raw | null;
         createdAt?: string | null;
diff --git a/src/serialization/resources/mapping/types/MappingRuleResponse.ts b/src/serialization/resources/mapping/types/MappingRuleResponse.ts
index 17af839..a8b193c 100644
--- a/src/serialization/resources/mapping/types/MappingRuleResponse.ts
+++ b/src/serialization/resources/mapping/types/MappingRuleResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { MappingRule } from "./MappingRule";
 
@@ -12,3 +13,3 @@ export const MappingRuleResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.lazyObject(async () => (await import("../../..")).MappingRule),
+    data: MappingRule,
 });
@@ -17,3 +18,3 @@ export declare namespace MappingRuleResponse {
     interface Raw {
-        data: serializers.MappingRule.Raw;
+        data: MappingRule.Raw;
     }
diff --git a/src/serialization/resources/mapping/types/MappingRulesResponse.ts b/src/serialization/resources/mapping/types/MappingRulesResponse.ts
index aee3dd3..e4a3403 100644
--- a/src/serialization/resources/mapping/types/MappingRulesResponse.ts
+++ b/src/serialization/resources/mapping/types/MappingRulesResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { MappingRule } from "./MappingRule";
 
@@ -12,3 +13,3 @@ export const MappingRulesResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).MappingRule)),
+    data: core.serialization.list(MappingRule),
 });
@@ -17,3 +18,3 @@ export declare namespace MappingRulesResponse {
     interface Raw {
-        data: serializers.MappingRule.Raw[];
+        data: MappingRule.Raw[];
     }
diff --git a/src/serialization/resources/mapping/types/Program.ts b/src/serialization/resources/mapping/types/Program.ts
index 2355da9..f582437 100644
--- a/src/serialization/resources/mapping/types/Program.ts
+++ b/src/serialization/resources/mapping/types/Program.ts
@@ -7,2 +7,6 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { MappingRuleOrConfig } from "./MappingRuleOrConfig";
+import { FamilyId } from "../../commons/types/FamilyId";
+import { UserId } from "../../commons/types/UserId";
+import { ProgramSummary } from "./ProgramSummary";
 
@@ -10,13 +14,11 @@ export const Program: core.serialization.ObjectSchema<serializers.Program.Raw, F
     core.serialization.object({
-        rules: core.serialization.list(
-            core.serialization.lazyObject(async () => (await import("../../..")).MappingRuleOrConfig)
-        ),
+        rules: core.serialization.list(MappingRuleOrConfig),
         id: core.serialization.string().optional(),
         namespace: core.serialization.string().optional(),
-        familyId: core.serialization.lazy(async () => (await import("../../..")).FamilyId).optional(),
+        familyId: FamilyId.optional(),
         createdAt: core.serialization.date().optional(),
-        createdBy: core.serialization.lazy(async () => (await import("../../..")).UserId).optional(),
+        createdBy: UserId.optional(),
         sourceKeys: core.serialization.list(core.serialization.string()),
         destinationKeys: core.serialization.list(core.serialization.string()),
-        summary: core.serialization.lazyObject(async () => (await import("../../..")).ProgramSummary).optional(),
+        summary: ProgramSummary.optional(),
         accessToken: core.serialization.string().optional(),
@@ -26,11 +28,11 @@ export declare namespace Program {
     interface Raw {
-        rules: serializers.MappingRuleOrConfig.Raw[];
+        rules: MappingRuleOrConfig.Raw[];
         id?: string | null;
         namespace?: string | null;
-        familyId?: serializers.FamilyId.Raw | null;
+        familyId?: FamilyId.Raw | null;
         createdAt?: string | null;
-        createdBy?: serializers.UserId.Raw | null;
+        createdBy?: UserId.Raw | null;
         sourceKeys: string[];
         destinationKeys: string[];
-        summary?: serializers.ProgramSummary.Raw | null;
+        summary?: ProgramSummary.Raw | null;
         accessToken?: string | null;
diff --git a/src/serialization/resources/mapping/types/ProgramConfig.ts b/src/serialization/resources/mapping/types/ProgramConfig.ts
index 5526272..f9e3006 100644
--- a/src/serialization/resources/mapping/types/ProgramConfig.ts
+++ b/src/serialization/resources/mapping/types/ProgramConfig.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { SheetConfig } from "../../sheets/types/SheetConfig";
+import { FamilyId } from "../../commons/types/FamilyId";
 
@@ -10,5 +12,5 @@ export const ProgramConfig: core.serialization.ObjectSchema<serializers.ProgramC
     core.serialization.object({
-        source: core.serialization.lazyObject(async () => (await import("../../..")).SheetConfig),
-        destination: core.serialization.lazyObject(async () => (await import("../../..")).SheetConfig),
-        familyId: core.serialization.lazy(async () => (await import("../../..")).FamilyId).optional(),
+        source: SheetConfig,
+        destination: SheetConfig,
+        familyId: FamilyId.optional(),
         namespace: core.serialization.string().optional(),
@@ -19,5 +21,5 @@ export declare namespace ProgramConfig {
     interface Raw {
-        source: serializers.SheetConfig.Raw;
-        destination: serializers.SheetConfig.Raw;
-        familyId?: serializers.FamilyId.Raw | null;
+        source: SheetConfig.Raw;
+        destination: SheetConfig.Raw;
+        familyId?: FamilyId.Raw | null;
         namespace?: string | null;
diff --git a/src/serialization/resources/mapping/types/ProgramResponse.ts b/src/serialization/resources/mapping/types/ProgramResponse.ts
index 57ee703..43b871a 100644
--- a/src/serialization/resources/mapping/types/ProgramResponse.ts
+++ b/src/serialization/resources/mapping/types/ProgramResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Program } from "./Program";
 
@@ -12,3 +13,3 @@ export const ProgramResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.lazyObject(async () => (await import("../../..")).Program),
+    data: Program,
 });
@@ -17,3 +18,3 @@ export declare namespace ProgramResponse {
     interface Raw {
-        data: serializers.Program.Raw;
+        data: Program.Raw;
     }
diff --git a/src/serialization/resources/mapping/types/ProgramsResponse.ts b/src/serialization/resources/mapping/types/ProgramsResponse.ts
index ba4122f..ac31be9 100644
--- a/src/serialization/resources/mapping/types/ProgramsResponse.ts
+++ b/src/serialization/resources/mapping/types/ProgramsResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Program } from "./Program";
 
@@ -12,3 +13,3 @@ export const ProgramsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Program)),
+    data: core.serialization.list(Program),
 });
@@ -17,3 +18,3 @@ export declare namespace ProgramsResponse {
     interface Raw {
-        data: serializers.Program.Raw[];
+        data: Program.Raw[];
     }
diff --git a/src/serialization/resources/mapping/types/UpdateMappingRulesRequest.ts b/src/serialization/resources/mapping/types/UpdateMappingRulesRequest.ts
index 1096d42..5065740 100644
--- a/src/serialization/resources/mapping/types/UpdateMappingRulesRequest.ts
+++ b/src/serialization/resources/mapping/types/UpdateMappingRulesRequest.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { MappingRule } from "./MappingRule";
 
@@ -11,6 +12,6 @@ export const UpdateMappingRulesRequest: core.serialization.Schema<
     Flatfile.UpdateMappingRulesRequest
-> = core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).MappingRule));
+> = core.serialization.list(MappingRule);
 
 export declare namespace UpdateMappingRulesRequest {
-    type Raw = serializers.MappingRule.Raw[];
+    type Raw = MappingRule.Raw[];
 }
diff --git a/src/serialization/resources/property/types/BaseProperty.ts b/src/serialization/resources/property/types/BaseProperty.ts
index 291fe34..bd9968f 100644
--- a/src/serialization/resources/property/types/BaseProperty.ts
+++ b/src/serialization/resources/property/types/BaseProperty.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Constraint } from "./Constraint";
 
@@ -13,5 +14,3 @@ export const BaseProperty: core.serialization.ObjectSchema<serializers.BasePrope
         description: core.serialization.string().optional(),
-        constraints: core.serialization
-            .list(core.serialization.lazy(async () => (await import("../../..")).Constraint))
-            .optional(),
+        constraints: core.serialization.list(Constraint).optional(),
         readonly: core.serialization.boolean().optional(),
@@ -27,3 +26,3 @@ export declare namespace BaseProperty {
         description?: string | null;
-        constraints?: serializers.Constraint.Raw[] | null;
+        constraints?: Constraint.Raw[] | null;
         readonly?: boolean | null;
diff --git a/src/serialization/resources/property/types/BooleanProperty.ts b/src/serialization/resources/property/types/BooleanProperty.ts
index 1166da4..e23277a 100644
--- a/src/serialization/resources/property/types/BooleanProperty.ts
+++ b/src/serialization/resources/property/types/BooleanProperty.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { BooleanPropertyConfig } from "./BooleanPropertyConfig";
+import { BaseProperty } from "./BaseProperty";
 
@@ -13,9 +15,9 @@ export const BooleanProperty: core.serialization.ObjectSchema<
     .object({
-        config: core.serialization.lazyObject(async () => (await import("../../..")).BooleanPropertyConfig).optional(),
+        config: BooleanPropertyConfig.optional(),
     })
-    .extend(core.serialization.lazyObject(async () => (await import("../../..")).BaseProperty));
+    .extend(BaseProperty);
 
 export declare namespace BooleanProperty {
-    interface Raw extends serializers.BaseProperty.Raw {
-        config?: serializers.BooleanPropertyConfig.Raw | null;
+    interface Raw extends BaseProperty.Raw {
+        config?: BooleanPropertyConfig.Raw | null;
     }
diff --git a/src/serialization/resources/property/types/Constraint.ts b/src/serialization/resources/property/types/Constraint.ts
index ae3a4ce..cdea10f 100644
--- a/src/serialization/resources/property/types/Constraint.ts
+++ b/src/serialization/resources/property/types/Constraint.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { UniqueConstraint } from "./UniqueConstraint";
+import { ExternalConstraint } from "./ExternalConstraint";
 
@@ -11,5 +13,5 @@ export const Constraint: core.serialization.Schema<serializers.Constraint.Raw, F
         required: core.serialization.object({}),
-        unique: core.serialization.lazyObject(async () => (await import("../../..")).UniqueConstraint),
+        unique: UniqueConstraint,
         computed: core.serialization.object({}),
-        external: core.serialization.lazyObject(async () => (await import("../../..")).ExternalConstraint),
+        external: ExternalConstraint,
     })
@@ -27,3 +29,3 @@ export declare namespace Constraint {
 
-    interface Unique extends serializers.UniqueConstraint.Raw {
+    interface Unique extends UniqueConstraint.Raw {
         type: "unique";
@@ -35,3 +37,3 @@ export declare namespace Constraint {
 
-    interface External extends serializers.ExternalConstraint.Raw {
+    interface External extends ExternalConstraint.Raw {
         type: "external";
diff --git a/src/serialization/resources/property/types/DateProperty.ts b/src/serialization/resources/property/types/DateProperty.ts
index 9a1f13b..49335f8 100644
--- a/src/serialization/resources/property/types/DateProperty.ts
+++ b/src/serialization/resources/property/types/DateProperty.ts
@@ -7,10 +7,9 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { BaseProperty } from "./BaseProperty";
 
 export const DateProperty: core.serialization.ObjectSchema<serializers.DateProperty.Raw, Flatfile.DateProperty> =
-    core.serialization
-        .object({})
-        .extend(core.serialization.lazyObject(async () => (await import("../../..")).BaseProperty));
+    core.serialization.object({}).extend(BaseProperty);
 
 export declare namespace DateProperty {
-    interface Raw extends serializers.BaseProperty.Raw {}
+    interface Raw extends BaseProperty.Raw {}
 }
diff --git a/src/serialization/resources/property/types/EnumProperty.ts b/src/serialization/resources/property/types/EnumProperty.ts
index 8758010..9b50466 100644
--- a/src/serialization/resources/property/types/EnumProperty.ts
+++ b/src/serialization/resources/property/types/EnumProperty.ts
@@ -7,2 +7,5 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { EnumPropertyConfig } from "./EnumPropertyConfig";
+import { BaseProperty } from "./BaseProperty";
+import { ArrayableProperty } from "./ArrayableProperty";
 
@@ -12,11 +15,11 @@ export const EnumProperty: core.serialization.ObjectSchema<serializers.EnumPrope
             multi: core.serialization.boolean().optional(),
-            config: core.serialization.lazyObject(async () => (await import("../../..")).EnumPropertyConfig),
+            config: EnumPropertyConfig,
         })
-        .extend(core.serialization.lazyObject(async () => (await import("../../..")).BaseProperty))
-        .extend(core.serialization.lazyObject(async () => (await import("../../..")).ArrayableProperty));
+        .extend(BaseProperty)
+        .extend(ArrayableProperty);
 
 export declare namespace EnumProperty {
-    interface Raw extends serializers.BaseProperty.Raw, serializers.ArrayableProperty.Raw {
+    interface Raw extends BaseProperty.Raw, ArrayableProperty.Raw {
         multi?: boolean | null;
-        config: serializers.EnumPropertyConfig.Raw;
+        config: EnumPropertyConfig.Raw;
     }
diff --git a/src/serialization/resources/property/types/EnumPropertyConfig.ts b/src/serialization/resources/property/types/EnumPropertyConfig.ts
index 5744a85..5e83efb 100644
--- a/src/serialization/resources/property/types/EnumPropertyConfig.ts
+++ b/src/serialization/resources/property/types/EnumPropertyConfig.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { EnumPropertyOption } from "./EnumPropertyOption";
 
@@ -13,5 +14,3 @@ export const EnumPropertyConfig: core.serialization.ObjectSchema<
     allowCustom: core.serialization.boolean().optional(),
-    options: core.serialization.list(
-        core.serialization.lazyObject(async () => (await import("../../..")).EnumPropertyOption)
-    ),
+    options: core.serialization.list(EnumPropertyOption),
 });
@@ -21,3 +20,3 @@ export declare namespace EnumPropertyConfig {
         allowCustom?: boolean | null;
-        options: serializers.EnumPropertyOption.Raw[];
+        options: EnumPropertyOption.Raw[];
     }
diff --git a/src/serialization/resources/property/types/NumberProperty.ts b/src/serialization/resources/property/types/NumberProperty.ts
index 37ae4ac..5fe97d4 100644
--- a/src/serialization/resources/property/types/NumberProperty.ts
+++ b/src/serialization/resources/property/types/NumberProperty.ts
@@ -7,2 +7,5 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { NumberConfig } from "./NumberConfig";
+import { BaseProperty } from "./BaseProperty";
+import { ArrayableProperty } from "./ArrayableProperty";
 
@@ -11,10 +14,10 @@ export const NumberProperty: core.serialization.ObjectSchema<serializers.NumberP
         .object({
-            config: core.serialization.lazyObject(async () => (await import("../../..")).NumberConfig).optional(),
+            config: NumberConfig.optional(),
         })
-        .extend(core.serialization.lazyObject(async () => (await import("../../..")).BaseProperty))
-        .extend(core.serialization.lazyObject(async () => (await import("../../..")).ArrayableProperty));
+        .extend(BaseProperty)
+        .extend(ArrayableProperty);
 
 export declare namespace NumberProperty {
-    interface Raw extends serializers.BaseProperty.Raw, serializers.ArrayableProperty.Raw {
-        config?: serializers.NumberConfig.Raw | null;
+    interface Raw extends BaseProperty.Raw, ArrayableProperty.Raw {
+        config?: NumberConfig.Raw | null;
     }
diff --git a/src/serialization/resources/property/types/Property.ts b/src/serialization/resources/property/types/Property.ts
index daa50a1..fa7c2c0 100644
--- a/src/serialization/resources/property/types/Property.ts
+++ b/src/serialization/resources/property/types/Property.ts
@@ -7,2 +7,8 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { StringProperty } from "./StringProperty";
+import { NumberProperty } from "./NumberProperty";
+import { BooleanProperty } from "./BooleanProperty";
+import { DateProperty } from "./DateProperty";
+import { EnumProperty } from "./EnumProperty";
+import { ReferenceProperty } from "./ReferenceProperty";
 
@@ -10,8 +16,8 @@ export const Property: core.serialization.Schema<serializers.Property.Raw, Flatf
     .union("type", {
-        string: core.serialization.lazyObject(async () => (await import("../../..")).StringProperty),
-        number: core.serialization.lazyObject(async () => (await import("../../..")).NumberProperty),
-        boolean: core.serialization.lazyObject(async () => (await import("../../..")).BooleanProperty),
-        date: core.serialization.lazyObject(async () => (await import("../../..")).DateProperty),
-        enum: core.serialization.lazyObject(async () => (await import("../../..")).EnumProperty),
-        reference: core.serialization.lazyObject(async () => (await import("../../..")).ReferenceProperty),
+        string: StringProperty,
+        number: NumberProperty,
+        boolean: BooleanProperty,
+        date: DateProperty,
+        enum: EnumProperty,
+        reference: ReferenceProperty,
     })
@@ -31,3 +37,3 @@ export declare namespace Property {
 
-    interface String extends serializers.StringProperty.Raw {
+    interface String extends StringProperty.Raw {
         type: "string";
@@ -35,3 +41,3 @@ export declare namespace Property {
 
-    interface Number extends serializers.NumberProperty.Raw {
+    interface Number extends NumberProperty.Raw {
         type: "number";
@@ -39,3 +45,3 @@ export declare namespace Property {
 
-    interface Boolean extends serializers.BooleanProperty.Raw {
+    interface Boolean extends BooleanProperty.Raw {
         type: "boolean";
@@ -43,3 +49,3 @@ export declare namespace Property {
 
-    interface Date extends serializers.DateProperty.Raw {
+    interface Date extends DateProperty.Raw {
         type: "date";
@@ -47,3 +53,3 @@ export declare namespace Property {
 
-    interface Enum extends serializers.EnumProperty.Raw {
+    interface Enum extends EnumProperty.Raw {
         type: "enum";
@@ -51,3 +57,3 @@ export declare namespace Property {
 
-    interface Reference extends serializers.ReferenceProperty.Raw {
+    interface Reference extends ReferenceProperty.Raw {
         type: "reference";
diff --git a/src/serialization/resources/property/types/ReferenceProperty.ts b/src/serialization/resources/property/types/ReferenceProperty.ts
index cbc00cb..f0dd947 100644
--- a/src/serialization/resources/property/types/ReferenceProperty.ts
+++ b/src/serialization/resources/property/types/ReferenceProperty.ts
@@ -7,2 +7,5 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { ReferencePropertyConfig } from "./ReferencePropertyConfig";
+import { BaseProperty } from "./BaseProperty";
+import { ArrayableProperty } from "./ArrayableProperty";
 
@@ -13,10 +16,10 @@ export const ReferenceProperty: core.serialization.ObjectSchema<
     .object({
-        config: core.serialization.lazyObject(async () => (await import("../../..")).ReferencePropertyConfig),
+        config: ReferencePropertyConfig,
     })
-    .extend(core.serialization.lazyObject(async () => (await import("../../..")).BaseProperty))
-    .extend(core.serialization.lazyObject(async () => (await import("../../..")).ArrayableProperty));
+    .extend(BaseProperty)
+    .extend(ArrayableProperty);
 
 export declare namespace ReferenceProperty {
-    interface Raw extends serializers.BaseProperty.Raw, serializers.ArrayableProperty.Raw {
-        config: serializers.ReferencePropertyConfig.Raw;
+    interface Raw extends BaseProperty.Raw, ArrayableProperty.Raw {
+        config: ReferencePropertyConfig.Raw;
     }
diff --git a/src/serialization/resources/property/types/ReferencePropertyConfig.ts b/src/serialization/resources/property/types/ReferencePropertyConfig.ts
index a1dee26..ec3ee54 100644
--- a/src/serialization/resources/property/types/ReferencePropertyConfig.ts
+++ b/src/serialization/resources/property/types/ReferencePropertyConfig.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { ReferencePropertyRelationship } from "./ReferencePropertyRelationship";
 
@@ -14,3 +15,3 @@ export const ReferencePropertyConfig: core.serialization.ObjectSchema<
     key: core.serialization.string(),
-    relationship: core.serialization.lazy(async () => (await import("../../..")).ReferencePropertyRelationship),
+    relationship: ReferencePropertyRelationship,
 });
@@ -21,3 +22,3 @@ export declare namespace ReferencePropertyConfig {
         key: string;
-        relationship: serializers.ReferencePropertyRelationship.Raw;
+        relationship: ReferencePropertyRelationship.Raw;
     }
diff --git a/src/serialization/resources/property/types/StringConfig.ts b/src/serialization/resources/property/types/StringConfig.ts
index 4bf5123..1587c3b 100644
--- a/src/serialization/resources/property/types/StringConfig.ts
+++ b/src/serialization/resources/property/types/StringConfig.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { StringConfigOptions } from "./StringConfigOptions";
 
@@ -10,3 +11,3 @@ export const StringConfig: core.serialization.ObjectSchema<serializers.StringCon
     core.serialization.object({
-        size: core.serialization.lazy(async () => (await import("../../..")).StringConfigOptions),
+        size: StringConfigOptions,
     });
@@ -15,3 +16,3 @@ export declare namespace StringConfig {
     interface Raw {
-        size: serializers.StringConfigOptions.Raw;
+        size: StringConfigOptions.Raw;
     }
diff --git a/src/serialization/resources/property/types/StringProperty.ts b/src/serialization/resources/property/types/StringProperty.ts
index 1f170d9..2e49118 100644
--- a/src/serialization/resources/property/types/StringProperty.ts
+++ b/src/serialization/resources/property/types/StringProperty.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { StringConfig } from "./StringConfig";
+import { BaseProperty } from "./BaseProperty";
 
@@ -11,9 +13,9 @@ export const StringProperty: core.serialization.ObjectSchema<serializers.StringP
         .object({
-            config: core.serialization.lazyObject(async () => (await import("../../..")).StringConfig).optional(),
+            config: StringConfig.optional(),
         })
-        .extend(core.serialization.lazyObject(async () => (await import("../../..")).BaseProperty));
+        .extend(BaseProperty);
 
 export declare namespace StringProperty {
-    interface Raw extends serializers.BaseProperty.Raw {
-        config?: serializers.StringConfig.Raw | null;
+    interface Raw extends BaseProperty.Raw {
+        config?: StringConfig.Raw | null;
     }
diff --git a/src/serialization/resources/property/types/UniqueConstraint.ts b/src/serialization/resources/property/types/UniqueConstraint.ts
index 190596e..9406a3b 100644
--- a/src/serialization/resources/property/types/UniqueConstraint.ts
+++ b/src/serialization/resources/property/types/UniqueConstraint.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { UniqueConstraintConfig } from "./UniqueConstraintConfig";
 
@@ -12,3 +13,3 @@ export const UniqueConstraint: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    config: core.serialization.lazyObject(async () => (await import("../../..")).UniqueConstraintConfig).optional(),
+    config: UniqueConstraintConfig.optional(),
 });
@@ -17,3 +18,3 @@ export declare namespace UniqueConstraint {
     interface Raw {
-        config?: serializers.UniqueConstraintConfig.Raw | null;
+        config?: UniqueConstraintConfig.Raw | null;
     }
diff --git a/src/serialization/resources/records/client/insert.ts b/src/serialization/resources/records/client/insert.ts
index 4cdbdce..2659f7b 100644
--- a/src/serialization/resources/records/client/insert.ts
+++ b/src/serialization/resources/records/client/insert.ts
@@ -7,8 +7,10 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { RecordData } from "../types/RecordData";
+import { CellValue } from "../types/CellValue";
 
 export const Request: core.serialization.Schema<serializers.records.insert.Request.Raw, Flatfile.RecordData[]> =
-    core.serialization.list(core.serialization.lazy(async () => (await import("../../..")).RecordData));
+    core.serialization.list(RecordData);
 
 export declare namespace Request {
-    type Raw = serializers.RecordData.Raw[];
+    type Raw = RecordData.Raw[];
 }
diff --git a/src/serialization/resources/records/client/requests/FindAndReplaceRecordRequest.ts b/src/serialization/resources/records/client/requests/FindAndReplaceRecordRequest.ts
index 54bb0d6..3fe65e8 100644
--- a/src/serialization/resources/records/client/requests/FindAndReplaceRecordRequest.ts
+++ b/src/serialization/resources/records/client/requests/FindAndReplaceRecordRequest.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../../api";
 import * as core from "../../../../../core";
+import { CellValueUnion } from "../../types/CellValueUnion";
 
@@ -12,4 +13,4 @@ export const FindAndReplaceRecordRequest: core.serialization.Schema<
 > = core.serialization.object({
-    find: core.serialization.lazy(async () => (await import("../../../..")).CellValueUnion).optional(),
-    replace: core.serialization.lazy(async () => (await import("../../../..")).CellValueUnion).optional(),
+    find: CellValueUnion.optional(),
+    replace: CellValueUnion.optional(),
     fieldKey: core.serialization.string(),
@@ -19,4 +20,4 @@ export declare namespace FindAndReplaceRecordRequest {
     interface Raw {
-        find?: serializers.CellValueUnion.Raw | null;
-        replace?: serializers.CellValueUnion.Raw | null;
+        find?: CellValueUnion.Raw | null;
+        replace?: CellValueUnion.Raw | null;
         fieldKey: string;
diff --git a/src/serialization/resources/records/types/CellConfig.ts b/src/serialization/resources/records/types/CellConfig.ts
new file mode 100644
index 0000000..b39ffbf
--- /dev/null
+++ b/src/serialization/resources/records/types/CellConfig.ts
@@ -0,0 +1,18 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+
+export const CellConfig: core.serialization.ObjectSchema<serializers.CellConfig.Raw, Flatfile.CellConfig> =
+    core.serialization.object({
+        readonly: core.serialization.boolean().optional(),
+    });
+
+export declare namespace CellConfig {
+    interface Raw {
+        readonly?: boolean | null;
+    }
+}
diff --git a/src/serialization/resources/records/types/CellValue.ts b/src/serialization/resources/records/types/CellValue.ts
index e64ce52..7309dd9 100644
--- a/src/serialization/resources/records/types/CellValue.ts
+++ b/src/serialization/resources/records/types/CellValue.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { ValidationMessage } from "./ValidationMessage";
+import { CellValueUnion } from "./CellValueUnion";
 
@@ -11,7 +13,5 @@ export const CellValue: core.serialization.ObjectSchema<serializers.CellValue.Ra
         valid: core.serialization.boolean().optional(),
-        messages: core.serialization
-            .list(core.serialization.lazyObject(async () => (await import("../../..")).ValidationMessage))
-            .optional(),
+        messages: core.serialization.list(ValidationMessage).optional(),
         metadata: core.serialization.record(core.serialization.string(), core.serialization.any()).optional(),
-        value: core.serialization.lazy(async () => (await import("../../..")).CellValueUnion).optional(),
+        value: CellValueUnion.optional(),
         layer: core.serialization.string().optional(),
@@ -23,5 +23,5 @@ export declare namespace CellValue {
         valid?: boolean | null;
-        messages?: serializers.ValidationMessage.Raw[] | null;
+        messages?: ValidationMessage.Raw[] | null;
         metadata?: Record<string, any> | null;
-        value?: serializers.CellValueUnion.Raw | null;
+        value?: CellValueUnion.Raw | null;
         layer?: string | null;
diff --git a/src/serialization/resources/records/types/CellValueWithLinks.ts b/src/serialization/resources/records/types/CellValueWithLinks.ts
index da1a316..67ee5b5 100644
--- a/src/serialization/resources/records/types/CellValueWithLinks.ts
+++ b/src/serialization/resources/records/types/CellValueWithLinks.ts
@@ -7,2 +7,5 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Records } from "./Records";
+import { CellValue } from "./CellValue";
+import { Record_ } from "./Record_";
 
@@ -13,9 +16,9 @@ export const CellValueWithLinks: core.serialization.ObjectSchema<
     .object({
-        links: core.serialization.lazy(async () => (await import("../../..")).Records).optional(),
+        links: Records.optional(),
     })
-    .extend(core.serialization.lazyObject(async () => (await import("../../..")).CellValue));
+    .extend(CellValue);
 
 export declare namespace CellValueWithLinks {
-    interface Raw extends serializers.CellValue.Raw {
-        links?: serializers.Records.Raw | null;
+    interface Raw extends CellValue.Raw {
+        links?: Records.Raw | null;
     }
diff --git a/src/serialization/resources/records/types/DiffData.ts b/src/serialization/resources/records/types/DiffData.ts
index 0a582ef..40aee0d 100644
--- a/src/serialization/resources/records/types/DiffData.ts
+++ b/src/serialization/resources/records/types/DiffData.ts
@@ -7,11 +7,9 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { DiffValue } from "./DiffValue";
 
 export const DiffData: core.serialization.Schema<serializers.DiffData.Raw, Flatfile.DiffData> =
-    core.serialization.record(
-        core.serialization.string(),
-        core.serialization.lazyObject(async () => (await import("../../..")).DiffValue)
-    );
+    core.serialization.record(core.serialization.string(), DiffValue);
 
 export declare namespace DiffData {
-    type Raw = Record<string, serializers.DiffValue.Raw>;
+    type Raw = Record<string, DiffValue.Raw>;
 }
diff --git a/src/serialization/resources/records/types/DiffRecord.ts b/src/serialization/resources/records/types/DiffRecord.ts
index cd635ae..a7293a8 100644
--- a/src/serialization/resources/records/types/DiffRecord.ts
+++ b/src/serialization/resources/records/types/DiffRecord.ts
@@ -7,2 +7,5 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { DiffData } from "./DiffData";
+import { RecordBase } from "./RecordBase";
+import { DiffValue } from "./DiffValue";
 
@@ -11,9 +14,9 @@ export const DiffRecord: core.serialization.ObjectSchema<serializers.DiffRecord.
         .object({
-            values: core.serialization.lazy(async () => (await import("../../..")).DiffData),
+            values: DiffData,
         })
-        .extend(core.serialization.lazyObject(async () => (await import("../../..")).RecordBase));
+        .extend(RecordBase);
 
 export declare namespace DiffRecord {
-    interface Raw extends serializers.RecordBase.Raw {
-        values: serializers.DiffData.Raw;
+    interface Raw extends RecordBase.Raw {
+        values: DiffData.Raw;
     }
diff --git a/src/serialization/resources/records/types/DiffRecords.ts b/src/serialization/resources/records/types/DiffRecords.ts
index 4dd3909..081f0cf 100644
--- a/src/serialization/resources/records/types/DiffRecords.ts
+++ b/src/serialization/resources/records/types/DiffRecords.ts
@@ -7,8 +7,9 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { DiffRecord } from "./DiffRecord";
 
 export const DiffRecords: core.serialization.Schema<serializers.DiffRecords.Raw, Flatfile.DiffRecords> =
-    core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).DiffRecord));
+    core.serialization.list(DiffRecord);
 
 export declare namespace DiffRecords {
-    type Raw = serializers.DiffRecord.Raw[];
+    type Raw = DiffRecord.Raw[];
 }
diff --git a/src/serialization/resources/records/types/DiffRecordsResponse.ts b/src/serialization/resources/records/types/DiffRecordsResponse.ts
index 4c36098..0a3bc84 100644
--- a/src/serialization/resources/records/types/DiffRecordsResponse.ts
+++ b/src/serialization/resources/records/types/DiffRecordsResponse.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { DiffRecords } from "./DiffRecords";
+import { DiffRecord } from "./DiffRecord";
 
@@ -12,3 +14,3 @@ export const DiffRecordsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.lazy(async () => (await import("../../..")).DiffRecords),
+    data: DiffRecords,
 });
@@ -17,3 +19,3 @@ export declare namespace DiffRecordsResponse {
     interface Raw {
-        data: serializers.DiffRecords.Raw;
+        data: DiffRecords.Raw;
     }
diff --git a/src/serialization/resources/records/types/DiffValue.ts b/src/serialization/resources/records/types/DiffValue.ts
index 5ac9d92..1050c0a 100644
--- a/src/serialization/resources/records/types/DiffValue.ts
+++ b/src/serialization/resources/records/types/DiffValue.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { CellValueUnion } from "./CellValueUnion";
+import { CellValue } from "./CellValue";
 
@@ -11,9 +13,9 @@ export const DiffValue: core.serialization.ObjectSchema<serializers.DiffValue.Ra
         .object({
-            snapshotValue: core.serialization.lazy(async () => (await import("../../..")).CellValueUnion).optional(),
+            snapshotValue: CellValueUnion.optional(),
         })
-        .extend(core.serialization.lazyObject(async () => (await import("../../..")).CellValue));
+        .extend(CellValue);
 
 export declare namespace DiffValue {
-    interface Raw extends serializers.CellValue.Raw {
-        snapshotValue?: serializers.CellValueUnion.Raw | null;
+    interface Raw extends CellValue.Raw {
+        snapshotValue?: CellValueUnion.Raw | null;
     }
diff --git a/src/serialization/resources/records/types/GetRecordsResponse.ts b/src/serialization/resources/records/types/GetRecordsResponse.ts
index 330b238..d3b4762 100644
--- a/src/serialization/resources/records/types/GetRecordsResponse.ts
+++ b/src/serialization/resources/records/types/GetRecordsResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { GetRecordsResponseData } from "./GetRecordsResponseData";
 
@@ -12,3 +13,3 @@ export const GetRecordsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.lazyObject(async () => (await import("../../..")).GetRecordsResponseData),
+    data: GetRecordsResponseData,
 });
@@ -17,3 +18,3 @@ export declare namespace GetRecordsResponse {
     interface Raw {
-        data: serializers.GetRecordsResponseData.Raw;
+        data: GetRecordsResponseData.Raw;
     }
diff --git a/src/serialization/resources/records/types/GetRecordsResponseData.ts b/src/serialization/resources/records/types/GetRecordsResponseData.ts
index 5b258c7..1f6df5f 100644
--- a/src/serialization/resources/records/types/GetRecordsResponseData.ts
+++ b/src/serialization/resources/records/types/GetRecordsResponseData.ts
@@ -7,2 +7,8 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { RecordsWithLinks } from "./RecordsWithLinks";
+import { RecordCounts } from "./RecordCounts";
+import { VersionId } from "../../commons/types/VersionId";
+import { CommitId } from "../../commons/types/CommitId";
+import { SuccessData } from "../../commons/types/SuccessData";
+import { RecordWithLinks } from "./RecordWithLinks";
 
@@ -13,15 +19,15 @@ export const GetRecordsResponseData: core.serialization.ObjectSchema<
     .object({
-        records: core.serialization.lazy(async () => (await import("../../..")).RecordsWithLinks),
-        counts: core.serialization.lazyObject(async () => (await import("../../..")).RecordCounts).optional(),
-        versionId: core.serialization.lazy(async () => (await import("../../..")).VersionId).optional(),
-        commitId: core.serialization.lazy(async () => (await import("../../..")).CommitId).optional(),
+        records: RecordsWithLinks,
+        counts: RecordCounts.optional(),
+        versionId: VersionId.optional(),
+        commitId: CommitId.optional(),
     })
-    .extend(core.serialization.lazyObject(async () => (await import("../../..")).SuccessData));
+    .extend(SuccessData);
 
 export declare namespace GetRecordsResponseData {
-    interface Raw extends serializers.SuccessData.Raw {
-        records: serializers.RecordsWithLinks.Raw;
-        counts?: serializers.RecordCounts.Raw | null;
-        versionId?: serializers.VersionId.Raw | null;
-        commitId?: serializers.CommitId.Raw | null;
+    interface Raw extends SuccessData.Raw {
+        records: RecordsWithLinks.Raw;
+        counts?: RecordCounts.Raw | null;
+        versionId?: VersionId.Raw | null;
+        commitId?: CommitId.Raw | null;
     }
diff --git a/src/serialization/resources/records/types/RecordBase.ts b/src/serialization/resources/records/types/RecordBase.ts
index 2632171..ff0a524 100644
--- a/src/serialization/resources/records/types/RecordBase.ts
+++ b/src/serialization/resources/records/types/RecordBase.ts
@@ -7,2 +7,7 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { RecordId } from "../../commons/types/RecordId";
+import { VersionId } from "../../commons/types/VersionId";
+import { CommitId } from "../../commons/types/CommitId";
+import { ValidationMessage } from "./ValidationMessage";
+import { RecordConfig } from "./RecordConfig";
 
@@ -10,10 +15,9 @@ export const RecordBase: core.serialization.ObjectSchema<serializers.RecordBase.
     core.serialization.object({
-        id: core.serialization.lazy(async () => (await import("../../..")).RecordId),
-        versionId: core.serialization.lazy(async () => (await import("../../..")).VersionId).optional(),
-        commitId: core.serialization.lazy(async () => (await import("../../..")).CommitId).optional(),
+        id: RecordId,
+        versionId: VersionId.optional(),
+        commitId: CommitId.optional(),
         valid: core.serialization.boolean().optional(),
-        messages: core.serialization
-            .list(core.serialization.lazyObject(async () => (await import("../../..")).ValidationMessage))
-            .optional(),
+        messages: core.serialization.list(ValidationMessage).optional(),
         metadata: core.serialization.record(core.serialization.string(), core.serialization.any()).optional(),
+        config: RecordConfig.optional(),
     });
@@ -22,8 +26,9 @@ export declare namespace RecordBase {
     interface Raw {
-        id: serializers.RecordId.Raw;
-        versionId?: serializers.VersionId.Raw | null;
-        commitId?: serializers.CommitId.Raw | null;
+        id: RecordId.Raw;
+        versionId?: VersionId.Raw | null;
+        commitId?: CommitId.Raw | null;
         valid?: boolean | null;
-        messages?: serializers.ValidationMessage.Raw[] | null;
+        messages?: ValidationMessage.Raw[] | null;
         metadata?: Record<string, any> | null;
+        config?: RecordConfig.Raw | null;
     }
diff --git a/src/serialization/resources/records/types/RecordConfig.ts b/src/serialization/resources/records/types/RecordConfig.ts
new file mode 100644
index 0000000..baae44a
--- /dev/null
+++ b/src/serialization/resources/records/types/RecordConfig.ts
@@ -0,0 +1,21 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+import { CellConfig } from "./CellConfig";
+
+export const RecordConfig: core.serialization.ObjectSchema<serializers.RecordConfig.Raw, Flatfile.RecordConfig> =
+    core.serialization.object({
+        readonly: core.serialization.boolean().optional(),
+        fields: core.serialization.record(core.serialization.string(), CellConfig).optional(),
+    });
+
+export declare namespace RecordConfig {
+    interface Raw {
+        readonly?: boolean | null;
+        fields?: Record<string, CellConfig.Raw> | null;
+    }
+}
diff --git a/src/serialization/resources/records/types/RecordCounts.ts b/src/serialization/resources/records/types/RecordCounts.ts
index 0ab7c36..8522483 100644
--- a/src/serialization/resources/records/types/RecordCounts.ts
+++ b/src/serialization/resources/records/types/RecordCounts.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { FieldRecordCounts } from "./FieldRecordCounts";
 
@@ -14,8 +15,3 @@ export const RecordCounts: core.serialization.ObjectSchema<serializers.RecordCou
         errorsByField: core.serialization.record(core.serialization.string(), core.serialization.number()).optional(),
-        byField: core.serialization
-            .record(
-                core.serialization.string(),
-                core.serialization.lazyObject(async () => (await import("../../..")).FieldRecordCounts)
-            )
-            .optional(),
+        byField: core.serialization.record(core.serialization.string(), FieldRecordCounts).optional(),
     });
@@ -28,3 +24,3 @@ export declare namespace RecordCounts {
         errorsByField?: Record<string, number> | null;
-        byField?: Record<string, serializers.FieldRecordCounts.Raw> | null;
+        byField?: Record<string, FieldRecordCounts.Raw> | null;
     }
diff --git a/src/serialization/resources/records/types/RecordData.ts b/src/serialization/resources/records/types/RecordData.ts
index 6cc2b65..d1f50a0 100644
--- a/src/serialization/resources/records/types/RecordData.ts
+++ b/src/serialization/resources/records/types/RecordData.ts
@@ -7,11 +7,9 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { CellValue } from "./CellValue";
 
 export const RecordData: core.serialization.Schema<serializers.RecordData.Raw, Flatfile.RecordData> =
-    core.serialization.record(
-        core.serialization.string(),
-        core.serialization.lazyObject(async () => (await import("../../..")).CellValue)
-    );
+    core.serialization.record(core.serialization.string(), CellValue);
 
 export declare namespace RecordData {
-    type Raw = Record<string, serializers.CellValue.Raw>;
+    type Raw = Record<string, CellValue.Raw>;
 }
diff --git a/src/serialization/resources/records/types/RecordDataWithLinks.ts b/src/serialization/resources/records/types/RecordDataWithLinks.ts
index 84354e5..47aedbb 100644
--- a/src/serialization/resources/records/types/RecordDataWithLinks.ts
+++ b/src/serialization/resources/records/types/RecordDataWithLinks.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { CellValueWithLinks } from "./CellValueWithLinks";
 
@@ -11,9 +12,6 @@ export const RecordDataWithLinks: core.serialization.Schema<
     Flatfile.RecordDataWithLinks
-> = core.serialization.record(
-    core.serialization.string(),
-    core.serialization.lazyObject(async () => (await import("../../..")).CellValueWithLinks)
-);
+> = core.serialization.record(core.serialization.string(), CellValueWithLinks);
 
 export declare namespace RecordDataWithLinks {
-    type Raw = Record<string, serializers.CellValueWithLinks.Raw>;
+    type Raw = Record<string, CellValueWithLinks.Raw>;
 }
diff --git a/src/serialization/resources/records/types/RecordWithLinks.ts b/src/serialization/resources/records/types/RecordWithLinks.ts
index 7a03350..df7dfb7 100644
--- a/src/serialization/resources/records/types/RecordWithLinks.ts
+++ b/src/serialization/resources/records/types/RecordWithLinks.ts
@@ -7,2 +7,7 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { RecordId } from "../../commons/types/RecordId";
+import { RecordDataWithLinks } from "./RecordDataWithLinks";
+import { ValidationMessage } from "./ValidationMessage";
+import { RecordConfig } from "./RecordConfig";
+import { CellValueWithLinks } from "./CellValueWithLinks";
 
@@ -12,9 +17,8 @@ export const RecordWithLinks: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    id: core.serialization.lazy(async () => (await import("../../..")).RecordId),
-    values: core.serialization.lazy(async () => (await import("../../..")).RecordDataWithLinks),
+    id: RecordId,
+    values: RecordDataWithLinks,
     valid: core.serialization.boolean().optional(),
-    messages: core.serialization
-        .list(core.serialization.lazyObject(async () => (await import("../../..")).ValidationMessage))
-        .optional(),
+    messages: core.serialization.list(ValidationMessage).optional(),
     metadata: core.serialization.record(core.serialization.string(), core.serialization.any()).optional(),
+    config: RecordConfig.optional(),
 });
@@ -23,7 +27,8 @@ export declare namespace RecordWithLinks {
     interface Raw {
-        id: serializers.RecordId.Raw;
-        values: serializers.RecordDataWithLinks.Raw;
+        id: RecordId.Raw;
+        values: RecordDataWithLinks.Raw;
         valid?: boolean | null;
-        messages?: serializers.ValidationMessage.Raw[] | null;
+        messages?: ValidationMessage.Raw[] | null;
         metadata?: Record<string, any> | null;
+        config?: RecordConfig.Raw | null;
     }
diff --git a/src/serialization/resources/records/types/Record_.ts b/src/serialization/resources/records/types/Record_.ts
index ed545bc..ac41762 100644
--- a/src/serialization/resources/records/types/Record_.ts
+++ b/src/serialization/resources/records/types/Record_.ts
@@ -7,2 +7,5 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { RecordData } from "./RecordData";
+import { RecordBase } from "./RecordBase";
+import { CellValue } from "./CellValue";
 
@@ -10,9 +13,9 @@ export const Record_: core.serialization.ObjectSchema<serializers.Record_.Raw, F
     .object({
-        values: core.serialization.lazy(async () => (await import("../../..")).RecordData),
+        values: RecordData,
     })
-    .extend(core.serialization.lazyObject(async () => (await import("../../..")).RecordBase));
+    .extend(RecordBase);
 
 export declare namespace Record_ {
-    interface Raw extends serializers.RecordBase.Raw {
-        values: serializers.RecordData.Raw;
+    interface Raw extends RecordBase.Raw {
+        values: RecordData.Raw;
     }
diff --git a/src/serialization/resources/records/types/Records.ts b/src/serialization/resources/records/types/Records.ts
index 3d4b638..5396531 100644
--- a/src/serialization/resources/records/types/Records.ts
+++ b/src/serialization/resources/records/types/Records.ts
@@ -7,9 +7,9 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Record_ } from "./Record_";
 
-export const Records: core.serialization.Schema<serializers.Records.Raw, Flatfile.Records> = core.serialization.list(
-    core.serialization.lazyObject(async () => (await import("../../..")).Record_)
-);
+export const Records: core.serialization.Schema<serializers.Records.Raw, Flatfile.Records> =
+    core.serialization.list(Record_);
 
 export declare namespace Records {
-    type Raw = serializers.Record_.Raw[];
+    type Raw = Record_.Raw[];
 }
diff --git a/src/serialization/resources/records/types/RecordsResponse.ts b/src/serialization/resources/records/types/RecordsResponse.ts
index 1984d89..ceefccf 100644
--- a/src/serialization/resources/records/types/RecordsResponse.ts
+++ b/src/serialization/resources/records/types/RecordsResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { RecordsResponseData } from "./RecordsResponseData";
 
@@ -12,3 +13,3 @@ export const RecordsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.lazyObject(async () => (await import("../../..")).RecordsResponseData),
+    data: RecordsResponseData,
 });
@@ -17,3 +18,3 @@ export declare namespace RecordsResponse {
     interface Raw {
-        data: serializers.RecordsResponseData.Raw;
+        data: RecordsResponseData.Raw;
     }
diff --git a/src/serialization/resources/records/types/RecordsResponseData.ts b/src/serialization/resources/records/types/RecordsResponseData.ts
index 916cf54..9644a9a 100644
--- a/src/serialization/resources/records/types/RecordsResponseData.ts
+++ b/src/serialization/resources/records/types/RecordsResponseData.ts
@@ -7,2 +7,8 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { RecordsWithLinks } from "./RecordsWithLinks";
+import { RecordCounts } from "./RecordCounts";
+import { VersionId } from "../../commons/types/VersionId";
+import { CommitId } from "../../commons/types/CommitId";
+import { SuccessData } from "../../commons/types/SuccessData";
+import { RecordWithLinks } from "./RecordWithLinks";
 
@@ -13,15 +19,15 @@ export const RecordsResponseData: core.serialization.ObjectSchema<
     .object({
-        records: core.serialization.lazy(async () => (await import("../../..")).RecordsWithLinks).optional(),
-        counts: core.serialization.lazyObject(async () => (await import("../../..")).RecordCounts).optional(),
-        versionId: core.serialization.lazy(async () => (await import("../../..")).VersionId).optional(),
-        commitId: core.serialization.lazy(async () => (await import("../../..")).CommitId).optional(),
+        records: RecordsWithLinks.optional(),
+        counts: RecordCounts.optional(),
+        versionId: VersionId.optional(),
+        commitId: CommitId.optional(),
     })
-    .extend(core.serialization.lazyObject(async () => (await import("../../..")).SuccessData));
+    .extend(SuccessData);
 
 export declare namespace RecordsResponseData {
-    interface Raw extends serializers.SuccessData.Raw {
-        records?: serializers.RecordsWithLinks.Raw | null;
-        counts?: serializers.RecordCounts.Raw | null;
-        versionId?: serializers.VersionId.Raw | null;
-        commitId?: serializers.CommitId.Raw | null;
+    interface Raw extends SuccessData.Raw {
+        records?: RecordsWithLinks.Raw | null;
+        counts?: RecordCounts.Raw | null;
+        versionId?: VersionId.Raw | null;
+        commitId?: CommitId.Raw | null;
     }
diff --git a/src/serialization/resources/records/types/RecordsWithLinks.ts b/src/serialization/resources/records/types/RecordsWithLinks.ts
index e038b8b..b28d744 100644
--- a/src/serialization/resources/records/types/RecordsWithLinks.ts
+++ b/src/serialization/resources/records/types/RecordsWithLinks.ts
@@ -7,8 +7,9 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { RecordWithLinks } from "./RecordWithLinks";
 
 export const RecordsWithLinks: core.serialization.Schema<serializers.RecordsWithLinks.Raw, Flatfile.RecordsWithLinks> =
-    core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).RecordWithLinks));
+    core.serialization.list(RecordWithLinks);
 
 export declare namespace RecordsWithLinks {
-    type Raw = serializers.RecordWithLinks.Raw[];
+    type Raw = RecordWithLinks.Raw[];
 }
diff --git a/src/serialization/resources/records/types/ValidationMessage.ts b/src/serialization/resources/records/types/ValidationMessage.ts
index c8d5ade..7a34f9f 100644
--- a/src/serialization/resources/records/types/ValidationMessage.ts
+++ b/src/serialization/resources/records/types/ValidationMessage.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { ValidationType } from "./ValidationType";
+import { ValidationSource } from "./ValidationSource";
 
@@ -12,4 +14,4 @@ export const ValidationMessage: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    type: core.serialization.lazy(async () => (await import("../../..")).ValidationType).optional(),
-    source: core.serialization.lazy(async () => (await import("../../..")).ValidationSource).optional(),
+    type: ValidationType.optional(),
+    source: ValidationSource.optional(),
     message: core.serialization.string().optional(),
@@ -19,4 +21,4 @@ export declare namespace ValidationMessage {
     interface Raw {
-        type?: serializers.ValidationType.Raw | null;
-        source?: serializers.ValidationSource.Raw | null;
+        type?: ValidationType.Raw | null;
+        source?: ValidationSource.Raw | null;
         message?: string | null;
diff --git a/src/serialization/resources/records/types/index.ts b/src/serialization/resources/records/types/index.ts
index 4b1f724..c231dae 100644
--- a/src/serialization/resources/records/types/index.ts
+++ b/src/serialization/resources/records/types/index.ts
@@ -18,2 +18,4 @@ export * from "./DiffRecordsResponse";
 export * from "./DiffRecords";
+export * from "./RecordConfig";
+export * from "./CellConfig";
 export * from "./DiffRecord";
diff --git a/src/serialization/resources/roles/types/ActorIdUnion.ts b/src/serialization/resources/roles/types/ActorIdUnion.ts
index f1dfdbd..c36a440 100644
--- a/src/serialization/resources/roles/types/ActorIdUnion.ts
+++ b/src/serialization/resources/roles/types/ActorIdUnion.ts
@@ -7,12 +7,11 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { UserId } from "../../commons/types/UserId";
+import { AgentId } from "../../commons/types/AgentId";
+import { GuestId } from "../../commons/types/GuestId";
 
 export const ActorIdUnion: core.serialization.Schema<serializers.ActorIdUnion.Raw, Flatfile.ActorIdUnion> =
-    core.serialization.undiscriminatedUnion([
-        core.serialization.lazy(async () => (await import("../../..")).UserId),
-        core.serialization.lazy(async () => (await import("../../..")).AgentId),
-        core.serialization.lazy(async () => (await import("../../..")).GuestId),
-    ]);
+    core.serialization.undiscriminatedUnion([UserId, AgentId, GuestId]);
 
 export declare namespace ActorIdUnion {
-    type Raw = serializers.UserId.Raw | serializers.AgentId.Raw | serializers.GuestId.Raw;
+    type Raw = UserId.Raw | AgentId.Raw | GuestId.Raw;
 }
diff --git a/src/serialization/resources/roles/types/ActorRoleResponse.ts b/src/serialization/resources/roles/types/ActorRoleResponse.ts
index 0027449..30cf630 100644
--- a/src/serialization/resources/roles/types/ActorRoleResponse.ts
+++ b/src/serialization/resources/roles/types/ActorRoleResponse.ts
@@ -7,2 +7,6 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { ActorRoleId } from "../../commons/types/ActorRoleId";
+import { RoleId } from "../../commons/types/RoleId";
+import { ActorIdUnion } from "./ActorIdUnion";
+import { ResourceIdUnion } from "./ResourceIdUnion";
 
@@ -12,6 +16,6 @@ export const ActorRoleResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    id: core.serialization.lazy(async () => (await import("../../..")).ActorRoleId),
-    roleId: core.serialization.lazy(async () => (await import("../../..")).RoleId),
-    actorId: core.serialization.lazy(async () => (await import("../../..")).ActorIdUnion),
-    resourceId: core.serialization.lazy(async () => (await import("../../..")).ResourceIdUnion),
+    id: ActorRoleId,
+    roleId: RoleId,
+    actorId: ActorIdUnion,
+    resourceId: ResourceIdUnion,
     createdAt: core.serialization.date(),
@@ -22,6 +26,6 @@ export declare namespace ActorRoleResponse {
     interface Raw {
-        id: serializers.ActorRoleId.Raw;
-        roleId: serializers.RoleId.Raw;
-        actorId: serializers.ActorIdUnion.Raw;
-        resourceId: serializers.ResourceIdUnion.Raw;
+        id: ActorRoleId.Raw;
+        roleId: RoleId.Raw;
+        actorId: ActorIdUnion.Raw;
+        resourceId: ResourceIdUnion.Raw;
         createdAt: string;
diff --git a/src/serialization/resources/roles/types/AssignActorRoleRequest.ts b/src/serialization/resources/roles/types/AssignActorRoleRequest.ts
index fad27ea..9450608 100644
--- a/src/serialization/resources/roles/types/AssignActorRoleRequest.ts
+++ b/src/serialization/resources/roles/types/AssignActorRoleRequest.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { RoleId } from "../../commons/types/RoleId";
+import { ResourceIdUnion } from "./ResourceIdUnion";
 
@@ -12,4 +14,4 @@ export const AssignActorRoleRequest: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    roleId: core.serialization.lazy(async () => (await import("../../..")).RoleId),
-    resourceId: core.serialization.lazy(async () => (await import("../../..")).ResourceIdUnion),
+    roleId: RoleId,
+    resourceId: ResourceIdUnion,
 });
@@ -18,4 +20,4 @@ export declare namespace AssignActorRoleRequest {
     interface Raw {
-        roleId: serializers.RoleId.Raw;
-        resourceId: serializers.ResourceIdUnion.Raw;
+        roleId: RoleId.Raw;
+        resourceId: ResourceIdUnion.Raw;
     }
diff --git a/src/serialization/resources/roles/types/AssignRoleResponse.ts b/src/serialization/resources/roles/types/AssignRoleResponse.ts
index f868ddc..e54cbd7 100644
--- a/src/serialization/resources/roles/types/AssignRoleResponse.ts
+++ b/src/serialization/resources/roles/types/AssignRoleResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { AssignRoleResponseData } from "./AssignRoleResponseData";
 
@@ -12,3 +13,3 @@ export const AssignRoleResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.lazyObject(async () => (await import("../../..")).AssignRoleResponseData),
+    data: AssignRoleResponseData,
 });
@@ -17,3 +18,3 @@ export declare namespace AssignRoleResponse {
     interface Raw {
-        data: serializers.AssignRoleResponseData.Raw;
+        data: AssignRoleResponseData.Raw;
     }
diff --git a/src/serialization/resources/roles/types/AssignRoleResponseData.ts b/src/serialization/resources/roles/types/AssignRoleResponseData.ts
index 6cd2a5a..94ae119 100644
--- a/src/serialization/resources/roles/types/AssignRoleResponseData.ts
+++ b/src/serialization/resources/roles/types/AssignRoleResponseData.ts
@@ -7,2 +7,6 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { ActorRoleId } from "../../commons/types/ActorRoleId";
+import { RoleId } from "../../commons/types/RoleId";
+import { ActorIdUnion } from "./ActorIdUnion";
+import { ResourceIdUnion } from "./ResourceIdUnion";
 
@@ -12,6 +16,6 @@ export const AssignRoleResponseData: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    id: core.serialization.lazy(async () => (await import("../../..")).ActorRoleId),
-    roleId: core.serialization.lazy(async () => (await import("../../..")).RoleId),
-    actorId: core.serialization.lazy(async () => (await import("../../..")).ActorIdUnion),
-    resourceId: core.serialization.lazy(async () => (await import("../../..")).ResourceIdUnion),
+    id: ActorRoleId,
+    roleId: RoleId,
+    actorId: ActorIdUnion,
+    resourceId: ResourceIdUnion,
     createdAt: core.serialization.date(),
@@ -22,6 +26,6 @@ export declare namespace AssignRoleResponseData {
     interface Raw {
-        id: serializers.ActorRoleId.Raw;
-        roleId: serializers.RoleId.Raw;
-        actorId: serializers.ActorIdUnion.Raw;
-        resourceId: serializers.ResourceIdUnion.Raw;
+        id: ActorRoleId.Raw;
+        roleId: RoleId.Raw;
+        actorId: ActorIdUnion.Raw;
+        resourceId: ResourceIdUnion.Raw;
         createdAt: string;
diff --git a/src/serialization/resources/roles/types/ListActorRolesResponse.ts b/src/serialization/resources/roles/types/ListActorRolesResponse.ts
index 21b0571..b79c703 100644
--- a/src/serialization/resources/roles/types/ListActorRolesResponse.ts
+++ b/src/serialization/resources/roles/types/ListActorRolesResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { ActorRoleResponse } from "./ActorRoleResponse";
 
@@ -12,5 +13,3 @@ export const ListActorRolesResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(
-        core.serialization.lazyObject(async () => (await import("../../..")).ActorRoleResponse)
-    ),
+    data: core.serialization.list(ActorRoleResponse),
 });
@@ -19,3 +18,3 @@ export declare namespace ListActorRolesResponse {
     interface Raw {
-        data: serializers.ActorRoleResponse.Raw[];
+        data: ActorRoleResponse.Raw[];
     }
diff --git a/src/serialization/resources/roles/types/ListRolesResponse.ts b/src/serialization/resources/roles/types/ListRolesResponse.ts
index 988fc50..6176a87 100644
--- a/src/serialization/resources/roles/types/ListRolesResponse.ts
+++ b/src/serialization/resources/roles/types/ListRolesResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { RoleResponse } from "./RoleResponse";
 
@@ -12,3 +13,3 @@ export const ListRolesResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).RoleResponse)),
+    data: core.serialization.list(RoleResponse),
 });
@@ -17,3 +18,3 @@ export declare namespace ListRolesResponse {
     interface Raw {
-        data: serializers.RoleResponse.Raw[];
+        data: RoleResponse.Raw[];
     }
diff --git a/src/serialization/resources/roles/types/ResourceIdUnion.ts b/src/serialization/resources/roles/types/ResourceIdUnion.ts
index 3ad9a46..9632bdc 100644
--- a/src/serialization/resources/roles/types/ResourceIdUnion.ts
+++ b/src/serialization/resources/roles/types/ResourceIdUnion.ts
@@ -7,12 +7,11 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { AccountId } from "../../commons/types/AccountId";
+import { EnvironmentId } from "../../commons/types/EnvironmentId";
+import { SpaceId } from "../../commons/types/SpaceId";
 
 export const ResourceIdUnion: core.serialization.Schema<serializers.ResourceIdUnion.Raw, Flatfile.ResourceIdUnion> =
-    core.serialization.undiscriminatedUnion([
-        core.serialization.lazy(async () => (await import("../../..")).AccountId),
-        core.serialization.lazy(async () => (await import("../../..")).EnvironmentId),
-        core.serialization.lazy(async () => (await import("../../..")).SpaceId),
-    ]);
+    core.serialization.undiscriminatedUnion([AccountId, EnvironmentId, SpaceId]);
 
 export declare namespace ResourceIdUnion {
-    type Raw = serializers.AccountId.Raw | serializers.EnvironmentId.Raw | serializers.SpaceId.Raw;
+    type Raw = AccountId.Raw | EnvironmentId.Raw | SpaceId.Raw;
 }
diff --git a/src/serialization/resources/roles/types/RoleResponse.ts b/src/serialization/resources/roles/types/RoleResponse.ts
index a96138a..b7391e8 100644
--- a/src/serialization/resources/roles/types/RoleResponse.ts
+++ b/src/serialization/resources/roles/types/RoleResponse.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { RoleId } from "../../commons/types/RoleId";
+import { AccountId } from "../../commons/types/AccountId";
 
@@ -10,5 +12,5 @@ export const RoleResponse: core.serialization.ObjectSchema<serializers.RoleRespo
     core.serialization.object({
-        id: core.serialization.lazy(async () => (await import("../../..")).RoleId),
+        id: RoleId,
         name: core.serialization.string(),
-        accountId: core.serialization.lazy(async () => (await import("../../..")).AccountId),
+        accountId: AccountId,
         createdAt: core.serialization.date(),
@@ -19,5 +21,5 @@ export declare namespace RoleResponse {
     interface Raw {
-        id: serializers.RoleId.Raw;
+        id: RoleId.Raw;
         name: string;
-        accountId: serializers.AccountId.Raw;
+        accountId: AccountId.Raw;
         createdAt: string;
diff --git a/src/serialization/resources/secrets/types/Secret.ts b/src/serialization/resources/secrets/types/Secret.ts
index 8ee44ca..a261623 100644
--- a/src/serialization/resources/secrets/types/Secret.ts
+++ b/src/serialization/resources/secrets/types/Secret.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { SecretId } from "../../commons/types/SecretId";
+import { WriteSecret } from "./WriteSecret";
 
@@ -10,9 +12,9 @@ export const Secret: core.serialization.ObjectSchema<serializers.Secret.Raw, Fla
     .object({
-        id: core.serialization.lazy(async () => (await import("../../..")).SecretId),
+        id: SecretId,
     })
-    .extend(core.serialization.lazyObject(async () => (await import("../../..")).WriteSecret));
+    .extend(WriteSecret);
 
 export declare namespace Secret {
-    interface Raw extends serializers.WriteSecret.Raw {
-        id: serializers.SecretId.Raw;
+    interface Raw extends WriteSecret.Raw {
+        id: SecretId.Raw;
     }
diff --git a/src/serialization/resources/secrets/types/SecretsResponse.ts b/src/serialization/resources/secrets/types/SecretsResponse.ts
index ae2a03e..93cdea3 100644
--- a/src/serialization/resources/secrets/types/SecretsResponse.ts
+++ b/src/serialization/resources/secrets/types/SecretsResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Secret } from "./Secret";
 
@@ -12,3 +13,3 @@ export const SecretsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Secret)),
+    data: core.serialization.list(Secret),
 });
@@ -17,3 +18,3 @@ export declare namespace SecretsResponse {
     interface Raw {
-        data: serializers.Secret.Raw[];
+        data: Secret.Raw[];
     }
diff --git a/src/serialization/resources/secrets/types/WriteSecret.ts b/src/serialization/resources/secrets/types/WriteSecret.ts
index 31c1232..ed67737 100644
--- a/src/serialization/resources/secrets/types/WriteSecret.ts
+++ b/src/serialization/resources/secrets/types/WriteSecret.ts
@@ -7,2 +7,6 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { SecretName } from "./SecretName";
+import { SecretValue } from "./SecretValue";
+import { EnvironmentId } from "../../commons/types/EnvironmentId";
+import { SpaceId } from "../../commons/types/SpaceId";
 
@@ -10,6 +14,6 @@ export const WriteSecret: core.serialization.ObjectSchema<serializers.WriteSecre
     core.serialization.object({
-        name: core.serialization.lazy(async () => (await import("../../..")).SecretName),
-        value: core.serialization.lazy(async () => (await import("../../..")).SecretValue),
-        environmentId: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId).optional(),
-        spaceId: core.serialization.lazy(async () => (await import("../../..")).SpaceId).optional(),
+        name: SecretName,
+        value: SecretValue,
+        environmentId: EnvironmentId.optional(),
+        spaceId: SpaceId.optional(),
     });
@@ -18,6 +22,6 @@ export declare namespace WriteSecret {
     interface Raw {
-        name: serializers.SecretName.Raw;
-        value: serializers.SecretValue.Raw;
-        environmentId?: serializers.EnvironmentId.Raw | null;
-        spaceId?: serializers.SpaceId.Raw | null;
+        name: SecretName.Raw;
+        value: SecretValue.Raw;
+        environmentId?: EnvironmentId.Raw | null;
+        spaceId?: SpaceId.Raw | null;
     }
diff --git a/src/serialization/resources/sheets/types/CellValueWithCounts.ts b/src/serialization/resources/sheets/types/CellValueWithCounts.ts
index 9b1b709..22aef0f 100644
--- a/src/serialization/resources/sheets/types/CellValueWithCounts.ts
+++ b/src/serialization/resources/sheets/types/CellValueWithCounts.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { RecordCounts } from "../../records/types/RecordCounts";
+import { CellValue } from "../../records/types/CellValue";
 
@@ -13,9 +15,9 @@ export const CellValueWithCounts: core.serialization.ObjectSchema<
     .object({
-        counts: core.serialization.lazyObject(async () => (await import("../../..")).RecordCounts).optional(),
+        counts: RecordCounts.optional(),
     })
-    .extend(core.serialization.lazyObject(async () => (await import("../../..")).CellValue));
+    .extend(CellValue);
 
 export declare namespace CellValueWithCounts {
-    interface Raw extends serializers.CellValue.Raw {
-        counts?: serializers.RecordCounts.Raw | null;
+    interface Raw extends CellValue.Raw {
+        counts?: RecordCounts.Raw | null;
     }
diff --git a/src/serialization/resources/sheets/types/CellsResponse.ts b/src/serialization/resources/sheets/types/CellsResponse.ts
index 6aaba6c..aa0db90 100644
--- a/src/serialization/resources/sheets/types/CellsResponse.ts
+++ b/src/serialization/resources/sheets/types/CellsResponse.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { CellsResponseData } from "./CellsResponseData";
+import { CellValueWithCounts } from "./CellValueWithCounts";
 
@@ -10,3 +12,3 @@ export const CellsResponse: core.serialization.ObjectSchema<serializers.CellsRes
     core.serialization.object({
-        data: core.serialization.lazy(async () => (await import("../../..")).CellsResponseData),
+        data: CellsResponseData,
     });
@@ -15,3 +17,3 @@ export declare namespace CellsResponse {
     interface Raw {
-        data: serializers.CellsResponseData.Raw;
+        data: CellsResponseData.Raw;
     }
diff --git a/src/serialization/resources/sheets/types/CellsResponseData.ts b/src/serialization/resources/sheets/types/CellsResponseData.ts
index eaf3dc8..35c4377 100644
--- a/src/serialization/resources/sheets/types/CellsResponseData.ts
+++ b/src/serialization/resources/sheets/types/CellsResponseData.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { CellValueWithCounts } from "./CellValueWithCounts";
 
@@ -11,9 +12,6 @@ export const CellsResponseData: core.serialization.Schema<
     Flatfile.CellsResponseData
-> = core.serialization.record(
-    core.serialization.string(),
-    core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).CellValueWithCounts))
-);
+> = core.serialization.record(core.serialization.string(), core.serialization.list(CellValueWithCounts));
 
 export declare namespace CellsResponseData {
-    type Raw = Record<string, serializers.CellValueWithCounts.Raw[]>;
+    type Raw = Record<string, CellValueWithCounts.Raw[]>;
 }
diff --git a/src/serialization/resources/sheets/types/CompositeUniqueConstraint.ts b/src/serialization/resources/sheets/types/CompositeUniqueConstraint.ts
index 8d299e9..d859c8d 100644
--- a/src/serialization/resources/sheets/types/CompositeUniqueConstraint.ts
+++ b/src/serialization/resources/sheets/types/CompositeUniqueConstraint.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { CompositeUniqueConstraintStrategy } from "./CompositeUniqueConstraintStrategy";
 
@@ -14,3 +15,3 @@ export const CompositeUniqueConstraint: core.serialization.ObjectSchema<
     fields: core.serialization.list(core.serialization.string()),
-    strategy: core.serialization.lazy(async () => (await import("../../..")).CompositeUniqueConstraintStrategy),
+    strategy: CompositeUniqueConstraintStrategy,
 });
@@ -21,3 +22,3 @@ export declare namespace CompositeUniqueConstraint {
         fields: string[];
-        strategy: serializers.CompositeUniqueConstraintStrategy.Raw;
+        strategy: CompositeUniqueConstraintStrategy.Raw;
     }
diff --git a/src/serialization/resources/sheets/types/FieldConfigResponse.ts b/src/serialization/resources/sheets/types/FieldConfigResponse.ts
index a4c7cc8..90bc380 100644
--- a/src/serialization/resources/sheets/types/FieldConfigResponse.ts
+++ b/src/serialization/resources/sheets/types/FieldConfigResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Property } from "../../property/types/Property";
 
@@ -12,3 +13,3 @@ export const FieldConfigResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.lazy(async () => (await import("../../..")).Property),
+    data: Property,
 });
@@ -17,3 +18,3 @@ export declare namespace FieldConfigResponse {
     interface Raw {
-        data: serializers.Property.Raw;
+        data: Property.Raw;
     }
diff --git a/src/serialization/resources/sheets/types/ListSheetsResponse.ts b/src/serialization/resources/sheets/types/ListSheetsResponse.ts
index de34c0c..8620c5c 100644
--- a/src/serialization/resources/sheets/types/ListSheetsResponse.ts
+++ b/src/serialization/resources/sheets/types/ListSheetsResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Sheet } from "./Sheet";
 
@@ -12,3 +13,3 @@ export const ListSheetsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Sheet)),
+    data: core.serialization.list(Sheet),
 });
@@ -17,3 +18,3 @@ export declare namespace ListSheetsResponse {
     interface Raw {
-        data: serializers.Sheet.Raw[];
+        data: Sheet.Raw[];
     }
diff --git a/src/serialization/resources/sheets/types/RecordCountsResponse.ts b/src/serialization/resources/sheets/types/RecordCountsResponse.ts
index cdebc31..c4e7334 100644
--- a/src/serialization/resources/sheets/types/RecordCountsResponse.ts
+++ b/src/serialization/resources/sheets/types/RecordCountsResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { RecordCountsResponseData } from "./RecordCountsResponseData";
 
@@ -12,3 +13,3 @@ export const RecordCountsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.lazyObject(async () => (await import("../../..")).RecordCountsResponseData),
+    data: RecordCountsResponseData,
 });
@@ -17,3 +18,3 @@ export declare namespace RecordCountsResponse {
     interface Raw {
-        data: serializers.RecordCountsResponseData.Raw;
+        data: RecordCountsResponseData.Raw;
     }
diff --git a/src/serialization/resources/sheets/types/RecordCountsResponseData.ts b/src/serialization/resources/sheets/types/RecordCountsResponseData.ts
index 3bb978e..29afd10 100644
--- a/src/serialization/resources/sheets/types/RecordCountsResponseData.ts
+++ b/src/serialization/resources/sheets/types/RecordCountsResponseData.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { RecordCounts } from "../../records/types/RecordCounts";
 
@@ -12,3 +13,3 @@ export const RecordCountsResponseData: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    counts: core.serialization.lazyObject(async () => (await import("../../..")).RecordCounts),
+    counts: RecordCounts,
     success: core.serialization.boolean(),
@@ -18,3 +19,3 @@ export declare namespace RecordCountsResponseData {
     interface Raw {
-        counts: serializers.RecordCounts.Raw;
+        counts: RecordCounts.Raw;
         success: boolean;
diff --git a/src/serialization/resources/sheets/types/Sheet.ts b/src/serialization/resources/sheets/types/Sheet.ts
index 4e3c704..46580fc 100644
--- a/src/serialization/resources/sheets/types/Sheet.ts
+++ b/src/serialization/resources/sheets/types/Sheet.ts
@@ -7,10 +7,13 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { SheetId } from "../../commons/types/SheetId";
+import { WorkbookId } from "../../commons/types/WorkbookId";
+import { SheetConfig } from "./SheetConfig";
+import { RecordCounts } from "../../records/types/RecordCounts";
 
 export const Sheet: core.serialization.ObjectSchema<serializers.Sheet.Raw, Flatfile.Sheet> = core.serialization.object({
-    id: core.serialization.lazy(async () => (await import("../../..")).SheetId),
-    workbookId: core.serialization.lazy(async () => (await import("../../..")).WorkbookId),
+    id: SheetId,
+    workbookId: WorkbookId,
     name: core.serialization.string(),
     slug: core.serialization.string(),
-    config: core.serialization.lazyObject(async () => (await import("../../..")).SheetConfig),
-    countRecords: core.serialization.lazyObject(async () => (await import("../../..")).RecordCounts).optional(),
+    config: SheetConfig,
     namespace: core.serialization.string().optional(),
@@ -20,2 +23,3 @@ export const Sheet: core.serialization.ObjectSchema<serializers.Sheet.Raw, Flatf
     lockedAt: core.serialization.date().optional(),
+    recordCounts: RecordCounts.optional(),
 });
@@ -24,8 +28,7 @@ export declare namespace Sheet {
     interface Raw {
-        id: serializers.SheetId.Raw;
-        workbookId: serializers.WorkbookId.Raw;
+        id: SheetId.Raw;
+        workbookId: WorkbookId.Raw;
         name: string;
         slug: string;
-        config: serializers.SheetConfig.Raw;
-        countRecords?: serializers.RecordCounts.Raw | null;
+        config: SheetConfig.Raw;
         namespace?: string | null;
@@ -35,2 +38,3 @@ export declare namespace Sheet {
         lockedAt?: string | null;
+        recordCounts?: RecordCounts.Raw | null;
     }
diff --git a/src/serialization/resources/sheets/types/SheetConfig.ts b/src/serialization/resources/sheets/types/SheetConfig.ts
index fc648da..503beb6 100644
--- a/src/serialization/resources/sheets/types/SheetConfig.ts
+++ b/src/serialization/resources/sheets/types/SheetConfig.ts
@@ -7,2 +7,6 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { SheetAccess } from "./SheetAccess";
+import { Property } from "../../property/types/Property";
+import { Action } from "../../commons/types/Action";
+import { SheetConstraint } from "./SheetConstraint";
 
@@ -16,13 +20,7 @@ export const SheetConfig: core.serialization.ObjectSchema<serializers.SheetConfi
         mappingConfidenceThreshold: core.serialization.number().optional(),
-        access: core.serialization
-            .list(core.serialization.lazy(async () => (await import("../../..")).SheetAccess))
-            .optional(),
-        fields: core.serialization.list(core.serialization.lazy(async () => (await import("../../..")).Property)),
-        actions: core.serialization
-            .list(core.serialization.lazyObject(async () => (await import("../../..")).Action))
-            .optional(),
+        access: core.serialization.list(SheetAccess).optional(),
+        fields: core.serialization.list(Property),
+        actions: core.serialization.list(Action).optional(),
         metadata: core.serialization.any().optional(),
-        constraints: core.serialization
-            .list(core.serialization.lazy(async () => (await import("../../..")).SheetConstraint))
-            .optional(),
+        constraints: core.serialization.list(SheetConstraint).optional(),
     });
@@ -37,7 +35,7 @@ export declare namespace SheetConfig {
         mappingConfidenceThreshold?: number | null;
-        access?: serializers.SheetAccess.Raw[] | null;
-        fields: serializers.Property.Raw[];
-        actions?: serializers.Action.Raw[] | null;
+        access?: SheetAccess.Raw[] | null;
+        fields: Property.Raw[];
+        actions?: Action.Raw[] | null;
         metadata?: any | null;
-        constraints?: serializers.SheetConstraint.Raw[] | null;
+        constraints?: SheetConstraint.Raw[] | null;
     }
diff --git a/src/serialization/resources/sheets/types/SheetConfigOrUpdate.ts b/src/serialization/resources/sheets/types/SheetConfigOrUpdate.ts
index a58ab72..ccb3007 100644
--- a/src/serialization/resources/sheets/types/SheetConfigOrUpdate.ts
+++ b/src/serialization/resources/sheets/types/SheetConfigOrUpdate.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { SheetConfigUpdate } from "./SheetConfigUpdate";
+import { SheetUpdate } from "./SheetUpdate";
 
@@ -11,9 +13,6 @@ export const SheetConfigOrUpdate: core.serialization.ObjectSchema<
     Flatfile.SheetConfigOrUpdate
-> = core.serialization
-    .object({})
-    .extend(core.serialization.lazyObject(async () => (await import("../../..")).SheetConfigUpdate))
-    .extend(core.serialization.lazyObject(async () => (await import("../../..")).SheetUpdate));
+> = core.serialization.object({}).extend(SheetConfigUpdate).extend(SheetUpdate);
 
 export declare namespace SheetConfigOrUpdate {
-    interface Raw extends serializers.SheetConfigUpdate.Raw, serializers.SheetUpdate.Raw {}
+    interface Raw extends SheetConfigUpdate.Raw, SheetUpdate.Raw {}
 }
diff --git a/src/serialization/resources/sheets/types/SheetConfigUpdate.ts b/src/serialization/resources/sheets/types/SheetConfigUpdate.ts
index 4cc00b3..8b7fba9 100644
--- a/src/serialization/resources/sheets/types/SheetConfigUpdate.ts
+++ b/src/serialization/resources/sheets/types/SheetConfigUpdate.ts
@@ -7,2 +7,5 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { SheetAccess } from "./SheetAccess";
+import { Property } from "../../property/types/Property";
+import { Action } from "../../commons/types/Action";
 
@@ -18,11 +21,5 @@ export const SheetConfigUpdate: core.serialization.ObjectSchema<
     mappingConfidenceThreshold: core.serialization.number().optional(),
-    access: core.serialization
-        .list(core.serialization.lazy(async () => (await import("../../..")).SheetAccess))
-        .optional(),
-    fields: core.serialization
-        .list(core.serialization.lazy(async () => (await import("../../..")).Property))
-        .optional(),
-    actions: core.serialization
-        .list(core.serialization.lazyObject(async () => (await import("../../..")).Action))
-        .optional(),
+    access: core.serialization.list(SheetAccess).optional(),
+    fields: core.serialization.list(Property).optional(),
+    actions: core.serialization.list(Action).optional(),
 });
@@ -37,5 +34,5 @@ export declare namespace SheetConfigUpdate {
         mappingConfidenceThreshold?: number | null;
-        access?: serializers.SheetAccess.Raw[] | null;
-        fields?: serializers.Property.Raw[] | null;
-        actions?: serializers.Action.Raw[] | null;
+        access?: SheetAccess.Raw[] | null;
+        fields?: Property.Raw[] | null;
+        actions?: Action.Raw[] | null;
     }
diff --git a/src/serialization/resources/sheets/types/SheetConstraint.ts b/src/serialization/resources/sheets/types/SheetConstraint.ts
index a55e17d..cb4d9ee 100644
--- a/src/serialization/resources/sheets/types/SheetConstraint.ts
+++ b/src/serialization/resources/sheets/types/SheetConstraint.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { CompositeUniqueConstraint } from "./CompositeUniqueConstraint";
+import { ExternalSheetConstraint } from "./ExternalSheetConstraint";
 
@@ -11,4 +13,4 @@ export const SheetConstraint: core.serialization.Schema<serializers.SheetConstra
         .union("type", {
-            unique: core.serialization.lazyObject(async () => (await import("../../..")).CompositeUniqueConstraint),
-            external: core.serialization.lazyObject(async () => (await import("../../..")).ExternalSheetConstraint),
+            unique: CompositeUniqueConstraint,
+            external: ExternalSheetConstraint,
         })
@@ -22,3 +24,3 @@ export declare namespace SheetConstraint {
 
-    interface Unique extends serializers.CompositeUniqueConstraint.Raw {
+    interface Unique extends CompositeUniqueConstraint.Raw {
         type: "unique";
@@ -26,3 +28,3 @@ export declare namespace SheetConstraint {
 
-    interface External extends serializers.ExternalSheetConstraint.Raw {
+    interface External extends ExternalSheetConstraint.Raw {
         type: "external";
diff --git a/src/serialization/resources/sheets/types/SheetResponse.ts b/src/serialization/resources/sheets/types/SheetResponse.ts
index 084f567..97811d1 100644
--- a/src/serialization/resources/sheets/types/SheetResponse.ts
+++ b/src/serialization/resources/sheets/types/SheetResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Sheet } from "./Sheet";
 
@@ -10,3 +11,3 @@ export const SheetResponse: core.serialization.ObjectSchema<serializers.SheetRes
     core.serialization.object({
-        data: core.serialization.lazyObject(async () => (await import("../../..")).Sheet),
+        data: Sheet,
     });
@@ -15,3 +16,3 @@ export declare namespace SheetResponse {
     interface Raw {
-        data: serializers.Sheet.Raw;
+        data: Sheet.Raw;
     }
diff --git a/src/serialization/resources/sheets/types/SheetUpdate.ts b/src/serialization/resources/sheets/types/SheetUpdate.ts
index 2ee2953..f3e3b7c 100644
--- a/src/serialization/resources/sheets/types/SheetUpdate.ts
+++ b/src/serialization/resources/sheets/types/SheetUpdate.ts
@@ -7,2 +7,5 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { SheetId } from "../../commons/types/SheetId";
+import { WorkbookId } from "../../commons/types/WorkbookId";
+import { SheetConfig } from "./SheetConfig";
 
@@ -10,6 +13,5 @@ export const SheetUpdate: core.serialization.ObjectSchema<serializers.SheetUpdat
     core.serialization.object({
-        id: core.serialization.lazy(async () => (await import("../../..")).SheetId).optional(),
-        workbookId: core.serialization.lazy(async () => (await import("../../..")).WorkbookId).optional(),
-        config: core.serialization.lazyObject(async () => (await import("../../..")).SheetConfig).optional(),
-        countRecords: core.serialization.lazyObject(async () => (await import("../../..")).RecordCounts).optional(),
+        id: SheetId.optional(),
+        workbookId: WorkbookId.optional(),
+        config: SheetConfig.optional(),
         namespace: core.serialization.string().optional(),
@@ -21,6 +23,5 @@ export declare namespace SheetUpdate {
     interface Raw {
-        id?: serializers.SheetId.Raw | null;
-        workbookId?: serializers.WorkbookId.Raw | null;
-        config?: serializers.SheetConfig.Raw | null;
-        countRecords?: serializers.RecordCounts.Raw | null;
+        id?: SheetId.Raw | null;
+        workbookId?: WorkbookId.Raw | null;
+        config?: SheetConfig.Raw | null;
         namespace?: string | null;
diff --git a/src/serialization/resources/snapshots/client/requests/CreateSnapshotRequest.ts b/src/serialization/resources/snapshots/client/requests/CreateSnapshotRequest.ts
index 9aa9754..661681c 100644
--- a/src/serialization/resources/snapshots/client/requests/CreateSnapshotRequest.ts
+++ b/src/serialization/resources/snapshots/client/requests/CreateSnapshotRequest.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../../api";
 import * as core from "../../../../../core";
+import { SheetId } from "../../../commons/types/SheetId";
 
@@ -12,3 +13,3 @@ export const CreateSnapshotRequest: core.serialization.Schema<
 > = core.serialization.object({
-    sheetId: core.serialization.lazy(async () => (await import("../../../..")).SheetId),
+    sheetId: SheetId,
     label: core.serialization.string().optional(),
@@ -18,3 +19,3 @@ export declare namespace CreateSnapshotRequest {
     interface Raw {
-        sheetId: serializers.SheetId.Raw;
+        sheetId: SheetId.Raw;
         label?: string | null;
diff --git a/src/serialization/resources/snapshots/client/restoreSnapshot.ts b/src/serialization/resources/snapshots/client/restoreSnapshot.ts
index ee59bc1..1122a48 100644
--- a/src/serialization/resources/snapshots/client/restoreSnapshot.ts
+++ b/src/serialization/resources/snapshots/client/restoreSnapshot.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { RestoreOptions } from "../types/RestoreOptions";
 
@@ -11,6 +12,6 @@ export const Request: core.serialization.Schema<
     Flatfile.RestoreOptions | undefined
-> = core.serialization.lazyObject(async () => (await import("../../..")).RestoreOptions).optional();
+> = RestoreOptions.optional();
 
 export declare namespace Request {
-    type Raw = serializers.RestoreOptions.Raw | null | undefined;
+    type Raw = RestoreOptions.Raw | null | undefined;
 }
diff --git a/src/serialization/resources/snapshots/types/Snapshot.ts b/src/serialization/resources/snapshots/types/Snapshot.ts
index eea6003..941fdb8 100644
--- a/src/serialization/resources/snapshots/types/Snapshot.ts
+++ b/src/serialization/resources/snapshots/types/Snapshot.ts
@@ -7,2 +7,6 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { SnapshotId } from "../../commons/types/SnapshotId";
+import { SheetId } from "../../commons/types/SheetId";
+import { SnapshotSummary } from "./SnapshotSummary";
+import { UserId } from "../../commons/types/UserId";
 
@@ -10,8 +14,8 @@ export const Snapshot: core.serialization.ObjectSchema<serializers.Snapshot.Raw,
     core.serialization.object({
-        id: core.serialization.lazy(async () => (await import("../../..")).SnapshotId),
-        sheetId: core.serialization.lazy(async () => (await import("../../..")).SheetId),
+        id: SnapshotId,
+        sheetId: SheetId,
         label: core.serialization.string().optional(),
-        summary: core.serialization.lazyObject(async () => (await import("../../..")).SnapshotSummary).optional(),
+        summary: SnapshotSummary.optional(),
         createdAt: core.serialization.date(),
-        createdBy: core.serialization.lazy(async () => (await import("../../..")).UserId),
+        createdBy: UserId,
     });
@@ -20,8 +24,8 @@ export declare namespace Snapshot {
     interface Raw {
-        id: serializers.SnapshotId.Raw;
-        sheetId: serializers.SheetId.Raw;
+        id: SnapshotId.Raw;
+        sheetId: SheetId.Raw;
         label?: string | null;
-        summary?: serializers.SnapshotSummary.Raw | null;
+        summary?: SnapshotSummary.Raw | null;
         createdAt: string;
-        createdBy: serializers.UserId.Raw;
+        createdBy: UserId.Raw;
     }
diff --git a/src/serialization/resources/snapshots/types/SnapshotResponse.ts b/src/serialization/resources/snapshots/types/SnapshotResponse.ts
index 2c7b5b1..03f623d 100644
--- a/src/serialization/resources/snapshots/types/SnapshotResponse.ts
+++ b/src/serialization/resources/snapshots/types/SnapshotResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Snapshot } from "./Snapshot";
 
@@ -12,3 +13,3 @@ export const SnapshotResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.lazyObject(async () => (await import("../../..")).Snapshot),
+    data: Snapshot,
 });
@@ -17,3 +18,3 @@ export declare namespace SnapshotResponse {
     interface Raw {
-        data: serializers.Snapshot.Raw;
+        data: Snapshot.Raw;
     }
diff --git a/src/serialization/resources/snapshots/types/SnapshotSummary.ts b/src/serialization/resources/snapshots/types/SnapshotSummary.ts
index ddbc6f5..9fc80cf 100644
--- a/src/serialization/resources/snapshots/types/SnapshotSummary.ts
+++ b/src/serialization/resources/snapshots/types/SnapshotSummary.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { SummarySection } from "./SummarySection";
 
@@ -12,5 +13,5 @@ export const SnapshotSummary: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    createdSince: core.serialization.lazyObject(async () => (await import("../../..")).SummarySection),
-    updatedSince: core.serialization.lazyObject(async () => (await import("../../..")).SummarySection),
-    deletedSince: core.serialization.lazyObject(async () => (await import("../../..")).SummarySection),
+    createdSince: SummarySection,
+    updatedSince: SummarySection,
+    deletedSince: SummarySection,
 });
@@ -19,5 +20,5 @@ export declare namespace SnapshotSummary {
     interface Raw {
-        createdSince: serializers.SummarySection.Raw;
-        updatedSince: serializers.SummarySection.Raw;
-        deletedSince: serializers.SummarySection.Raw;
+        createdSince: SummarySection.Raw;
+        updatedSince: SummarySection.Raw;
+        deletedSince: SummarySection.Raw;
     }
diff --git a/src/serialization/resources/snapshots/types/SnapshotsResponse.ts b/src/serialization/resources/snapshots/types/SnapshotsResponse.ts
index 614f775..bc7e92e 100644
--- a/src/serialization/resources/snapshots/types/SnapshotsResponse.ts
+++ b/src/serialization/resources/snapshots/types/SnapshotsResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Snapshot } from "./Snapshot";
 
@@ -12,3 +13,3 @@ export const SnapshotsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Snapshot)),
+    data: core.serialization.list(Snapshot),
 });
@@ -17,3 +18,3 @@ export declare namespace SnapshotsResponse {
     interface Raw {
-        data: serializers.Snapshot.Raw[];
+        data: Snapshot.Raw[];
     }
diff --git a/src/serialization/resources/spaces/types/EventToken.ts b/src/serialization/resources/spaces/types/EventToken.ts
index 522af9d..72df747 100644
--- a/src/serialization/resources/spaces/types/EventToken.ts
+++ b/src/serialization/resources/spaces/types/EventToken.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { AccountId } from "../../commons/types/AccountId";
 
@@ -10,3 +11,3 @@ export const EventToken: core.serialization.ObjectSchema<serializers.EventToken.
     core.serialization.object({
-        accountId: core.serialization.lazy(async () => (await import("../../..")).AccountId).optional(),
+        accountId: AccountId.optional(),
         subscribeKey: core.serialization.string().optional(),
@@ -18,3 +19,3 @@ export declare namespace EventToken {
     interface Raw {
-        accountId?: serializers.AccountId.Raw | null;
+        accountId?: AccountId.Raw | null;
         subscribeKey?: string | null;
diff --git a/src/serialization/resources/spaces/types/EventTokenResponse.ts b/src/serialization/resources/spaces/types/EventTokenResponse.ts
index 7cd78f1..71d4e1e 100644
--- a/src/serialization/resources/spaces/types/EventTokenResponse.ts
+++ b/src/serialization/resources/spaces/types/EventTokenResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { EventToken } from "./EventToken";
 
@@ -12,3 +13,3 @@ export const EventTokenResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.lazyObject(async () => (await import("../../..")).EventToken),
+    data: EventToken,
 });
@@ -17,3 +18,3 @@ export declare namespace EventTokenResponse {
     interface Raw {
-        data: serializers.EventToken.Raw;
+        data: EventToken.Raw;
     }
diff --git a/src/serialization/resources/spaces/types/InternalSpaceConfigBase.ts b/src/serialization/resources/spaces/types/InternalSpaceConfigBase.ts
index f742f4f..594936e 100644
--- a/src/serialization/resources/spaces/types/InternalSpaceConfigBase.ts
+++ b/src/serialization/resources/spaces/types/InternalSpaceConfigBase.ts
@@ -7,2 +7,8 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { SpaceConfigId } from "../../commons/types/SpaceConfigId";
+import { EnvironmentId } from "../../commons/types/EnvironmentId";
+import { WorkbookId } from "../../commons/types/WorkbookId";
+import { Action } from "../../commons/types/Action";
+import { SpaceAccess } from "./SpaceAccess";
+import { AppId } from "../../commons/types/AppId";
 
@@ -12,12 +18,8 @@ export const InternalSpaceConfigBase: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    spaceConfigId: core.serialization.lazy(async () => (await import("../../..")).SpaceConfigId).optional(),
-    environmentId: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId).optional(),
-    primaryWorkbookId: core.serialization.lazy(async () => (await import("../../..")).WorkbookId).optional(),
+    spaceConfigId: SpaceConfigId.optional(),
+    environmentId: EnvironmentId.optional(),
+    primaryWorkbookId: WorkbookId.optional(),
     metadata: core.serialization.any().optional(),
-    actions: core.serialization
-        .list(core.serialization.lazyObject(async () => (await import("../../..")).Action))
-        .optional(),
-    access: core.serialization
-        .list(core.serialization.lazy(async () => (await import("../../..")).SpaceAccess))
-        .optional(),
+    actions: core.serialization.list(Action).optional(),
+    access: core.serialization.list(SpaceAccess).optional(),
     autoConfigure: core.serialization.boolean().optional(),
@@ -28,2 +30,3 @@ export const InternalSpaceConfigBase: core.serialization.ObjectSchema<
     archivedAt: core.serialization.date().optional(),
+    appId: AppId.optional(),
 });
@@ -32,8 +35,8 @@ export declare namespace InternalSpaceConfigBase {
     interface Raw {
-        spaceConfigId?: serializers.SpaceConfigId.Raw | null;
-        environmentId?: serializers.EnvironmentId.Raw | null;
-        primaryWorkbookId?: serializers.WorkbookId.Raw | null;
+        spaceConfigId?: SpaceConfigId.Raw | null;
+        environmentId?: EnvironmentId.Raw | null;
+        primaryWorkbookId?: WorkbookId.Raw | null;
         metadata?: any | null;
-        actions?: serializers.Action.Raw[] | null;
-        access?: serializers.SpaceAccess.Raw[] | null;
+        actions?: Action.Raw[] | null;
+        access?: SpaceAccess.Raw[] | null;
         autoConfigure?: boolean | null;
@@ -44,2 +47,3 @@ export declare namespace InternalSpaceConfigBase {
         archivedAt?: string | null;
+        appId?: AppId.Raw | null;
     }
diff --git a/src/serialization/resources/spaces/types/ListSpacesResponse.ts b/src/serialization/resources/spaces/types/ListSpacesResponse.ts
index 918c6f3..c502cf4 100644
--- a/src/serialization/resources/spaces/types/ListSpacesResponse.ts
+++ b/src/serialization/resources/spaces/types/ListSpacesResponse.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Pagination } from "../../commons/types/Pagination";
+import { Space } from "./Space";
 
@@ -12,4 +14,4 @@ export const ListSpacesResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    pagination: core.serialization.lazyObject(async () => (await import("../../..")).Pagination).optional(),
-    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Space)),
+    pagination: Pagination.optional(),
+    data: core.serialization.list(Space),
 });
@@ -18,4 +20,4 @@ export declare namespace ListSpacesResponse {
     interface Raw {
-        pagination?: serializers.Pagination.Raw | null;
-        data: serializers.Space.Raw[];
+        pagination?: Pagination.Raw | null;
+        data: Space.Raw[];
     }
diff --git a/src/serialization/resources/spaces/types/Space.ts b/src/serialization/resources/spaces/types/Space.ts
index dd38a6f..3dd7321 100644
--- a/src/serialization/resources/spaces/types/Space.ts
+++ b/src/serialization/resources/spaces/types/Space.ts
@@ -7,2 +7,7 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { SpaceId } from "../../commons/types/SpaceId";
+import { UserId } from "../../commons/types/UserId";
+import { SpaceSize } from "./SpaceSize";
+import { GuestAuthenticationEnum } from "../../environments/types/GuestAuthenticationEnum";
+import { InternalSpaceConfigBase } from "./InternalSpaceConfigBase";
 
@@ -10,6 +15,6 @@ export const Space: core.serialization.ObjectSchema<serializers.Space.Raw, Flatf
     .object({
-        id: core.serialization.lazy(async () => (await import("../../..")).SpaceId),
+        id: SpaceId,
         workbooksCount: core.serialization.number().optional(),
         filesCount: core.serialization.number().optional(),
-        createdByUserId: core.serialization.lazy(async () => (await import("../../..")).UserId).optional(),
+        createdByUserId: UserId.optional(),
         createdByUserName: core.serialization.string().optional(),
@@ -24,16 +29,14 @@ export const Space: core.serialization.ObjectSchema<serializers.Space.Raw, Flatf
         isCollaborative: core.serialization.boolean().optional(),
-        size: core.serialization.lazyObject(async () => (await import("../../..")).SpaceSize).optional(),
+        size: SpaceSize.optional(),
         upgradedAt: core.serialization.date().optional(),
-        guestAuthentication: core.serialization.list(
-            core.serialization.lazy(async () => (await import("../../..")).GuestAuthenticationEnum)
-        ),
+        guestAuthentication: core.serialization.list(GuestAuthenticationEnum),
     })
-    .extend(core.serialization.lazyObject(async () => (await import("../../..")).InternalSpaceConfigBase));
+    .extend(InternalSpaceConfigBase);
 
 export declare namespace Space {
-    interface Raw extends serializers.InternalSpaceConfigBase.Raw {
-        id: serializers.SpaceId.Raw;
+    interface Raw extends InternalSpaceConfigBase.Raw {
+        id: SpaceId.Raw;
         workbooksCount?: number | null;
         filesCount?: number | null;
-        createdByUserId?: serializers.UserId.Raw | null;
+        createdByUserId?: UserId.Raw | null;
         createdByUserName?: string | null;
@@ -48,5 +51,5 @@ export declare namespace Space {
         isCollaborative?: boolean | null;
-        size?: serializers.SpaceSize.Raw | null;
+        size?: SpaceSize.Raw | null;
         upgradedAt?: string | null;
-        guestAuthentication: serializers.GuestAuthenticationEnum.Raw[];
+        guestAuthentication: GuestAuthenticationEnum.Raw[];
     }
diff --git a/src/serialization/resources/spaces/types/SpaceConfig.ts b/src/serialization/resources/spaces/types/SpaceConfig.ts
index 00a252d..4cb89e9 100644
--- a/src/serialization/resources/spaces/types/SpaceConfig.ts
+++ b/src/serialization/resources/spaces/types/SpaceConfig.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { GuestAuthenticationEnum } from "../../environments/types/GuestAuthenticationEnum";
+import { InternalSpaceConfigBase } from "./InternalSpaceConfigBase";
 
@@ -13,13 +15,11 @@ export const SpaceConfig: core.serialization.ObjectSchema<serializers.SpaceConfi
             displayOrder: core.serialization.number().optional(),
-            guestAuthentication: core.serialization
-                .list(core.serialization.lazy(async () => (await import("../../..")).GuestAuthenticationEnum))
-                .optional(),
+            guestAuthentication: core.serialization.list(GuestAuthenticationEnum).optional(),
         })
-        .extend(core.serialization.lazyObject(async () => (await import("../../..")).InternalSpaceConfigBase));
+        .extend(InternalSpaceConfigBase);
 
 export declare namespace SpaceConfig {
-    interface Raw extends serializers.InternalSpaceConfigBase.Raw {
+    interface Raw extends InternalSpaceConfigBase.Raw {
         name?: string | null;
         displayOrder?: number | null;
-        guestAuthentication?: serializers.GuestAuthenticationEnum.Raw[] | null;
+        guestAuthentication?: GuestAuthenticationEnum.Raw[] | null;
     }
diff --git a/src/serialization/resources/spaces/types/SpaceResponse.ts b/src/serialization/resources/spaces/types/SpaceResponse.ts
index abe2d0b..d2b0a68 100644
--- a/src/serialization/resources/spaces/types/SpaceResponse.ts
+++ b/src/serialization/resources/spaces/types/SpaceResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Space } from "./Space";
 
@@ -10,3 +11,3 @@ export const SpaceResponse: core.serialization.ObjectSchema<serializers.SpaceRes
     core.serialization.object({
-        data: core.serialization.lazyObject(async () => (await import("../../..")).Space),
+        data: Space,
     });
@@ -15,3 +16,3 @@ export declare namespace SpaceResponse {
     interface Raw {
-        data: serializers.Space.Raw;
+        data: Space.Raw;
     }
diff --git a/src/serialization/resources/users/client/requests/UpdateUserRequest.ts b/src/serialization/resources/users/client/requests/UpdateUserRequest.ts
index d9671ef..8b56009 100644
--- a/src/serialization/resources/users/client/requests/UpdateUserRequest.ts
+++ b/src/serialization/resources/users/client/requests/UpdateUserRequest.ts
@@ -13,2 +13,3 @@ export const UpdateUserRequest: core.serialization.Schema<
     name: core.serialization.string().optional(),
+    dashboard: core.serialization.number().optional(),
 });
@@ -18,2 +19,3 @@ export declare namespace UpdateUserRequest {
         name?: string | null;
+        dashboard?: number | null;
     }
diff --git a/src/serialization/resources/users/types/ApiTokenResponse.ts b/src/serialization/resources/users/types/ApiTokenResponse.ts
index de1758e..2111eae 100644
--- a/src/serialization/resources/users/types/ApiTokenResponse.ts
+++ b/src/serialization/resources/users/types/ApiTokenResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { ApiToken } from "./ApiToken";
 
@@ -12,3 +13,3 @@ export const ApiTokenResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.lazyObject(async () => (await import("../../..")).ApiToken),
+    data: ApiToken,
 });
@@ -17,3 +18,3 @@ export declare namespace ApiTokenResponse {
     interface Raw {
-        data: serializers.ApiToken.Raw;
+        data: ApiToken.Raw;
     }
diff --git a/src/serialization/resources/users/types/ExchangeTokenResponse.ts b/src/serialization/resources/users/types/ExchangeTokenResponse.ts
index d5842a7..49ca270 100644
--- a/src/serialization/resources/users/types/ExchangeTokenResponse.ts
+++ b/src/serialization/resources/users/types/ExchangeTokenResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { ExchangeTokenData } from "./ExchangeTokenData";
 
@@ -12,3 +13,3 @@ export const ExchangeTokenResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.lazyObject(async () => (await import("../../..")).ExchangeTokenData),
+    data: ExchangeTokenData,
 });
@@ -17,3 +18,3 @@ export declare namespace ExchangeTokenResponse {
     interface Raw {
-        data: serializers.ExchangeTokenData.Raw;
+        data: ExchangeTokenData.Raw;
     }
diff --git a/src/serialization/resources/users/types/ListApiTokensResponse.ts b/src/serialization/resources/users/types/ListApiTokensResponse.ts
index 87245dd..dff6334 100644
--- a/src/serialization/resources/users/types/ListApiTokensResponse.ts
+++ b/src/serialization/resources/users/types/ListApiTokensResponse.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Pagination } from "../../commons/types/Pagination";
+import { ApiToken } from "./ApiToken";
 
@@ -12,4 +14,4 @@ export const ListApiTokensResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    pagination: core.serialization.lazyObject(async () => (await import("../../..")).Pagination).optional(),
-    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).ApiToken)),
+    pagination: Pagination.optional(),
+    data: core.serialization.list(ApiToken),
 });
@@ -18,4 +20,4 @@ export declare namespace ListApiTokensResponse {
     interface Raw {
-        pagination?: serializers.Pagination.Raw | null;
-        data: serializers.ApiToken.Raw[];
+        pagination?: Pagination.Raw | null;
+        data: ApiToken.Raw[];
     }
diff --git a/src/serialization/resources/users/types/ListUsersResponse.ts b/src/serialization/resources/users/types/ListUsersResponse.ts
index 75b7207..957794f 100644
--- a/src/serialization/resources/users/types/ListUsersResponse.ts
+++ b/src/serialization/resources/users/types/ListUsersResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { User } from "./User";
 
@@ -12,3 +13,3 @@ export const ListUsersResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).User)),
+    data: core.serialization.list(User),
 });
@@ -17,3 +18,3 @@ export declare namespace ListUsersResponse {
     interface Raw {
-        data: serializers.User.Raw[];
+        data: User.Raw[];
     }
diff --git a/src/serialization/resources/users/types/User.ts b/src/serialization/resources/users/types/User.ts
index 26fa357..9446627 100644
--- a/src/serialization/resources/users/types/User.ts
+++ b/src/serialization/resources/users/types/User.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { UserId } from "../../commons/types/UserId";
+import { UserConfig } from "./UserConfig";
 
@@ -10,3 +12,3 @@ export const User: core.serialization.ObjectSchema<serializers.User.Raw, Flatfil
     .object({
-        id: core.serialization.lazy(async () => (await import("../../..")).UserId),
+        id: UserId,
         idp: core.serialization.string(),
@@ -16,8 +18,10 @@ export const User: core.serialization.ObjectSchema<serializers.User.Raw, Flatfil
         updatedAt: core.serialization.date(),
+        lastSeenAt: core.serialization.date().optional(),
+        dashboard: core.serialization.number().optional(),
     })
-    .extend(core.serialization.lazyObject(async () => (await import("../../..")).UserConfig));
+    .extend(UserConfig);
 
 export declare namespace User {
-    interface Raw extends serializers.UserConfig.Raw {
-        id: serializers.UserId.Raw;
+    interface Raw extends UserConfig.Raw {
+        id: UserId.Raw;
         idp: string;
@@ -27,2 +31,4 @@ export declare namespace User {
         updatedAt: string;
+        lastSeenAt?: string | null;
+        dashboard?: number | null;
     }
diff --git a/src/serialization/resources/users/types/UserConfig.ts b/src/serialization/resources/users/types/UserConfig.ts
index 551cf49..79df346 100644
--- a/src/serialization/resources/users/types/UserConfig.ts
+++ b/src/serialization/resources/users/types/UserConfig.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { AccountId } from "../../commons/types/AccountId";
 
@@ -12,3 +13,3 @@ export const UserConfig: core.serialization.ObjectSchema<serializers.UserConfig.
         name: core.serialization.string(),
-        accountId: core.serialization.lazy(async () => (await import("../../..")).AccountId),
+        accountId: AccountId,
     });
@@ -19,3 +20,3 @@ export declare namespace UserConfig {
         name: string;
-        accountId: serializers.AccountId.Raw;
+        accountId: AccountId.Raw;
     }
diff --git a/src/serialization/resources/users/types/UserCreateAndInviteRequest.ts b/src/serialization/resources/users/types/UserCreateAndInviteRequest.ts
new file mode 100644
index 0000000..47488da
--- /dev/null
+++ b/src/serialization/resources/users/types/UserCreateAndInviteRequest.ts
@@ -0,0 +1,25 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+import { AssignActorRoleRequest } from "../../roles/types/AssignActorRoleRequest";
+
+export const UserCreateAndInviteRequest: core.serialization.ObjectSchema<
+    serializers.UserCreateAndInviteRequest.Raw,
+    Flatfile.UserCreateAndInviteRequest
+> = core.serialization.object({
+    email: core.serialization.string(),
+    name: core.serialization.string(),
+    actorRoles: core.serialization.list(AssignActorRoleRequest),
+});
+
+export declare namespace UserCreateAndInviteRequest {
+    interface Raw {
+        email: string;
+        name: string;
+        actorRoles: AssignActorRoleRequest.Raw[];
+    }
+}
diff --git a/src/serialization/resources/users/types/UserResponse.ts b/src/serialization/resources/users/types/UserResponse.ts
index a954c5b..210a54a 100644
--- a/src/serialization/resources/users/types/UserResponse.ts
+++ b/src/serialization/resources/users/types/UserResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { User } from "./User";
 
@@ -10,3 +11,3 @@ export const UserResponse: core.serialization.ObjectSchema<serializers.UserRespo
     core.serialization.object({
-        data: core.serialization.lazyObject(async () => (await import("../../..")).User),
+        data: User,
     });
@@ -15,3 +16,3 @@ export declare namespace UserResponse {
     interface Raw {
-        data: serializers.User.Raw;
+        data: User.Raw;
     }
diff --git a/src/serialization/resources/users/types/UserWithRoles.ts b/src/serialization/resources/users/types/UserWithRoles.ts
new file mode 100644
index 0000000..4b3b021
--- /dev/null
+++ b/src/serialization/resources/users/types/UserWithRoles.ts
@@ -0,0 +1,22 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+import { ActorRoleResponse } from "../../roles/types/ActorRoleResponse";
+import { User } from "./User";
+
+export const UserWithRoles: core.serialization.ObjectSchema<serializers.UserWithRoles.Raw, Flatfile.UserWithRoles> =
+    core.serialization
+        .object({
+            actorRoles: core.serialization.list(ActorRoleResponse),
+        })
+        .extend(User);
+
+export declare namespace UserWithRoles {
+    interface Raw extends User.Raw {
+        actorRoles: ActorRoleResponse.Raw[];
+    }
+}
diff --git a/src/serialization/resources/users/types/UserWithRolesResponse.ts b/src/serialization/resources/users/types/UserWithRolesResponse.ts
new file mode 100644
index 0000000..b21f98c
--- /dev/null
+++ b/src/serialization/resources/users/types/UserWithRolesResponse.ts
@@ -0,0 +1,21 @@
+/**
+ * This file was auto-generated by Fern from our API Definition.
+ */
+
+import * as serializers from "../../..";
+import * as Flatfile from "../../../../api";
+import * as core from "../../../../core";
+import { UserWithRoles } from "./UserWithRoles";
+
+export const UserWithRolesResponse: core.serialization.ObjectSchema<
+    serializers.UserWithRolesResponse.Raw,
+    Flatfile.UserWithRolesResponse
+> = core.serialization.object({
+    data: UserWithRoles,
+});
+
+export declare namespace UserWithRolesResponse {
+    interface Raw {
+        data: UserWithRoles.Raw;
+    }
+}
diff --git a/src/serialization/resources/users/types/index.ts b/src/serialization/resources/users/types/index.ts
index 7bd7d69..8e29781 100644
--- a/src/serialization/resources/users/types/index.ts
+++ b/src/serialization/resources/users/types/index.ts
@@ -2,4 +2,7 @@ export * from "./ListUsersResponse";
 export * from "./UserResponse";
+export * from "./UserWithRolesResponse";
+export * from "./UserWithRoles";
 export * from "./User";
 export * from "./UserConfig";
+export * from "./UserCreateAndInviteRequest";
 export * from "./ListApiTokensResponse";
diff --git a/src/serialization/resources/versions/client/requests/VersionsPostRequestBody.ts b/src/serialization/resources/versions/client/requests/VersionsPostRequestBody.ts
index a657e9b..1af762b 100644
--- a/src/serialization/resources/versions/client/requests/VersionsPostRequestBody.ts
+++ b/src/serialization/resources/versions/client/requests/VersionsPostRequestBody.ts
@@ -7,2 +7,4 @@ import * as Flatfile from "../../../../../api";
 import * as core from "../../../../../core";
+import { SheetId } from "../../../commons/types/SheetId";
+import { VersionId } from "../../../commons/types/VersionId";
 
@@ -12,4 +14,4 @@ export const VersionsPostRequestBody: core.serialization.Schema<
 > = core.serialization.object({
-    sheetId: core.serialization.lazy(async () => (await import("../../../..")).SheetId).optional(),
-    parentVersionId: core.serialization.lazy(async () => (await import("../../../..")).VersionId).optional(),
+    sheetId: SheetId.optional(),
+    parentVersionId: VersionId.optional(),
 });
@@ -18,4 +20,4 @@ export declare namespace VersionsPostRequestBody {
     interface Raw {
-        sheetId?: serializers.SheetId.Raw | null;
-        parentVersionId?: serializers.VersionId.Raw | null;
+        sheetId?: SheetId.Raw | null;
+        parentVersionId?: VersionId.Raw | null;
     }
diff --git a/src/serialization/resources/versions/types/Version.ts b/src/serialization/resources/versions/types/Version.ts
index e604c40..2d33165 100644
--- a/src/serialization/resources/versions/types/Version.ts
+++ b/src/serialization/resources/versions/types/Version.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { VersionId } from "../../commons/types/VersionId";
 
@@ -10,3 +11,3 @@ export const Version: core.serialization.ObjectSchema<serializers.Version.Raw, F
     core.serialization.object({
-        versionId: core.serialization.lazy(async () => (await import("../../..")).VersionId),
+        versionId: VersionId,
     });
@@ -15,3 +16,3 @@ export declare namespace Version {
     interface Raw {
-        versionId: serializers.VersionId.Raw;
+        versionId: VersionId.Raw;
     }
diff --git a/src/serialization/resources/versions/types/VersionResponse.ts b/src/serialization/resources/versions/types/VersionResponse.ts
index f5c4675..ac24471 100644
--- a/src/serialization/resources/versions/types/VersionResponse.ts
+++ b/src/serialization/resources/versions/types/VersionResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Version } from "./Version";
 
@@ -12,3 +13,3 @@ export const VersionResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.lazyObject(async () => (await import("../../..")).Version),
+    data: Version,
 });
@@ -17,3 +18,3 @@ export declare namespace VersionResponse {
     interface Raw {
-        data: serializers.Version.Raw;
+        data: Version.Raw;
     }
diff --git a/src/serialization/resources/workbooks/types/CreateWorkbookConfig.ts b/src/serialization/resources/workbooks/types/CreateWorkbookConfig.ts
index 10acd18..dff62c1 100644
--- a/src/serialization/resources/workbooks/types/CreateWorkbookConfig.ts
+++ b/src/serialization/resources/workbooks/types/CreateWorkbookConfig.ts
@@ -7,2 +7,7 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { SpaceId } from "../../commons/types/SpaceId";
+import { EnvironmentId } from "../../commons/types/EnvironmentId";
+import { SheetConfig } from "../../sheets/types/SheetConfig";
+import { Action } from "../../commons/types/Action";
+import { WorkbookConfigSettings } from "./WorkbookConfigSettings";
 
@@ -14,12 +19,8 @@ export const CreateWorkbookConfig: core.serialization.ObjectSchema<
     labels: core.serialization.list(core.serialization.string()).optional(),
-    spaceId: core.serialization.lazy(async () => (await import("../../..")).SpaceId).optional(),
-    environmentId: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId).optional(),
+    spaceId: SpaceId.optional(),
+    environmentId: EnvironmentId.optional(),
     namespace: core.serialization.string().optional(),
-    sheets: core.serialization
-        .list(core.serialization.lazyObject(async () => (await import("../../..")).SheetConfig))
-        .optional(),
-    actions: core.serialization
-        .list(core.serialization.lazyObject(async () => (await import("../../..")).Action))
-        .optional(),
-    settings: core.serialization.lazyObject(async () => (await import("../../..")).WorkbookConfigSettings).optional(),
+    sheets: core.serialization.list(SheetConfig).optional(),
+    actions: core.serialization.list(Action).optional(),
+    settings: WorkbookConfigSettings.optional(),
     metadata: core.serialization.any().optional(),
@@ -31,8 +32,8 @@ export declare namespace CreateWorkbookConfig {
         labels?: string[] | null;
-        spaceId?: serializers.SpaceId.Raw | null;
-        environmentId?: serializers.EnvironmentId.Raw | null;
+        spaceId?: SpaceId.Raw | null;
+        environmentId?: EnvironmentId.Raw | null;
         namespace?: string | null;
-        sheets?: serializers.SheetConfig.Raw[] | null;
-        actions?: serializers.Action.Raw[] | null;
-        settings?: serializers.WorkbookConfigSettings.Raw | null;
+        sheets?: SheetConfig.Raw[] | null;
+        actions?: Action.Raw[] | null;
+        settings?: WorkbookConfigSettings.Raw | null;
         metadata?: any | null;
diff --git a/src/serialization/resources/workbooks/types/ListWorkbooksResponse.ts b/src/serialization/resources/workbooks/types/ListWorkbooksResponse.ts
index dc1e71d..93e5dfd 100644
--- a/src/serialization/resources/workbooks/types/ListWorkbooksResponse.ts
+++ b/src/serialization/resources/workbooks/types/ListWorkbooksResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Workbook } from "./Workbook";
 
@@ -12,3 +13,3 @@ export const ListWorkbooksResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Workbook)),
+    data: core.serialization.list(Workbook),
 });
@@ -17,3 +18,3 @@ export declare namespace ListWorkbooksResponse {
     interface Raw {
-        data: serializers.Workbook.Raw[];
+        data: Workbook.Raw[];
     }
diff --git a/src/serialization/resources/workbooks/types/Workbook.ts b/src/serialization/resources/workbooks/types/Workbook.ts
index 27fa380..1d72635 100644
--- a/src/serialization/resources/workbooks/types/Workbook.ts
+++ b/src/serialization/resources/workbooks/types/Workbook.ts
@@ -7,2 +7,8 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { WorkbookId } from "../../commons/types/WorkbookId";
+import { SpaceId } from "../../commons/types/SpaceId";
+import { EnvironmentId } from "../../commons/types/EnvironmentId";
+import { Sheet } from "../../sheets/types/Sheet";
+import { Action } from "../../commons/types/Action";
+import { WorkbookConfigSettings } from "./WorkbookConfigSettings";
 
@@ -10,16 +16,10 @@ export const Workbook: core.serialization.ObjectSchema<serializers.Workbook.Raw,
     core.serialization.object({
-        id: core.serialization.lazy(async () => (await import("../../..")).WorkbookId),
+        id: WorkbookId,
         name: core.serialization.string().optional(),
-        spaceId: core.serialization.lazy(async () => (await import("../../..")).SpaceId),
-        environmentId: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId),
-        sheets: core.serialization
-            .list(core.serialization.lazyObject(async () => (await import("../../..")).Sheet))
-            .optional(),
+        spaceId: SpaceId,
+        environmentId: EnvironmentId,
+        sheets: core.serialization.list(Sheet).optional(),
         labels: core.serialization.list(core.serialization.string()).optional(),
-        actions: core.serialization
-            .list(core.serialization.lazyObject(async () => (await import("../../..")).Action))
-            .optional(),
-        settings: core.serialization
-            .lazyObject(async () => (await import("../../..")).WorkbookConfigSettings)
-            .optional(),
+        actions: core.serialization.list(Action).optional(),
+        settings: WorkbookConfigSettings.optional(),
         metadata: core.serialization.any().optional(),
@@ -33,10 +33,10 @@ export declare namespace Workbook {
     interface Raw {
-        id: serializers.WorkbookId.Raw;
+        id: WorkbookId.Raw;
         name?: string | null;
-        spaceId: serializers.SpaceId.Raw;
-        environmentId: serializers.EnvironmentId.Raw;
-        sheets?: serializers.Sheet.Raw[] | null;
+        spaceId: SpaceId.Raw;
+        environmentId: EnvironmentId.Raw;
+        sheets?: Sheet.Raw[] | null;
         labels?: string[] | null;
-        actions?: serializers.Action.Raw[] | null;
-        settings?: serializers.WorkbookConfigSettings.Raw | null;
+        actions?: Action.Raw[] | null;
+        settings?: WorkbookConfigSettings.Raw | null;
         metadata?: any | null;
diff --git a/src/serialization/resources/workbooks/types/WorkbookResponse.ts b/src/serialization/resources/workbooks/types/WorkbookResponse.ts
index 73df47c..dbc8edb 100644
--- a/src/serialization/resources/workbooks/types/WorkbookResponse.ts
+++ b/src/serialization/resources/workbooks/types/WorkbookResponse.ts
@@ -7,2 +7,3 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { Workbook } from "./Workbook";
 
@@ -12,3 +13,3 @@ export const WorkbookResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.lazyObject(async () => (await import("../../..")).Workbook),
+    data: Workbook,
 });
@@ -17,3 +18,3 @@ export declare namespace WorkbookResponse {
     interface Raw {
-        data: serializers.Workbook.Raw;
+        data: Workbook.Raw;
     }
diff --git a/src/serialization/resources/workbooks/types/WorkbookUpdate.ts b/src/serialization/resources/workbooks/types/WorkbookUpdate.ts
index 3daf5d1..f1f9562 100644
--- a/src/serialization/resources/workbooks/types/WorkbookUpdate.ts
+++ b/src/serialization/resources/workbooks/types/WorkbookUpdate.ts
@@ -7,2 +7,6 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
+import { SpaceId } from "../../commons/types/SpaceId";
+import { EnvironmentId } from "../../commons/types/EnvironmentId";
+import { SheetConfigOrUpdate } from "../../sheets/types/SheetConfigOrUpdate";
+import { Action } from "../../commons/types/Action";
 
@@ -12,11 +16,7 @@ export const WorkbookUpdate: core.serialization.ObjectSchema<serializers.Workboo
         labels: core.serialization.list(core.serialization.string()).optional(),
-        spaceId: core.serialization.lazy(async () => (await import("../../..")).SpaceId).optional(),
-        environmentId: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId).optional(),
+        spaceId: SpaceId.optional(),
+        environmentId: EnvironmentId.optional(),
         namespace: core.serialization.string().optional(),
-        sheets: core.serialization
-            .list(core.serialization.lazyObject(async () => (await import("../../..")).SheetConfigOrUpdate))
-            .optional(),
-        actions: core.serialization
-            .list(core.serialization.lazyObject(async () => (await import("../../..")).Action))
-            .optional(),
+        sheets: core.serialization.list(SheetConfigOrUpdate).optional(),
+        actions: core.serialization.list(Action).optional(),
         metadata: core.serialization.any().optional(),
@@ -28,7 +28,7 @@ export declare namespace WorkbookUpdate {
         labels?: string[] | null;
-        spaceId?: serializers.SpaceId.Raw | null;
-        environmentId?: serializers.EnvironmentId.Raw | null;
+        spaceId?: SpaceId.Raw | null;
+        environmentId?: EnvironmentId.Raw | null;
         namespace?: string | null;
-        sheets?: serializers.SheetConfigOrUpdate.Raw[] | null;
-        actions?: serializers.Action.Raw[] | null;
+        sheets?: SheetConfigOrUpdate.Raw[] | null;
+        actions?: Action.Raw[] | null;
         metadata?: any | null;

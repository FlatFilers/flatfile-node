diff --git a/.fernignore b/.fernignore
index 7e7bea6..3cb717b 100644
--- a/.fernignore
+++ b/.fernignore
@@ -7,2 +7,3 @@ src/wrapper
 src/index.ts
+src/core/fetcher/Fetcher.ts
 
diff --git a/jest.config.js b/jest.config.js
deleted file mode 100644
index 3a09892..0000000
--- a/jest.config.js
+++ /dev/null
@@ -1,5 +0,0 @@
-/** @type {import('ts-jest').JestConfigWithTsJest} */
-module.exports = {
-    preset: "ts-jest",
-    testEnvironment: "node",
-};
\ No newline at end of file
diff --git a/package.json b/package.json
index 4363448..e4223d7 100644
--- a/package.json
+++ b/package.json
@@ -2,3 +2,3 @@
     "name": "@flatfile/api",
-    "version": "1.7.11",
+    "version": "1.7.2",
     "private": false,
@@ -10,4 +10,3 @@
         "build": "tsc",
-        "prepack": "cp -rv dist/. .",
-        "test": "jest"
+        "prepack": "cp -rv dist/. ."
     },
@@ -27,5 +26,2 @@
         "@types/node-fetch": "2.6.9",
-        "jest": "^29.7.0",
-        "@types/jest": "^29.5.5",
-        "ts-jest": "^29.1.1",
         "@types/node": "17.0.33",
diff --git a/src/Client.ts b/src/Client.ts
index cb04dd8..815eab8 100644
--- a/src/Client.ts
+++ b/src/Client.ts
@@ -6,6 +6,4 @@ import * as environments from "./environments";
 import * as core from "./core";
-import { Accounts } from "./api/resources/accounts/client/Client";
 import { Agents } from "./api/resources/agents/client/Client";
 import { Apps } from "./api/resources/apps/client/Client";
-import { Assistant } from "./api/resources/assistant/client/Client";
 import { Auth } from "./api/resources/auth/client/Client";
@@ -19,3 +17,2 @@ import { Events } from "./api/resources/events/client/Client";
 import { Files } from "./api/resources/files/client/Client";
-import { Foreigndb } from "./api/resources/foreigndb/client/Client";
 import { Guests } from "./api/resources/guests/client/Client";
@@ -49,8 +46,2 @@ export class FlatfileClient {
 
-    protected _accounts: Accounts | undefined;
-
-    public get accounts(): Accounts {
-        return (this._accounts ??= new Accounts(this._options));
-    }
-
     protected _agents: Agents | undefined;
@@ -67,8 +58,2 @@ export class FlatfileClient {
 
-    protected _assistant: Assistant | undefined;
-
-    public get assistant(): Assistant {
-        return (this._assistant ??= new Assistant(this._options));
-    }
-
     protected _auth: Auth | undefined;
@@ -127,8 +112,2 @@ export class FlatfileClient {
 
-    protected _foreigndb: Foreigndb | undefined;
-
-    public get foreigndb(): Foreigndb {
-        return (this._foreigndb ??= new Foreigndb(this._options));
-    }
-
     protected _guests: Guests | undefined;
diff --git a/src/api/resources/accounts/client/Client.ts b/src/api/resources/accounts/client/Client.ts
deleted file mode 100644
index 9ddf2d1..0000000
--- a/src/api/resources/accounts/client/Client.ts
+++ /dev/null
@@ -1,158 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as environments from "../../../../environments";
-import * as core from "../../../../core";
-import * as Flatfile from "../../..";
-import urlJoin from "url-join";
-import * as serializers from "../../../../serialization";
-import * as errors from "../../../../errors";
-
-export declare namespace Accounts {
-    interface Options {
-        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
-        token?: core.Supplier<core.BearerToken | undefined>;
-        fetcher?: core.FetchFunction;
-    }
-
-    interface RequestOptions {
-        timeoutInSeconds?: number;
-        maxRetries?: number;
-    }
-}
-
-export class Accounts {
-    constructor(protected readonly _options: Accounts.Options = {}) {}
-
-    /**
-     * Get the current account
-     *
-     * @example
-     *     await flatfile.accounts.getCurrent()
-     */
-    public async getCurrent(requestOptions?: Accounts.RequestOptions): Promise<Flatfile.AccountResponse> {
-        const _response = await (this._options.fetcher ?? core.fetcher)({
-            url: urlJoin(
-                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
-                "/accounts/current"
-            ),
-            method: "GET",
-            headers: {
-                Authorization: await this._getAuthorizationHeader(),
-            },
-            contentType: "application/json",
-            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
-            maxRetries: requestOptions?.maxRetries,
-        });
-        if (_response.ok) {
-            return await serializers.AccountResponse.parseOrThrow(_response.body, {
-                unrecognizedObjectKeys: "passthrough",
-                allowUnrecognizedUnionMembers: true,
-                allowUnrecognizedEnumValues: true,
-                skipValidation: true,
-                breadcrumbsPrefix: ["response"],
-            });
-        }
-
-        if (_response.error.reason === "status-code") {
-            throw new errors.FlatfileError({
-                statusCode: _response.error.statusCode,
-                body: _response.error.body,
-            });
-        }
-
-        switch (_response.error.reason) {
-            case "non-json":
-                throw new errors.FlatfileError({
-                    statusCode: _response.error.statusCode,
-                    body: _response.error.rawBody,
-                });
-            case "timeout":
-                throw new errors.FlatfileTimeoutError();
-            case "unknown":
-                throw new errors.FlatfileError({
-                    message: _response.error.errorMessage,
-                });
-        }
-    }
-
-    /**
-     * Update the current account
-     *
-     * @example
-     *     await flatfile.accounts.updateCurrent({
-     *         defaultAppId: "us_app_YOUR_ID"
-     *     })
-     */
-    public async updateCurrent(
-        request: Flatfile.AccountPatch,
-        requestOptions?: Accounts.RequestOptions
-    ): Promise<Flatfile.AccountResponse> {
-        const _response = await (this._options.fetcher ?? core.fetcher)({
-            url: urlJoin(
-                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
-                "/accounts/current"
-            ),
-            method: "PATCH",
-            headers: {
-                Authorization: await this._getAuthorizationHeader(),
-            },
-            contentType: "application/json",
-            body: await serializers.AccountPatch.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
-            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
-            maxRetries: requestOptions?.maxRetries,
-        });
-        if (_response.ok) {
-            return await serializers.AccountResponse.parseOrThrow(_response.body, {
-                unrecognizedObjectKeys: "passthrough",
-                allowUnrecognizedUnionMembers: true,
-                allowUnrecognizedEnumValues: true,
-                skipValidation: true,
-                breadcrumbsPrefix: ["response"],
-            });
-        }
-
-        if (_response.error.reason === "status-code") {
-            throw new errors.FlatfileError({
-                statusCode: _response.error.statusCode,
-                body: _response.error.body,
-            });
-        }
-
-        switch (_response.error.reason) {
-            case "non-json":
-                throw new errors.FlatfileError({
-                    statusCode: _response.error.statusCode,
-                    body: _response.error.rawBody,
-                });
-            case "timeout":
-                throw new errors.FlatfileTimeoutError();
-            case "unknown":
-                throw new errors.FlatfileError({
-                    message: _response.error.errorMessage,
-                });
-        }
-    }
-
-    protected async _getAuthorizationHeader() {
-        const bearer = await core.Supplier.get(this._options.token);
-        if (bearer != null) {
-            return `Bearer ${bearer}`;
-        }
-
-        return undefined;
-    }
-}
diff --git a/src/api/resources/accounts/client/index.ts b/src/api/resources/accounts/client/index.ts
deleted file mode 100644
index cb0ff5c..0000000
--- a/src/api/resources/accounts/client/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export {};
diff --git a/src/api/resources/accounts/index.ts b/src/api/resources/accounts/index.ts
deleted file mode 100644
index c9240f8..0000000
--- a/src/api/resources/accounts/index.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-export * from "./types";
-export * from "./client";
diff --git a/src/api/resources/accounts/types/Account.ts b/src/api/resources/accounts/types/Account.ts
deleted file mode 100644
index abc5431..0000000
--- a/src/api/resources/accounts/types/Account.ts
+++ /dev/null
@@ -1,32 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as Flatfile from "../../..";
-
-/**
- * An account
- *
- * @example
- *     {
- *         id: "us_acc_YOUR_ID",
- *         name: "MyAccountName",
- *         metadata: {},
- *         createdAt: new Date("2023-10-30T16:59:45.735Z"),
- *         updatedAt: new Date("2023-10-30T16:59:45.735Z")
- *     }
- */
-export interface Account {
-    id: Flatfile.AccountId;
-    name: string;
-    subdomain?: string;
-    vanityDomainDashboard?: string;
-    vanityDomainSpaces?: string;
-    embeddedDomainWhitelist?: string[];
-    customFromEmail?: string;
-    stripeCustomerId?: string;
-    metadata: Record<string, any>;
-    createdAt: Date;
-    updatedAt: Date;
-    defaultAppId?: Flatfile.AppId;
-}
diff --git a/src/api/resources/accounts/types/AccountPatch.ts b/src/api/resources/accounts/types/AccountPatch.ts
deleted file mode 100644
index 870403b..0000000
--- a/src/api/resources/accounts/types/AccountPatch.ts
+++ /dev/null
@@ -1,17 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as Flatfile from "../../..";
-
-/**
- * Properties used to update an account
- *
- * @example
- *     {
- *         defaultAppId: "us_app_YOUR_ID"
- *     }
- */
-export interface AccountPatch {
-    defaultAppId: Flatfile.AppId;
-}
diff --git a/src/api/resources/accounts/types/AccountResponse.ts b/src/api/resources/accounts/types/AccountResponse.ts
deleted file mode 100644
index c8afe37..0000000
--- a/src/api/resources/accounts/types/AccountResponse.ts
+++ /dev/null
@@ -1,21 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as Flatfile from "../../..";
-
-/**
- * @example
- *     {
- *         data: {
- *             id: "us_acc_YOUR_ID",
- *             name: "MyAccountName",
- *             metadata: {},
- *             createdAt: new Date("2023-10-30T16:59:45.735Z"),
- *             updatedAt: new Date("2023-10-30T16:59:45.735Z")
- *         }
- *     }
- */
-export interface AccountResponse {
-    data: Flatfile.Account;
-}
diff --git a/src/api/resources/accounts/types/index.ts b/src/api/resources/accounts/types/index.ts
deleted file mode 100644
index 0f9ca2c..0000000
--- a/src/api/resources/accounts/types/index.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-export * from "./AccountResponse";
-export * from "./Account";
-export * from "./AccountPatch";
diff --git a/src/api/resources/agents/client/Client.ts b/src/api/resources/agents/client/Client.ts
index 6f4f2cd..f257d07 100644
--- a/src/api/resources/agents/client/Client.ts
+++ b/src/api/resources/agents/client/Client.ts
@@ -32,3 +32,3 @@ export class Agents {
         const { environmentId } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         _queryParams["environmentId"] = environmentId;
@@ -45,5 +45,3 @@ export class Agents {
             },
@@ -114,3 +112,3 @@ export class Agents {
         const { environmentId, body: _body } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         _queryParams["environmentId"] = environmentId;
@@ -127,5 +125,3 @@ export class Agents {
             },
@@ -197,3 +193,3 @@ export class Agents {
         const { environmentId } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         _queryParams["environmentId"] = environmentId;
@@ -210,5 +206,3 @@ export class Agents {
             },
@@ -295,5 +289,3 @@ export class Agents {
             },
@@ -390,5 +382,3 @@ export class Agents {
             },
@@ -488,5 +478,3 @@ export class Agents {
             },
@@ -576,3 +564,3 @@ export class Agents {
         const { environmentId } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         _queryParams["environmentId"] = environmentId;
@@ -589,5 +577,3 @@ export class Agents {
             },
@@ -668,3 +654,3 @@ export class Agents {
         const { environmentId } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         _queryParams["environmentId"] = environmentId;
@@ -681,5 +667,3 @@ export class Agents {
             },
@@ -763,3 +747,3 @@ export class Agents {
         const { environmentId, spaceId, success, pageSize, pageNumber } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         _queryParams["environmentId"] = environmentId;
@@ -792,5 +776,3 @@ export class Agents {
             },
@@ -874,3 +856,3 @@ export class Agents {
         const { environmentId, spaceId, success, pageSize, pageNumber } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         _queryParams["environmentId"] = environmentId;
@@ -903,5 +885,3 @@ export class Agents {
             },
@@ -983,3 +963,3 @@ export class Agents {
         const { environmentId } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         _queryParams["environmentId"] = environmentId;
@@ -996,5 +976,3 @@ export class Agents {
             },
diff --git a/src/api/resources/agents/types/Agent.ts b/src/api/resources/agents/types/Agent.ts
index f33bf8f..b360695 100644
--- a/src/api/resources/agents/types/Agent.ts
+++ b/src/api/resources/agents/types/Agent.ts
@@ -12,4 +12,3 @@ import * as Flatfile from "../../..";
  *         compiler: Flatfile.Compiler.Js,
- *         source: "module.exports = { routeEvent: async (...args) => { console.log(args) } }",
- *         slug: "default"
+ *         source: "module.exports = { routeEvent: async (...args) => { console.log(args) } }"
  *     }
diff --git a/src/api/resources/agents/types/AgentConfig.ts b/src/api/resources/agents/types/AgentConfig.ts
index 7599efd..1012f6e 100644
--- a/src/api/resources/agents/types/AgentConfig.ts
+++ b/src/api/resources/agents/types/AgentConfig.ts
@@ -23,4 +23,2 @@ export interface AgentConfig {
     source?: string;
-    /** The slug of the agent */
-    slug?: string;
 }
diff --git a/src/api/resources/agents/types/AgentResponse.ts b/src/api/resources/agents/types/AgentResponse.ts
index ccb15b5..3e7ee60 100644
--- a/src/api/resources/agents/types/AgentResponse.ts
+++ b/src/api/resources/agents/types/AgentResponse.ts
@@ -13,4 +13,3 @@ import * as Flatfile from "../../..";
  *             compiler: Flatfile.Compiler.Js,
- *             source: "module.exports = { routeEvent: async (...args) => { console.log(args) } }",
- *             slug: "default"
+ *             source: "module.exports = { routeEvent: async (...args) => { console.log(args) } }"
  *         }
diff --git a/src/api/resources/agents/types/ListAgentsResponse.ts b/src/api/resources/agents/types/ListAgentsResponse.ts
index 2cf0c7d..f96e094 100644
--- a/src/api/resources/agents/types/ListAgentsResponse.ts
+++ b/src/api/resources/agents/types/ListAgentsResponse.ts
@@ -13,4 +13,3 @@ import * as Flatfile from "../../..";
  *                 compiler: Flatfile.Compiler.Js,
- *                 source: "module.exports = { routeEvent: async (...args) => { console.log(args) } }",
- *                 slug: "default"
+ *                 source: "module.exports = { routeEvent: async (...args) => { console.log(args) } }"
  *             }]
diff --git a/src/api/resources/apps/client/Client.ts b/src/api/resources/apps/client/Client.ts
index d74f406..a1cfe70 100644
--- a/src/api/resources/apps/client/Client.ts
+++ b/src/api/resources/apps/client/Client.ts
@@ -42,5 +42,3 @@ export class Apps {
             },
@@ -100,5 +98,3 @@ export class Apps {
             },
@@ -171,5 +167,3 @@ export class Apps {
             },
@@ -243,5 +237,3 @@ export class Apps {
             },
diff --git a/src/api/resources/apps/types/App.ts b/src/api/resources/apps/types/App.ts
index 9d3909e..2cc545b 100644
--- a/src/api/resources/apps/types/App.ts
+++ b/src/api/resources/apps/types/App.ts
@@ -21,13 +21,6 @@ import * as Flatfile from "../../..";
  *         },
- *         environmentFilters: {
- *             "type": [
- *                 "PROD",
- *                 "DEV"
- *             ],
- *             "exclude_ids": [
- *                 "us_env_123456"
- *             ]
- *         },
  *         createdAt: new Date("2023-10-30T16:59:45.735Z"),
- *         updatedAt: new Date("2023-10-30T16:59:45.735Z")
+ *         updatedAt: new Date("2023-10-30T16:59:45.735Z"),
+ *         deletedAt: undefined,
+ *         activatedAt: undefined
  *     }
@@ -43,3 +36,2 @@ export interface App {
     metadata?: any;
-    environmentFilters?: any;
     createdAt: Date;
diff --git a/src/api/resources/apps/types/AppCreate.ts b/src/api/resources/apps/types/AppCreate.ts
index 3ecbf37..b04a843 100644
--- a/src/api/resources/apps/types/AppCreate.ts
+++ b/src/api/resources/apps/types/AppCreate.ts
@@ -30,3 +30,2 @@ export interface AppCreate {
     metadata?: any;
-    environmentFilters?: any;
 }
diff --git a/src/api/resources/apps/types/AppPatch.ts b/src/api/resources/apps/types/AppPatch.ts
index 2d9f71f..8ee7606 100644
--- a/src/api/resources/apps/types/AppPatch.ts
+++ b/src/api/resources/apps/types/AppPatch.ts
@@ -26,3 +26,2 @@ export interface AppPatch {
     metadata?: any;
-    environmentFilters?: any;
     activatedAt?: Date;
diff --git a/src/api/resources/apps/types/AppResponse.ts b/src/api/resources/apps/types/AppResponse.ts
index 6618c44..9e7f8a6 100644
--- a/src/api/resources/apps/types/AppResponse.ts
+++ b/src/api/resources/apps/types/AppResponse.ts
@@ -20,13 +20,6 @@ import * as Flatfile from "../../..";
  *             },
- *             environmentFilters: {
- *                 "type": [
- *                     "PROD",
- *                     "DEV"
- *                 ],
- *                 "exclude_ids": [
- *                     "us_env_123456"
- *                 ]
- *             },
  *             createdAt: new Date("2023-10-30T16:59:45.735Z"),
- *             updatedAt: new Date("2023-10-30T16:59:45.735Z")
+ *             updatedAt: new Date("2023-10-30T16:59:45.735Z"),
+ *             deletedAt: undefined,
+ *             activatedAt: undefined
  *         }
diff --git a/src/api/resources/apps/types/AppsResponse.ts b/src/api/resources/apps/types/AppsResponse.ts
index 7f1337e..074c27e 100644
--- a/src/api/resources/apps/types/AppsResponse.ts
+++ b/src/api/resources/apps/types/AppsResponse.ts
@@ -20,13 +20,6 @@ import * as Flatfile from "../../..";
  *                 },
- *                 environmentFilters: {
- *                     "type": [
- *                         "PROD",
- *                         "DEV"
- *                     ],
- *                     "exclude_ids": [
- *                         "us_env_123456"
- *                     ]
- *                 },
  *                 createdAt: new Date("2023-10-30T16:59:45.735Z"),
- *                 updatedAt: new Date("2023-10-30T16:59:45.735Z")
+ *                 updatedAt: new Date("2023-10-30T16:59:45.735Z"),
+ *                 deletedAt: undefined,
+ *                 activatedAt: undefined
  *             }]
diff --git a/src/api/resources/assistant/client/Client.ts b/src/api/resources/assistant/client/Client.ts
deleted file mode 100644
index f45e7d6..0000000
--- a/src/api/resources/assistant/client/Client.ts
+++ /dev/null
@@ -1,359 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as environments from "../../../../environments";
-import * as core from "../../../../core";
-import * as Flatfile from "../../..";
-import urlJoin from "url-join";
-import * as serializers from "../../../../serialization";
-import * as errors from "../../../../errors";
-
-export declare namespace Assistant {
-    interface Options {
-        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
-        token?: core.Supplier<core.BearerToken | undefined>;
-        fetcher?: core.FetchFunction;
-    }
-
-    interface RequestOptions {
-        timeoutInSeconds?: number;
-        maxRetries?: number;
-    }
-}
-
-export class Assistant {
-    constructor(protected readonly _options: Assistant.Options = {}) {}
-
-    /**
-     * Returns prompts created by user
-     *
-     * @example
-     *     await flatfile.assistant.list()
-     */
-    public async list(
-        request: Flatfile.ListPromptsRequest = {},
-        requestOptions?: Assistant.RequestOptions
-    ): Promise<Flatfile.PromptsResponse> {
-        const { pageSize, pageNumber } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
-        if (pageSize != null) {
-            _queryParams["pageSize"] = pageSize.toString();
-        }
-
-        if (pageNumber != null) {
-            _queryParams["pageNumber"] = pageNumber.toString();
-        }
-
-        const _response = await (this._options.fetcher ?? core.fetcher)({
-            url: urlJoin(
-                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
-                "/prompts"
-            ),
-            method: "GET",
-            headers: {
-                Authorization: await this._getAuthorizationHeader(),
-            },
-            contentType: "application/json",
-            queryParameters: _queryParams,
-            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
-            maxRetries: requestOptions?.maxRetries,
-        });
-        if (_response.ok) {
-            return await serializers.PromptsResponse.parseOrThrow(_response.body, {
-                unrecognizedObjectKeys: "passthrough",
-                allowUnrecognizedUnionMembers: true,
-                allowUnrecognizedEnumValues: true,
-                skipValidation: true,
-                breadcrumbsPrefix: ["response"],
-            });
-        }
-
-        if (_response.error.reason === "status-code") {
-            throw new errors.FlatfileError({
-                statusCode: _response.error.statusCode,
-                body: _response.error.body,
-            });
-        }
-
-        switch (_response.error.reason) {
-            case "non-json":
-                throw new errors.FlatfileError({
-                    statusCode: _response.error.statusCode,
-                    body: _response.error.rawBody,
-                });
-            case "timeout":
-                throw new errors.FlatfileTimeoutError();
-            case "unknown":
-                throw new errors.FlatfileError({
-                    message: _response.error.errorMessage,
-                });
-        }
-    }
-
-    /**
-     * Returns a prompt
-     *
-     * @example
-     *     await flatfile.assistant.get("us_pr_YOUR_ID")
-     */
-    public async get(
-        promptId: Flatfile.PromptId,
-        requestOptions?: Assistant.RequestOptions
-    ): Promise<Flatfile.PromptResponse> {
-        const _response = await (this._options.fetcher ?? core.fetcher)({
-            url: urlJoin(
-                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
-                `/prompts/${await serializers.PromptId.jsonOrThrow(promptId)}`
-            ),
-            method: "GET",
-            headers: {
-                Authorization: await this._getAuthorizationHeader(),
-            },
-            contentType: "application/json",
-            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
-            maxRetries: requestOptions?.maxRetries,
-        });
-        if (_response.ok) {
-            return await serializers.PromptResponse.parseOrThrow(_response.body, {
-                unrecognizedObjectKeys: "passthrough",
-                allowUnrecognizedUnionMembers: true,
-                allowUnrecognizedEnumValues: true,
-                skipValidation: true,
-                breadcrumbsPrefix: ["response"],
-            });
-        }
-
-        if (_response.error.reason === "status-code") {
-            throw new errors.FlatfileError({
-                statusCode: _response.error.statusCode,
-                body: _response.error.body,
-            });
-        }
-
-        switch (_response.error.reason) {
-            case "non-json":
-                throw new errors.FlatfileError({
-                    statusCode: _response.error.statusCode,
-                    body: _response.error.rawBody,
-                });
-            case "timeout":
-                throw new errors.FlatfileTimeoutError();
-            case "unknown":
-                throw new errors.FlatfileError({
-                    message: _response.error.errorMessage,
-                });
-        }
-    }
-
-    /**
-     * Updates a prompt
-     *
-     * @example
-     *     await flatfile.assistant.update("us_pr_YOUR_ID", {
-     *         prompt: "Combine first name and last name into a new column called Full Name"
-     *     })
-     */
-    public async update(
-        promptId: Flatfile.PromptId,
-        request: Flatfile.PromptPatch,
-        requestOptions?: Assistant.RequestOptions
-    ): Promise<Flatfile.PromptResponse> {
-        const _response = await (this._options.fetcher ?? core.fetcher)({
-            url: urlJoin(
-                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
-                `/prompts/${await serializers.PromptId.jsonOrThrow(promptId)}`
-            ),
-            method: "PATCH",
-            headers: {
-                Authorization: await this._getAuthorizationHeader(),
-            },
-            contentType: "application/json",
-            body: await serializers.PromptPatch.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
-            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
-            maxRetries: requestOptions?.maxRetries,
-        });
-        if (_response.ok) {
-            return await serializers.PromptResponse.parseOrThrow(_response.body, {
-                unrecognizedObjectKeys: "passthrough",
-                allowUnrecognizedUnionMembers: true,
-                allowUnrecognizedEnumValues: true,
-                skipValidation: true,
-                breadcrumbsPrefix: ["response"],
-            });
-        }
-
-        if (_response.error.reason === "status-code") {
-            throw new errors.FlatfileError({
-                statusCode: _response.error.statusCode,
-                body: _response.error.body,
-            });
-        }
-
-        switch (_response.error.reason) {
-            case "non-json":
-                throw new errors.FlatfileError({
-                    statusCode: _response.error.statusCode,
-                    body: _response.error.rawBody,
-                });
-            case "timeout":
-                throw new errors.FlatfileTimeoutError();
-            case "unknown":
-                throw new errors.FlatfileError({
-                    message: _response.error.errorMessage,
-                });
-        }
-    }
-
-    /**
-     * Creates a prompt
-     *
-     * @example
-     *     await flatfile.assistant.create({
-     *         prompt: "Combine first name and last name into a new column called Full Name"
-     *     })
-     */
-    public async create(
-        request: Flatfile.PromptCreate,
-        requestOptions?: Assistant.RequestOptions
-    ): Promise<Flatfile.PromptResponse> {
-        const _response = await (this._options.fetcher ?? core.fetcher)({
-            url: urlJoin(
-                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
-                "/prompts"
-            ),
-            method: "POST",
-            headers: {
-                Authorization: await this._getAuthorizationHeader(),
-            },
-            contentType: "application/json",
-            body: await serializers.PromptCreate.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
-            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
-            maxRetries: requestOptions?.maxRetries,
-        });
-        if (_response.ok) {
-            return await serializers.PromptResponse.parseOrThrow(_response.body, {
-                unrecognizedObjectKeys: "passthrough",
-                allowUnrecognizedUnionMembers: true,
-                allowUnrecognizedEnumValues: true,
-                skipValidation: true,
-                breadcrumbsPrefix: ["response"],
-            });
-        }
-
-        if (_response.error.reason === "status-code") {
-            throw new errors.FlatfileError({
-                statusCode: _response.error.statusCode,
-                body: _response.error.body,
-            });
-        }
-
-        switch (_response.error.reason) {
-            case "non-json":
-                throw new errors.FlatfileError({
-                    statusCode: _response.error.statusCode,
-                    body: _response.error.rawBody,
-                });
-            case "timeout":
-                throw new errors.FlatfileTimeoutError();
-            case "unknown":
-                throw new errors.FlatfileError({
-                    message: _response.error.errorMessage,
-                });
-        }
-    }
-
-    /**
-     * Deletes a prompts
-     *
-     * @example
-     *     await flatfile.assistant.delete("us_pr_YOUR_ID")
-     */
-    public async delete(
-        promptId: Flatfile.PromptId,
-        requestOptions?: Assistant.RequestOptions
-    ): Promise<Flatfile.Success> {
-        const _response = await (this._options.fetcher ?? core.fetcher)({
-            url: urlJoin(
-                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
-                `/prompts/${await serializers.PromptId.jsonOrThrow(promptId)}`
-            ),
-            method: "DELETE",
-            headers: {
-                Authorization: await this._getAuthorizationHeader(),
-            },
-            contentType: "application/json",
-            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
-            maxRetries: requestOptions?.maxRetries,
-        });
-        if (_response.ok) {
-            return await serializers.Success.parseOrThrow(_response.body, {
-                unrecognizedObjectKeys: "passthrough",
-                allowUnrecognizedUnionMembers: true,
-                allowUnrecognizedEnumValues: true,
-                skipValidation: true,
-                breadcrumbsPrefix: ["response"],
-            });
-        }
-
-        if (_response.error.reason === "status-code") {
-            throw new errors.FlatfileError({
-                statusCode: _response.error.statusCode,
-                body: _response.error.body,
-            });
-        }
-
-        switch (_response.error.reason) {
-            case "non-json":
-                throw new errors.FlatfileError({
-                    statusCode: _response.error.statusCode,
-                    body: _response.error.rawBody,
-                });
-            case "timeout":
-                throw new errors.FlatfileTimeoutError();
-            case "unknown":
-                throw new errors.FlatfileError({
-                    message: _response.error.errorMessage,
-                });
-        }
-    }
-
-    protected async _getAuthorizationHeader() {
-        const bearer = await core.Supplier.get(this._options.token);
-        if (bearer != null) {
-            return `Bearer ${bearer}`;
-        }
-
-        return undefined;
-    }
-}
diff --git a/src/api/resources/assistant/client/index.ts b/src/api/resources/assistant/client/index.ts
deleted file mode 100644
index 415726b..0000000
--- a/src/api/resources/assistant/client/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export * from "./requests";
diff --git a/src/api/resources/assistant/client/requests/ListPromptsRequest.ts b/src/api/resources/assistant/client/requests/ListPromptsRequest.ts
deleted file mode 100644
index f93af5d..0000000
--- a/src/api/resources/assistant/client/requests/ListPromptsRequest.ts
+++ /dev/null
@@ -1,18 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-/**
- * @example
- *     {}
- */
-export interface ListPromptsRequest {
-    /**
-     * Number of prompts to return in a page (default 7)
-     */
-    pageSize?: number;
-    /**
-     * Based on pageSize, which page of prompts to return
-     */
-    pageNumber?: number;
-}
diff --git a/src/api/resources/assistant/client/requests/index.ts b/src/api/resources/assistant/client/requests/index.ts
deleted file mode 100644
index 78a6d76..0000000
--- a/src/api/resources/assistant/client/requests/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export { ListPromptsRequest } from "./ListPromptsRequest";
diff --git a/src/api/resources/assistant/index.ts b/src/api/resources/assistant/index.ts
deleted file mode 100644
index c9240f8..0000000
--- a/src/api/resources/assistant/index.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-export * from "./types";
-export * from "./client";
diff --git a/src/api/resources/assistant/types/Prompt.ts b/src/api/resources/assistant/types/Prompt.ts
deleted file mode 100644
index a8702cb..0000000
--- a/src/api/resources/assistant/types/Prompt.ts
+++ /dev/null
@@ -1,28 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as Flatfile from "../../..";
-
-/**
- * @example
- *     {
- *         id: "us_pr_YOUR_ID",
- *         createdById: "us_usr_YOUR_ID",
- *         accountId: "us_acc_YOUR_ID",
- *         prompt: "Combine first name and last name into a new column called Full Name",
- *         createdAt: new Date("2021-01-01T00:00:00.000Z"),
- *         updatedAt: new Date("2021-01-01T00:00:00.000Z")
- *     }
- */
-export interface Prompt {
-    id: Flatfile.PromptId;
-    /** ID of the user/guest who created the prompt */
-    createdById: string;
-    accountId: Flatfile.AccountId;
-    /** Text for prompts for AI Assist */
-    prompt: string;
-    createdAt: Date;
-    updatedAt: Date;
-    deletedAt?: Date;
-}
diff --git a/src/api/resources/assistant/types/PromptCreate.ts b/src/api/resources/assistant/types/PromptCreate.ts
deleted file mode 100644
index e9d20e6..0000000
--- a/src/api/resources/assistant/types/PromptCreate.ts
+++ /dev/null
@@ -1,15 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-/**
- * Create a prompts
- *
- * @example
- *     {
- *         prompt: "Combine first name and last name into a new column called Full Name"
- *     }
- */
-export interface PromptCreate {
-    prompt: string;
-}
diff --git a/src/api/resources/assistant/types/PromptPatch.ts b/src/api/resources/assistant/types/PromptPatch.ts
deleted file mode 100644
index d1718fc..0000000
--- a/src/api/resources/assistant/types/PromptPatch.ts
+++ /dev/null
@@ -1,15 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-/**
- * Update a prompts
- *
- * @example
- *     {
- *         prompt: "Combine first name and last name into a new column called Full Name"
- *     }
- */
-export interface PromptPatch {
-    prompt?: string;
-}
diff --git a/src/api/resources/assistant/types/PromptResponse.ts b/src/api/resources/assistant/types/PromptResponse.ts
deleted file mode 100644
index c6bdca6..0000000
--- a/src/api/resources/assistant/types/PromptResponse.ts
+++ /dev/null
@@ -1,22 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as Flatfile from "../../..";
-
-/**
- * @example
- *     {
- *         data: {
- *             id: "us_pr_YOUR_ID",
- *             createdById: "us_usr_YOUR_ID",
- *             accountId: "us_acc_YOUR_ID",
- *             prompt: "Combine first name and last name into a new column called Full Name",
- *             createdAt: new Date("2021-01-01T00:00:00.000Z"),
- *             updatedAt: new Date("2021-01-01T00:00:00.000Z")
- *         }
- *     }
- */
-export interface PromptResponse {
-    data: Flatfile.Prompt;
-}
diff --git a/src/api/resources/assistant/types/PromptsResponse.ts b/src/api/resources/assistant/types/PromptsResponse.ts
deleted file mode 100644
index 3b59dd1..0000000
--- a/src/api/resources/assistant/types/PromptsResponse.ts
+++ /dev/null
@@ -1,28 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as Flatfile from "../../..";
-
-/**
- * @example
- *     {
- *         data: [{
- *                 id: "us_pr_YOUR_ID",
- *                 createdById: "us_usr_YOUR_ID",
- *                 accountId: "us_acc_YOUR_ID",
- *                 prompt: "Combine first name and last name into a new column called Full Name",
- *                 createdAt: new Date("2021-01-01T00:00:00.000Z"),
- *                 updatedAt: new Date("2021-01-01T00:00:00.000Z")
- *             }],
- *         pagination: {
- *             currentPage: 3,
- *             pageCount: 50,
- *             totalCount: 100
- *         }
- *     }
- */
-export interface PromptsResponse {
-    pagination?: Flatfile.Pagination;
-    data: Flatfile.Prompt[];
-}
diff --git a/src/api/resources/assistant/types/index.ts b/src/api/resources/assistant/types/index.ts
deleted file mode 100644
index d296f59..0000000
--- a/src/api/resources/assistant/types/index.ts
+++ /dev/null
@@ -1,5 +0,0 @@
-export * from "./PromptsResponse";
-export * from "./PromptResponse";
-export * from "./PromptPatch";
-export * from "./PromptCreate";
-export * from "./Prompt";
diff --git a/src/api/resources/auth/client/Client.ts b/src/api/resources/auth/client/Client.ts
index b5537ef..d893556 100644
--- a/src/api/resources/auth/client/Client.ts
+++ b/src/api/resources/auth/client/Client.ts
@@ -54,5 +54,3 @@ export class Auth {
             },
@@ -132,3 +130,3 @@ export class Auth {
         const { environmentId } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         _queryParams["environmentId"] = environmentId;
@@ -145,5 +143,3 @@ export class Auth {
             },
@@ -224,3 +220,3 @@ export class Auth {
         const { environmentId, type: type_ } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         _queryParams["environmentId"] = environmentId;
@@ -238,5 +234,3 @@ export class Auth {
             },
@@ -317,3 +311,3 @@ export class Auth {
         const { environmentId, key } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         _queryParams["environmentId"] = environmentId;
@@ -331,5 +325,3 @@ export class Auth {
             },
diff --git a/src/api/resources/cells/client/Client.ts b/src/api/resources/cells/client/Client.ts
index f12f921..76de1b3 100644
--- a/src/api/resources/cells/client/Client.ts
+++ b/src/api/resources/cells/client/Client.ts
@@ -55,3 +55,3 @@ export class Cells {
         } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         if (fieldKey != null) {
@@ -107,5 +107,3 @@ export class Cells {
             },
diff --git a/src/api/resources/commits/client/Client.ts b/src/api/resources/commits/client/Client.ts
index af39943..11191ab 100644
--- a/src/api/resources/commits/client/Client.ts
+++ b/src/api/resources/commits/client/Client.ts
@@ -50,5 +50,3 @@ export class Commits {
             },
@@ -133,5 +131,3 @@ export class Commits {
             },
@@ -216,5 +212,3 @@ export class Commits {
             },
diff --git a/src/api/resources/commons/types/Action.ts b/src/api/resources/commons/types/Action.ts
index b853dae..d3c651d 100644
--- a/src/api/resources/commons/types/Action.ts
+++ b/src/api/resources/commons/types/Action.ts
@@ -26,3 +26,6 @@ import * as Flatfile from "../../..";
 export interface Action {
-    /** **This is deprecated. Use `operation` instead.** */
+    /**
+     * **This is deprecated. Use `operation` instead.**
+     *
+     */
     slug?: string;
@@ -37,3 +40,6 @@ export interface Action {
     messages?: Flatfile.ActionMessage[];
-    /** **This is deprecated.** */
+    /**
+     * **This is deprecated.**
+     *
+     */
     type?: string;
@@ -49,5 +55,11 @@ export interface Action {
     icon?: string;
-    /** **This is deprecated. Use `constraints` instead.** */
+    /**
+     * **This is deprecated. Use `constraints` instead.**
+     *
+     */
     requireAllValid?: boolean;
-    /** **This is deprecated. Use `constraints` instead.** */
+    /**
+     * **This is deprecated. Use `constraints` instead.**
+     *
+     */
     requireSelection?: boolean;
diff --git a/src/api/resources/commons/types/ActionMessageType.ts b/src/api/resources/commons/types/ActionMessageType.ts
index 17cafd6..9af6b66 100644
--- a/src/api/resources/commons/types/ActionMessageType.ts
+++ b/src/api/resources/commons/types/ActionMessageType.ts
@@ -4,6 +4,8 @@
 
-export type ActionMessageType = "error" | "info";
+export type ActionMessageType = "success" | "error" | "warning" | "info";
 
 export const ActionMessageType = {
+    Success: "success",
     Error: "error",
+    Warning: "warning",
     Info: "info",
diff --git a/src/api/resources/commons/types/PromptId.ts b/src/api/resources/commons/types/PromptId.ts
deleted file mode 100644
index 03a6eb6..0000000
--- a/src/api/resources/commons/types/PromptId.ts
+++ /dev/null
@@ -1,11 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-/**
- * Prompt ID
- *
- * @example
- *     "us_pr_YOUR_ID"
- */
-export type PromptId = string;
diff --git a/src/api/resources/commons/types/index.ts b/src/api/resources/commons/types/index.ts
index baa887d..d92ca92 100644
--- a/src/api/resources/commons/types/index.ts
+++ b/src/api/resources/commons/types/index.ts
@@ -24,3 +24,2 @@ export * from "./ProgramId";
 export * from "./FamilyId";
-export * from "./PromptId";
 export * from "./DataRetentionPolicyId";
diff --git a/src/api/resources/dataRetentionPolicies/client/Client.ts b/src/api/resources/dataRetentionPolicies/client/Client.ts
index 19ff211..b4ec5c3 100644
--- a/src/api/resources/dataRetentionPolicies/client/Client.ts
+++ b/src/api/resources/dataRetentionPolicies/client/Client.ts
@@ -42,3 +42,3 @@ export class DataRetentionPolicies {
         const { environmentId } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         if (environmentId != null) {
@@ -58,5 +58,3 @@ export class DataRetentionPolicies {
             },
@@ -149,5 +147,3 @@ export class DataRetentionPolicies {
             },
@@ -236,5 +232,3 @@ export class DataRetentionPolicies {
             },
@@ -327,5 +321,3 @@ export class DataRetentionPolicies {
             },
@@ -411,5 +403,3 @@ export class DataRetentionPolicies {
             },
diff --git a/src/api/resources/documents/client/Client.ts b/src/api/resources/documents/client/Client.ts
index 9f8859f..ee19ffc 100644
--- a/src/api/resources/documents/client/Client.ts
+++ b/src/api/resources/documents/client/Client.ts
@@ -50,5 +50,3 @@ export class Documents {
             },
@@ -147,5 +145,3 @@ export class Documents {
             },
@@ -237,5 +233,3 @@ export class Documents {
             },
@@ -330,5 +324,3 @@ export class Documents {
             },
@@ -417,5 +409,3 @@ export class Documents {
             },
diff --git a/src/api/resources/entitlements/client/Client.ts b/src/api/resources/entitlements/client/Client.ts
index 7e392f8..009ccce 100644
--- a/src/api/resources/entitlements/client/Client.ts
+++ b/src/api/resources/entitlements/client/Client.ts
@@ -42,3 +42,3 @@ export class Entitlements {
         const { resourceId } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         _queryParams["resourceId"] = resourceId;
@@ -55,5 +55,3 @@ export class Entitlements {
             },
diff --git a/src/api/resources/environments/client/Client.ts b/src/api/resources/environments/client/Client.ts
index 9c2cd5b..3293119 100644
--- a/src/api/resources/environments/client/Client.ts
+++ b/src/api/resources/environments/client/Client.ts
@@ -31,3 +31,3 @@ export class Environments {
      * @example
-     *     await flatfile.environments.list()
+     *     await flatfile.environments.list({})
      */
@@ -38,3 +38,3 @@ export class Environments {
         const { pageSize, pageNumber } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         if (pageSize != null) {
@@ -58,5 +58,3 @@ export class Environments {
             },
@@ -128,5 +126,3 @@ export class Environments {
             },
@@ -184,3 +180,3 @@ export class Environments {
         const { environmentId } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         _queryParams["environmentId"] = environmentId;
@@ -197,5 +193,3 @@ export class Environments {
             },
@@ -284,5 +278,3 @@ export class Environments {
             },
@@ -377,5 +369,3 @@ export class Environments {
             },
@@ -438,5 +428,3 @@ export class Environments {
             },
diff --git a/src/api/resources/events/client/Client.ts b/src/api/resources/events/client/Client.ts
index fbfafb7..527cc76 100644
--- a/src/api/resources/events/client/Client.ts
+++ b/src/api/resources/events/client/Client.ts
@@ -31,3 +31,3 @@ export class Events {
      * @example
-     *     await flatfile.events.list()
+     *     await flatfile.events.list({})
      */
@@ -38,3 +38,3 @@ export class Events {
         const { environmentId, spaceId, domain, topic, since, pageSize, pageNumber, includeAcknowledged } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         if (environmentId != null) {
@@ -82,5 +82,3 @@ export class Events {
             },
@@ -158,5 +156,3 @@ export class Events {
             },
@@ -237,5 +233,3 @@ export class Events {
             },
@@ -289,5 +283,3 @@ export class Events {
             },
@@ -335,3 +327,3 @@ export class Events {
      * @example
-     *     await flatfile.events.getEventToken()
+     *     await flatfile.events.getEventToken({})
      */
@@ -342,3 +334,3 @@ export class Events {
         const { scope, spaceId } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         if (scope != null) {
@@ -362,5 +354,3 @@ export class Events {
             },
diff --git a/src/api/resources/events/types/Context.ts b/src/api/resources/events/types/Context.ts
index 72c7314..117acb2 100644
--- a/src/api/resources/events/types/Context.ts
+++ b/src/api/resources/events/types/Context.ts
@@ -41,3 +41,2 @@ export interface Context {
     actorId?: string;
-    appId?: Flatfile.AppId;
 }
diff --git a/src/api/resources/events/types/Domain.ts b/src/api/resources/events/types/Domain.ts
index faf303e..36b10c1 100644
--- a/src/api/resources/events/types/Domain.ts
+++ b/src/api/resources/events/types/Domain.ts
@@ -10,3 +10,3 @@
  */
-export type Domain = "file" | "space" | "workbook" | "job" | "document" | "sheet" | "program" | "secret" | "cron";
+export type Domain = "file" | "space" | "workbook" | "job" | "document" | "sheet" | "program" | "secret";
 
@@ -21,3 +21,2 @@ export const Domain = {
     Secret: "secret",
-    Cron: "cron",
 } as const;
diff --git a/src/api/resources/events/types/Event.ts b/src/api/resources/events/types/Event.ts
index 20f2d64..1ec89fd 100644
--- a/src/api/resources/events/types/Event.ts
+++ b/src/api/resources/events/types/Event.ts
@@ -54,3 +54,2 @@ export type Event =
     | Flatfile.Event.SheetDeleted
-    | Flatfile.Event.SheetCountsUpdated
     | Flatfile.Event.SnapshotCreated
@@ -163,6 +162,2 @@ export declare namespace Event {
 
-    interface SheetCountsUpdated extends Flatfile.GenericEvent {
-        topic: "sheet:counts-updated";
-    }
-
     interface SnapshotCreated extends Flatfile.GenericEvent {
diff --git a/src/api/resources/events/types/EventTopic.ts b/src/api/resources/events/types/EventTopic.ts
index 589a8a2..9fdb9a0 100644
--- a/src/api/resources/events/types/EventTopic.ts
+++ b/src/api/resources/events/types/EventTopic.ts
@@ -31,3 +31,2 @@ export type EventTopic =
     | "sheet:deleted"
-    | "sheet:counts-updated"
     | "snapshot:created"
@@ -57,7 +56,3 @@ export type EventTopic =
     | "secret:updated"
-    | "secret:deleted"
-    | "cron:5-minutes"
-    | "cron:hourly"
-    | "cron:daily"
-    | "cron:weekly";
+    | "secret:deleted";
 
@@ -84,3 +79,2 @@ export const EventTopic = {
     SheetDeleted: "sheet:deleted",
-    SheetCountsUpdated: "sheet:counts-updated",
     SnapshotCreated: "snapshot:created",
@@ -111,6 +105,2 @@ export const EventTopic = {
     SecretDeleted: "secret:deleted",
-    Cron5Minutes: "cron:5-minutes",
-    CronHourly: "cron:hourly",
-    CronDaily: "cron:daily",
-    CronWeekly: "cron:weekly",
 } as const;
diff --git a/src/api/resources/files/client/Client.ts b/src/api/resources/files/client/Client.ts
index ef5447a..56633e1 100644
--- a/src/api/resources/files/client/Client.ts
+++ b/src/api/resources/files/client/Client.ts
@@ -35,3 +35,3 @@ export class Files {
         const { spaceId, pageSize, pageNumber, mode } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         if (spaceId != null) {
@@ -63,5 +63,3 @@ export class Files {
             },
@@ -137,5 +135,3 @@ export class Files {
             },
@@ -210,5 +206,3 @@ export class Files {
             },
@@ -289,5 +283,3 @@ export class Files {
             },
@@ -378,5 +370,3 @@ export class Files {
             },
@@ -458,5 +448,3 @@ export class Files {
             },
diff --git a/src/api/resources/files/client/requests/ListFilesRequest.ts b/src/api/resources/files/client/requests/ListFilesRequest.ts
index ed26c81..0e99dd4 100644
--- a/src/api/resources/files/client/requests/ListFilesRequest.ts
+++ b/src/api/resources/files/client/requests/ListFilesRequest.ts
@@ -13,3 +13,3 @@ export interface ListFilesRequest {
     /**
-     * Number of files to return in a page (default 20)
+     * Number of jobs to return in a page (default 20)
      */
@@ -17,3 +17,3 @@ export interface ListFilesRequest {
     /**
-     * Based on pageSize, which page of files to return
+     * Based on pageSize, which page of jobs to return
      */
diff --git a/src/api/resources/foreigndb/client/Client.ts b/src/api/resources/foreigndb/client/Client.ts
deleted file mode 100644
index 9020138..0000000
--- a/src/api/resources/foreigndb/client/Client.ts
+++ /dev/null
@@ -1,457 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as environments from "../../../../environments";
-import * as core from "../../../../core";
-import * as Flatfile from "../../..";
-import * as serializers from "../../../../serialization";
-import urlJoin from "url-join";
-import * as errors from "../../../../errors";
-
-export declare namespace Foreigndb {
-    interface Options {
-        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
-        token?: core.Supplier<core.BearerToken | undefined>;
-        fetcher?: core.FetchFunction;
-    }
-
-    interface RequestOptions {
-        timeoutInSeconds?: number;
-        maxRetries?: number;
-    }
-}
-
-export class Foreigndb {
-    constructor(protected readonly _options: Foreigndb.Options = {}) {}
-
-    /**
-     * Restore a database from a backup
-     * @throws {@link Flatfile.BadRequestError}
-     * @throws {@link Flatfile.NotFoundError}
-     */
-    public async restore(
-        workbookId: string,
-        request: Flatfile.RestoreDatabaseRequest,
-        requestOptions?: Foreigndb.RequestOptions
-    ): Promise<Flatfile.RestoreDatabaseResponse> {
-        const _response = await (this._options.fetcher ?? core.fetcher)({
-            url: urlJoin(
-                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
-                `/foreigndb/${workbookId}`
-            ),
-            method: "POST",
-            headers: {
-                Authorization: await this._getAuthorizationHeader(),
-            },
-            contentType: "application/json",
-            body: await serializers.RestoreDatabaseRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
-            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
-            maxRetries: requestOptions?.maxRetries,
-        });
-        if (_response.ok) {
-            return await serializers.RestoreDatabaseResponse.parseOrThrow(_response.body, {
-                unrecognizedObjectKeys: "passthrough",
-                allowUnrecognizedUnionMembers: true,
-                allowUnrecognizedEnumValues: true,
-                skipValidation: true,
-                breadcrumbsPrefix: ["response"],
-            });
-        }
-
-        if (_response.error.reason === "status-code") {
-            switch (_response.error.statusCode) {
-                case 400:
-                    throw new Flatfile.BadRequestError(
-                        await serializers.Errors.parseOrThrow(_response.error.body, {
-                            unrecognizedObjectKeys: "passthrough",
-                            allowUnrecognizedUnionMembers: true,
-                            allowUnrecognizedEnumValues: true,
-                            skipValidation: true,
-                            breadcrumbsPrefix: ["response"],
-                        })
-                    );
-                case 404:
-                    throw new Flatfile.NotFoundError(
-                        await serializers.Errors.parseOrThrow(_response.error.body, {
-                            unrecognizedObjectKeys: "passthrough",
-                            allowUnrecognizedUnionMembers: true,
-                            allowUnrecognizedEnumValues: true,
-                            skipValidation: true,
-                            breadcrumbsPrefix: ["response"],
-                        })
-                    );
-                default:
-                    throw new errors.FlatfileError({
-                        statusCode: _response.error.statusCode,
-                        body: _response.error.body,
-                    });
-            }
-        }
-
-        switch (_response.error.reason) {
-            case "non-json":
-                throw new errors.FlatfileError({
-                    statusCode: _response.error.statusCode,
-                    body: _response.error.rawBody,
-                });
-            case "timeout":
-                throw new errors.FlatfileTimeoutError();
-            case "unknown":
-                throw new errors.FlatfileError({
-                    message: _response.error.errorMessage,
-                });
-        }
-    }
-
-    /**
-     * Get database user credentials
-     * @throws {@link Flatfile.BadRequestError}
-     * @throws {@link Flatfile.NotFoundError}
-     */
-    public async getDatabaseUser(
-        workbookId: string,
-        requestOptions?: Foreigndb.RequestOptions
-    ): Promise<Flatfile.GetDatabaseUserResponse> {
-        const _response = await (this._options.fetcher ?? core.fetcher)({
-            url: urlJoin(
-                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
-                `/foreigndb/${workbookId}/user`
-            ),
-            method: "GET",
-            headers: {
-                Authorization: await this._getAuthorizationHeader(),
-            },
-            contentType: "application/json",
-            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
-            maxRetries: requestOptions?.maxRetries,
-        });
-        if (_response.ok) {
-            return await serializers.GetDatabaseUserResponse.parseOrThrow(_response.body, {
-                unrecognizedObjectKeys: "passthrough",
-                allowUnrecognizedUnionMembers: true,
-                allowUnrecognizedEnumValues: true,
-                skipValidation: true,
-                breadcrumbsPrefix: ["response"],
-            });
-        }
-
-        if (_response.error.reason === "status-code") {
-            switch (_response.error.statusCode) {
-                case 400:
-                    throw new Flatfile.BadRequestError(
-                        await serializers.Errors.parseOrThrow(_response.error.body, {
-                            unrecognizedObjectKeys: "passthrough",
-                            allowUnrecognizedUnionMembers: true,
-                            allowUnrecognizedEnumValues: true,
-                            skipValidation: true,
-                            breadcrumbsPrefix: ["response"],
-                        })
-                    );
-                case 404:
-                    throw new Flatfile.NotFoundError(
-                        await serializers.Errors.parseOrThrow(_response.error.body, {
-                            unrecognizedObjectKeys: "passthrough",
-                            allowUnrecognizedUnionMembers: true,
-                            allowUnrecognizedEnumValues: true,
-                            skipValidation: true,
-                            breadcrumbsPrefix: ["response"],
-                        })
-                    );
-                default:
-                    throw new errors.FlatfileError({
-                        statusCode: _response.error.statusCode,
-                        body: _response.error.body,
-                    });
-            }
-        }
-
-        switch (_response.error.reason) {
-            case "non-json":
-                throw new errors.FlatfileError({
-                    statusCode: _response.error.statusCode,
-                    body: _response.error.rawBody,
-                });
-            case "timeout":
-                throw new errors.FlatfileTimeoutError();
-            case "unknown":
-                throw new errors.FlatfileError({
-                    message: _response.error.errorMessage,
-                });
-        }
-    }
-
-    /**
-     * Get the database information
-     * @throws {@link Flatfile.BadRequestError}
-     * @throws {@link Flatfile.NotFoundError}
-     */
-    public async getDatabaseInfo(
-        workbookId: string,
-        requestOptions?: Foreigndb.RequestOptions
-    ): Promise<Flatfile.GetDatabaseResponse> {
-        const _response = await (this._options.fetcher ?? core.fetcher)({
-            url: urlJoin(
-                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
-                `/foreigndb/${workbookId}`
-            ),
-            method: "GET",
-            headers: {
-                Authorization: await this._getAuthorizationHeader(),
-            },
-            contentType: "application/json",
-            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
-            maxRetries: requestOptions?.maxRetries,
-        });
-        if (_response.ok) {
-            return await serializers.GetDatabaseResponse.parseOrThrow(_response.body, {
-                unrecognizedObjectKeys: "passthrough",
-                allowUnrecognizedUnionMembers: true,
-                allowUnrecognizedEnumValues: true,
-                skipValidation: true,
-                breadcrumbsPrefix: ["response"],
-            });
-        }
-
-        if (_response.error.reason === "status-code") {
-            switch (_response.error.statusCode) {
-                case 400:
-                    throw new Flatfile.BadRequestError(
-                        await serializers.Errors.parseOrThrow(_response.error.body, {
-                            unrecognizedObjectKeys: "passthrough",
-                            allowUnrecognizedUnionMembers: true,
-                            allowUnrecognizedEnumValues: true,
-                            skipValidation: true,
-                            breadcrumbsPrefix: ["response"],
-                        })
-                    );
-                case 404:
-                    throw new Flatfile.NotFoundError(
-                        await serializers.Errors.parseOrThrow(_response.error.body, {
-                            unrecognizedObjectKeys: "passthrough",
-                            allowUnrecognizedUnionMembers: true,
-                            allowUnrecognizedEnumValues: true,
-                            skipValidation: true,
-                            breadcrumbsPrefix: ["response"],
-                        })
-                    );
-                default:
-                    throw new errors.FlatfileError({
-                        statusCode: _response.error.statusCode,
-                        body: _response.error.body,
-                    });
-            }
-        }
-
-        switch (_response.error.reason) {
-            case "non-json":
-                throw new errors.FlatfileError({
-                    statusCode: _response.error.statusCode,
-                    body: _response.error.rawBody,
-                });
-            case "timeout":
-                throw new errors.FlatfileTimeoutError();
-            case "unknown":
-                throw new errors.FlatfileError({
-                    message: _response.error.errorMessage,
-                });
-        }
-    }
-
-    /**
-     * Delete the database
-     * @throws {@link Flatfile.BadRequestError}
-     * @throws {@link Flatfile.NotFoundError}
-     */
-    public async deleteDatabase(
-        workbookId: string,
-        requestOptions?: Foreigndb.RequestOptions
-    ): Promise<Flatfile.Success> {
-        const _response = await (this._options.fetcher ?? core.fetcher)({
-            url: urlJoin(
-                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
-                `/foreigndb/${workbookId}`
-            ),
-            method: "DELETE",
-            headers: {
-                Authorization: await this._getAuthorizationHeader(),
-            },
-            contentType: "application/json",
-            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
-            maxRetries: requestOptions?.maxRetries,
-        });
-        if (_response.ok) {
-            return await serializers.Success.parseOrThrow(_response.body, {
-                unrecognizedObjectKeys: "passthrough",
-                allowUnrecognizedUnionMembers: true,
-                allowUnrecognizedEnumValues: true,
-                skipValidation: true,
-                breadcrumbsPrefix: ["response"],
-            });
-        }
-
-        if (_response.error.reason === "status-code") {
-            switch (_response.error.statusCode) {
-                case 400:
-                    throw new Flatfile.BadRequestError(
-                        await serializers.Errors.parseOrThrow(_response.error.body, {
-                            unrecognizedObjectKeys: "passthrough",
-                            allowUnrecognizedUnionMembers: true,
-                            allowUnrecognizedEnumValues: true,
-                            skipValidation: true,
-                            breadcrumbsPrefix: ["response"],
-                        })
-                    );
-                case 404:
-                    throw new Flatfile.NotFoundError(
-                        await serializers.Errors.parseOrThrow(_response.error.body, {
-                            unrecognizedObjectKeys: "passthrough",
-                            allowUnrecognizedUnionMembers: true,
-                            allowUnrecognizedEnumValues: true,
-                            skipValidation: true,
-                            breadcrumbsPrefix: ["response"],
-                        })
-                    );
-                default:
-                    throw new errors.FlatfileError({
-                        statusCode: _response.error.statusCode,
-                        body: _response.error.body,
-                    });
-            }
-        }
-
-        switch (_response.error.reason) {
-            case "non-json":
-                throw new errors.FlatfileError({
-                    statusCode: _response.error.statusCode,
-                    body: _response.error.rawBody,
-                });
-            case "timeout":
-                throw new errors.FlatfileTimeoutError();
-            case "unknown":
-                throw new errors.FlatfileError({
-                    message: _response.error.errorMessage,
-                });
-        }
-    }
-
-    /**
-     * Persist a file in s3 object storage
-     * @throws {@link Flatfile.BadRequestError}
-     * @throws {@link Flatfile.NotFoundError}
-     */
-    public async upload(
-        workbookId: string,
-        request: Flatfile.UploadToObjectStorageRequest,
-        requestOptions?: Foreigndb.RequestOptions
-    ): Promise<Flatfile.Success> {
-        const _response = await (this._options.fetcher ?? core.fetcher)({
-            url: urlJoin(
-                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
-                `/foreigndb/${workbookId}/storage`
-            ),
-            method: "POST",
-            headers: {
-                Authorization: await this._getAuthorizationHeader(),
-            },
-            contentType: "application/json",
-            body: await serializers.UploadToObjectStorageRequest.jsonOrThrow(request, {
-                unrecognizedObjectKeys: "strip",
-            }),
-            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
-            maxRetries: requestOptions?.maxRetries,
-        });
-        if (_response.ok) {
-            return await serializers.Success.parseOrThrow(_response.body, {
-                unrecognizedObjectKeys: "passthrough",
-                allowUnrecognizedUnionMembers: true,
-                allowUnrecognizedEnumValues: true,
-                skipValidation: true,
-                breadcrumbsPrefix: ["response"],
-            });
-        }
-
-        if (_response.error.reason === "status-code") {
-            switch (_response.error.statusCode) {
-                case 400:
-                    throw new Flatfile.BadRequestError(
-                        await serializers.Errors.parseOrThrow(_response.error.body, {
-                            unrecognizedObjectKeys: "passthrough",
-                            allowUnrecognizedUnionMembers: true,
-                            allowUnrecognizedEnumValues: true,
-                            skipValidation: true,
-                            breadcrumbsPrefix: ["response"],
-                        })
-                    );
-                case 404:
-                    throw new Flatfile.NotFoundError(
-                        await serializers.Errors.parseOrThrow(_response.error.body, {
-                            unrecognizedObjectKeys: "passthrough",
-                            allowUnrecognizedUnionMembers: true,
-                            allowUnrecognizedEnumValues: true,
-                            skipValidation: true,
-                            breadcrumbsPrefix: ["response"],
-                        })
-                    );
-                default:
-                    throw new errors.FlatfileError({
-                        statusCode: _response.error.statusCode,
-                        body: _response.error.body,
-                    });
-            }
-        }
-
-        switch (_response.error.reason) {
-            case "non-json":
-                throw new errors.FlatfileError({
-                    statusCode: _response.error.statusCode,
-                    body: _response.error.rawBody,
-                });
-            case "timeout":
-                throw new errors.FlatfileTimeoutError();
-            case "unknown":
-                throw new errors.FlatfileError({
-                    message: _response.error.errorMessage,
-                });
-        }
-    }
-
-    protected async _getAuthorizationHeader() {
-        const bearer = await core.Supplier.get(this._options.token);
-        if (bearer != null) {
-            return `Bearer ${bearer}`;
-        }
-
-        return undefined;
-    }
-}
diff --git a/src/api/resources/foreigndb/client/index.ts b/src/api/resources/foreigndb/client/index.ts
deleted file mode 100644
index cb0ff5c..0000000
--- a/src/api/resources/foreigndb/client/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export {};
diff --git a/src/api/resources/foreigndb/index.ts b/src/api/resources/foreigndb/index.ts
deleted file mode 100644
index c9240f8..0000000
--- a/src/api/resources/foreigndb/index.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-export * from "./types";
-export * from "./client";
diff --git a/src/api/resources/foreigndb/types/DatabaseTask.ts b/src/api/resources/foreigndb/types/DatabaseTask.ts
deleted file mode 100644
index 2ef7873..0000000
--- a/src/api/resources/foreigndb/types/DatabaseTask.ts
+++ /dev/null
@@ -1,15 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-/**
- * Properties of a database task
- */
-export interface DatabaseTask {
-    /** The task status */
-    status: string;
-    /** The task type */
-    type: string;
-    /** The task progress */
-    progress: number;
-}
diff --git a/src/api/resources/foreigndb/types/GetDatabaseResponse.ts b/src/api/resources/foreigndb/types/GetDatabaseResponse.ts
deleted file mode 100644
index f492c2d..0000000
--- a/src/api/resources/foreigndb/types/GetDatabaseResponse.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as Flatfile from "../../..";
-
-export interface GetDatabaseResponse {
-    task: Flatfile.DatabaseTask;
-}
diff --git a/src/api/resources/foreigndb/types/GetDatabaseUserResponse.ts b/src/api/resources/foreigndb/types/GetDatabaseUserResponse.ts
deleted file mode 100644
index d0208fb..0000000
--- a/src/api/resources/foreigndb/types/GetDatabaseUserResponse.ts
+++ /dev/null
@@ -1,13 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-/**
- * Properties of the database user
- */
-export interface GetDatabaseUserResponse {
-    /** the database user username */
-    username: string;
-    /** the database user password */
-    password: string;
-}
diff --git a/src/api/resources/foreigndb/types/RestoreDatabaseRequest.ts b/src/api/resources/foreigndb/types/RestoreDatabaseRequest.ts
deleted file mode 100644
index 18c0c10..0000000
--- a/src/api/resources/foreigndb/types/RestoreDatabaseRequest.ts
+++ /dev/null
@@ -1,11 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-/**
- * Properties required to restore a database
- */
-export interface RestoreDatabaseRequest {
-    /** the fileId of the backup to be restored */
-    fileId: string;
-}
diff --git a/src/api/resources/foreigndb/types/RestoreDatabaseResponse.ts b/src/api/resources/foreigndb/types/RestoreDatabaseResponse.ts
deleted file mode 100644
index a4a1fe1..0000000
--- a/src/api/resources/foreigndb/types/RestoreDatabaseResponse.ts
+++ /dev/null
@@ -1,15 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-/**
- * Properties of a restored database
- */
-export interface RestoreDatabaseResponse {
-    /** the host to the restored database */
-    host: string;
-    /** the port to the restored database */
-    port: number;
-    /** the database name to the restored database */
-    dbname: string;
-}
diff --git a/src/api/resources/foreigndb/types/UploadToObjectStorageRequest.ts b/src/api/resources/foreigndb/types/UploadToObjectStorageRequest.ts
deleted file mode 100644
index 52d0ce8..0000000
--- a/src/api/resources/foreigndb/types/UploadToObjectStorageRequest.ts
+++ /dev/null
@@ -1,11 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-/**
- * Properties required to upload a file to object storage
- */
-export interface UploadToObjectStorageRequest {
-    /** the ID of the file to send to object storage */
-    fileId: string;
-}
diff --git a/src/api/resources/foreigndb/types/index.ts b/src/api/resources/foreigndb/types/index.ts
deleted file mode 100644
index 8086286..0000000
--- a/src/api/resources/foreigndb/types/index.ts
+++ /dev/null
@@ -1,6 +0,0 @@
-export * from "./UploadToObjectStorageRequest";
-export * from "./RestoreDatabaseRequest";
-export * from "./RestoreDatabaseResponse";
-export * from "./GetDatabaseResponse";
-export * from "./DatabaseTask";
-export * from "./GetDatabaseUserResponse";
diff --git a/src/api/resources/guests/client/Client.ts b/src/api/resources/guests/client/Client.ts
index d0dbe13..08aedde 100644
--- a/src/api/resources/guests/client/Client.ts
+++ b/src/api/resources/guests/client/Client.ts
@@ -40,3 +40,3 @@ export class Guests {
         const { spaceId, email } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         _queryParams["spaceId"] = spaceId;
@@ -57,5 +57,3 @@ export class Guests {
             },
@@ -130,5 +128,3 @@ export class Guests {
             },
@@ -192,5 +188,3 @@ export class Guests {
             },
@@ -250,5 +244,3 @@ export class Guests {
             },
@@ -315,5 +307,3 @@ export class Guests {
             },
@@ -360,3 +350,3 @@ export class Guests {
      * @example
-     *     await flatfile.guests.getGuestToken("us_g_YOUR_ID")
+     *     await flatfile.guests.getGuestToken("us_g_YOUR_ID", {})
      */
@@ -368,3 +358,3 @@ export class Guests {
         const { spaceId } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         if (spaceId != null) {
@@ -384,5 +374,3 @@ export class Guests {
             },
@@ -446,5 +434,3 @@ export class Guests {
             },
@@ -541,5 +527,3 @@ export class Guests {
             },
@@ -639,5 +623,3 @@ export class Guests {
             },
@@ -735,5 +717,3 @@ export class Guests {
             },
diff --git a/src/api/resources/index.ts b/src/api/resources/index.ts
index 21a77dd..080ee96 100644
--- a/src/api/resources/index.ts
+++ b/src/api/resources/index.ts
@@ -1,3 +1 @@
-export * as accounts from "./accounts";
-export * from "./accounts/types";
 export * as agents from "./agents";
@@ -6,4 +4,2 @@ export * as apps from "./apps";
 export * from "./apps/types";
-export * as assistant from "./assistant";
-export * from "./assistant/types";
 export * as auth from "./auth";
@@ -28,4 +24,2 @@ export * as files from "./files";
 export * from "./files/types";
-export * as foreigndb from "./foreigndb";
-export * from "./foreigndb/types";
 export * as guests from "./guests";
@@ -58,3 +52,2 @@ export * from "./commons/errors";
 export * from "./agents/client/requests";
-export * from "./assistant/client/requests";
 export * from "./auth/client/requests";
diff --git a/src/api/resources/jobs/client/Client.ts b/src/api/resources/jobs/client/Client.ts
index 3875433..e06acc2 100644
--- a/src/api/resources/jobs/client/Client.ts
+++ b/src/api/resources/jobs/client/Client.ts
@@ -32,3 +32,3 @@ export class Jobs {
         const { environmentId, spaceId, workbookId, fileId, parentId, pageSize, pageNumber, sortDirection } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         if (environmentId != null) {
@@ -76,5 +76,3 @@ export class Jobs {
             },
@@ -132,5 +130,3 @@ export class Jobs {
             },
@@ -185,5 +181,3 @@ export class Jobs {
             },
@@ -241,5 +235,3 @@ export class Jobs {
             },
@@ -294,5 +286,3 @@ export class Jobs {
             },
@@ -352,5 +342,3 @@ export class Jobs {
             },
@@ -413,5 +401,3 @@ export class Jobs {
             },
@@ -512,5 +498,3 @@ export class Jobs {
             },
@@ -572,5 +556,3 @@ export class Jobs {
             },
@@ -641,5 +623,3 @@ export class Jobs {
             },
@@ -706,5 +686,3 @@ export class Jobs {
             },
@@ -780,5 +758,3 @@ export class Jobs {
             },
@@ -858,5 +834,3 @@ export class Jobs {
             },
@@ -926,5 +900,3 @@ export class Jobs {
             },
@@ -985,5 +957,3 @@ export class Jobs {
             },
@@ -1043,5 +1013,3 @@ export class Jobs {
             },
@@ -1089,3 +1057,2 @@ export class Jobs {
      *     await flatfile.jobs.split("us_jb_YOUR_ID", {
-     *         parts: [{}],
      *         runInParallel: true
@@ -1109,5 +1076,3 @@ export class Jobs {
             },
diff --git a/src/api/resources/jobs/types/ExportOptions.ts b/src/api/resources/jobs/types/ExportOptions.ts
index 76b5ada..fb0af40 100644
--- a/src/api/resources/jobs/types/ExportOptions.ts
+++ b/src/api/resources/jobs/types/ExportOptions.ts
@@ -25,3 +25,6 @@ export interface ExportOptions {
     q?: string;
-    /** The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records */
+    /**
+     * The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records
+     *
+     */
     ids?: Flatfile.RecordId[];
diff --git a/src/api/resources/jobs/types/FindAndReplaceJobConfig.ts b/src/api/resources/jobs/types/FindAndReplaceJobConfig.ts
index 21d5ec0..ccd853a 100644
--- a/src/api/resources/jobs/types/FindAndReplaceJobConfig.ts
+++ b/src/api/resources/jobs/types/FindAndReplaceJobConfig.ts
@@ -17,3 +17,6 @@ export interface FindAndReplaceJobConfig {
     q?: string;
-    /** The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records */
+    /**
+     * The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records
+     *
+     */
     ids?: Flatfile.RecordId[];
diff --git a/src/api/resources/jobs/types/Job.ts b/src/api/resources/jobs/types/Job.ts
index b97c5de..7aba335 100644
--- a/src/api/resources/jobs/types/Job.ts
+++ b/src/api/resources/jobs/types/Job.ts
@@ -21,3 +21,3 @@ import * as Flatfile from "../../..";
  *         destination: "us_wb_YOUR_ID",
- *         config: {},
+ *         config: undefined,
  *         trigger: Flatfile.Trigger.Immediate,
diff --git a/src/api/resources/jobs/types/JobPlan.ts b/src/api/resources/jobs/types/JobPlan.ts
index 93db0fa..3702174 100644
--- a/src/api/resources/jobs/types/JobPlan.ts
+++ b/src/api/resources/jobs/types/JobPlan.ts
@@ -22,3 +22,3 @@ import * as Flatfile from "../../..";
  *             destination: "us_wb_YOUR_ID",
- *             config: {},
+ *             config: undefined,
  *             trigger: Flatfile.Trigger.Immediate,
diff --git a/src/api/resources/jobs/types/JobPlanResponse.ts b/src/api/resources/jobs/types/JobPlanResponse.ts
index f37035f..40723bb 100644
--- a/src/api/resources/jobs/types/JobPlanResponse.ts
+++ b/src/api/resources/jobs/types/JobPlanResponse.ts
@@ -21,3 +21,3 @@ import * as Flatfile from "../../..";
  *                 destination: "us_wb_YOUR_ID",
- *                 config: {},
+ *                 config: undefined,
  *                 trigger: Flatfile.Trigger.Immediate,
diff --git a/src/api/resources/jobs/types/JobResponse.ts b/src/api/resources/jobs/types/JobResponse.ts
index f1c5ff8..eb4b4ab 100644
--- a/src/api/resources/jobs/types/JobResponse.ts
+++ b/src/api/resources/jobs/types/JobResponse.ts
@@ -20,3 +20,3 @@ import * as Flatfile from "../../..";
  *             destination: "us_wb_YOUR_ID",
- *             config: {},
+ *             config: undefined,
  *             trigger: Flatfile.Trigger.Immediate,
diff --git a/src/api/resources/jobs/types/JobSplitDetails.ts b/src/api/resources/jobs/types/JobSplitDetails.ts
index 961e31c..fd46de6 100644
--- a/src/api/resources/jobs/types/JobSplitDetails.ts
+++ b/src/api/resources/jobs/types/JobSplitDetails.ts
@@ -11,3 +11,2 @@ import * as Flatfile from "../../..";
  *     {
- *         parts: [{}],
  *         runInParallel: true
diff --git a/src/api/resources/jobs/types/JobUpdate.ts b/src/api/resources/jobs/types/JobUpdate.ts
index afaa7a5..0f938e5 100644
--- a/src/api/resources/jobs/types/JobUpdate.ts
+++ b/src/api/resources/jobs/types/JobUpdate.ts
@@ -11,3 +11,3 @@ import * as Flatfile from "../../..";
  *     {
- *         config: {},
+ *         config: undefined,
  *         status: Flatfile.JobStatus.Complete,
diff --git a/src/api/resources/jobs/types/ListJobsResponse.ts b/src/api/resources/jobs/types/ListJobsResponse.ts
index 2df4075..eb997d2 100644
--- a/src/api/resources/jobs/types/ListJobsResponse.ts
+++ b/src/api/resources/jobs/types/ListJobsResponse.ts
@@ -25,3 +25,3 @@ import * as Flatfile from "../../..";
  *                 destination: "us_wb_YOUR_ID",
- *                 config: {},
+ *                 config: undefined,
  *                 trigger: Flatfile.Trigger.Immediate,
diff --git a/src/api/resources/jobs/types/MutateJobConfig.ts b/src/api/resources/jobs/types/MutateJobConfig.ts
index 2abb49e..a95fa04 100644
--- a/src/api/resources/jobs/types/MutateJobConfig.ts
+++ b/src/api/resources/jobs/types/MutateJobConfig.ts
@@ -12,4 +12,2 @@ export interface MutateJobConfig {
     mutationId?: string;
-    /** If specified, a snapshot will be generated with this label */
-    snapshotLabel?: string;
     filter?: Flatfile.Filter;
@@ -19,3 +17,6 @@ export interface MutateJobConfig {
     q?: string;
-    /** The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records */
+    /**
+     * The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records
+     *
+     */
     ids?: Flatfile.RecordId[];
diff --git a/src/api/resources/mapping/client/Client.ts b/src/api/resources/mapping/client/Client.ts
index 370f737..3227841 100644
--- a/src/api/resources/mapping/client/Client.ts
+++ b/src/api/resources/mapping/client/Client.ts
@@ -47,5 +47,3 @@ export class Mapping {
             },
@@ -128,5 +126,3 @@ export class Mapping {
             },
@@ -211,3 +207,3 @@ export class Mapping {
         } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         if (pageSize != null) {
@@ -263,5 +259,3 @@ export class Mapping {
             },
@@ -337,5 +331,3 @@ export class Mapping {
             },
@@ -421,5 +413,3 @@ export class Mapping {
             },
@@ -505,5 +495,3 @@ export class Mapping {
             },
@@ -589,5 +577,3 @@ export class Mapping {
             },
@@ -676,5 +662,3 @@ export class Mapping {
             },
@@ -765,5 +749,3 @@ export class Mapping {
             },
@@ -859,5 +841,3 @@ export class Mapping {
             },
@@ -944,5 +924,3 @@ export class Mapping {
             },
@@ -1034,5 +1012,3 @@ export class Mapping {
             },
diff --git a/src/api/resources/property/types/EnumPropertyOption.ts b/src/api/resources/property/types/EnumPropertyOption.ts
index 632ac14..8586459 100644
--- a/src/api/resources/property/types/EnumPropertyOption.ts
+++ b/src/api/resources/property/types/EnumPropertyOption.ts
@@ -15,3 +15,3 @@ export interface EnumPropertyOption {
     meta?: Record<string, any>;
-    /** The value or ID of this option. This value will be sent in egress. The type is a string | integer | boolean. */
+    /** The value or ID of this option. This value will be sent in egress.  The type is a string | integer | boolean. */
     value?: any;
diff --git a/src/api/resources/records/client/Client.ts b/src/api/resources/records/client/Client.ts
index 160d562..6145d27 100644
--- a/src/api/resources/records/client/Client.ts
+++ b/src/api/resources/records/client/Client.ts
@@ -33,3 +33,3 @@ export class Records {
      * @example
-     *     await flatfile.records.get("us_sh_YOUR_ID")
+     *     await flatfile.records.get("us_sh_YOUR_ID", {})
      */
@@ -61,3 +61,3 @@ export class Records {
         } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         if (versionId != null) {
@@ -153,5 +153,3 @@ export class Records {
             },
@@ -229,3 +227,3 @@ export class Records {
      *                 "firstName": {
-     *                     value: "John",
+     *                     value: undefined,
      *                     messages: [],
@@ -234,3 +232,3 @@ export class Records {
      *                 "lastName": {
-     *                     value: "Smith",
+     *                     value: undefined,
      *                     messages: [],
@@ -239,3 +237,3 @@ export class Records {
      *                 "email": {
-     *                     value: "john.smith@example.com",
+     *                     value: undefined,
      *                     messages: [],
@@ -264,5 +262,3 @@ export class Records {
             },
@@ -336,3 +332,3 @@ export class Records {
      *             "firstName": {
-     *                 value: "John",
+     *                 value: undefined,
      *                 messages: [],
@@ -341,3 +337,3 @@ export class Records {
      *             "lastName": {
-     *                 value: "Smith",
+     *                 value: undefined,
      *                 messages: [],
@@ -346,3 +342,3 @@ export class Records {
      *             "email": {
-     *                 value: "john.smith@example.com",
+     *                 value: undefined,
      *                 messages: [],
@@ -368,5 +364,3 @@ export class Records {
             },
@@ -448,3 +442,3 @@ export class Records {
         const { ids } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         if (Array.isArray(ids)) {
@@ -466,5 +460,3 @@ export class Records {
             },
@@ -543,4 +535,4 @@ export class Records {
     ): Promise<Flatfile.VersionResponse> {
-        const { filter, filterField, searchValue, searchField, ids, q, ..._body } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const { filter, filterField, searchValue, searchField, ids, ..._body } = request;
+        const _queryParams: Record<string, string | string[]> = {};
         if (filter != null) {
@@ -569,6 +561,2 @@ export class Records {
 
-        if (q != null) {
-            _queryParams["q"] = q;
-        }
-
         const _response = await (this._options.fetcher ?? core.fetcher)({
@@ -584,5 +572,3 @@ export class Records {
             },
diff --git a/src/api/resources/records/client/requests/FindAndReplaceRecordRequest.ts b/src/api/resources/records/client/requests/FindAndReplaceRecordRequest.ts
index 768efa5..c8bc80f 100644
--- a/src/api/resources/records/client/requests/FindAndReplaceRecordRequest.ts
+++ b/src/api/resources/records/client/requests/FindAndReplaceRecordRequest.ts
@@ -22,8 +22,5 @@ export interface FindAndReplaceRecordRequest {
      * The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records
+     *
      */
     ids?: Flatfile.RecordId | Flatfile.RecordId[];
-    /**
-     * An FFQL query used to filter the result set
-     */
-    q?: string;
     /** A value to find for a given field in a sheet. For exact matches, wrap the value in double quotes ("Bob") */
diff --git a/src/api/resources/records/client/requests/GetRecordsRequest.ts b/src/api/resources/records/client/requests/GetRecordsRequest.ts
index ffd839d..b1cbba2 100644
--- a/src/api/resources/records/client/requests/GetRecordsRequest.ts
+++ b/src/api/resources/records/client/requests/GetRecordsRequest.ts
@@ -32,2 +32,3 @@ export interface GetRecordsRequest {
      * The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records. Maximum of 100 allowed.
+     *
      */
@@ -35,3 +36,3 @@ export interface GetRecordsRequest {
     /**
-     * Number of records to return in a page (default 10,000)
+     * Number of records to return in a page (default 1000 if pageNumber included)
      */
@@ -39,3 +40,3 @@ export interface GetRecordsRequest {
     /**
-     * Based on pageSize, which page of records to return (Note - numbers start at 1)
+     * Based on pageSize, which page of records to return
      */
diff --git a/src/api/resources/records/types/DiffRecord.ts b/src/api/resources/records/types/DiffRecord.ts
index 432c94f..cd297a6 100644
--- a/src/api/resources/records/types/DiffRecord.ts
+++ b/src/api/resources/records/types/DiffRecord.ts
@@ -12,12 +12,12 @@ import * as Flatfile from "../../..";
  *             "firstName": {
- *                 snapshotValue: "John",
- *                 value: "Johns"
+ *                 snapshotValue: undefined,
+ *                 value: undefined
  *             },
  *             "lastName": {
- *                 snapshotValue: "Doe",
- *                 value: "Does"
+ *                 snapshotValue: undefined,
+ *                 value: undefined
  *             },
  *             "email": {
- *                 snapshotValue: "john.doe@example.com",
- *                 value: "john.doe@example.com"
+ *                 snapshotValue: undefined,
+ *                 value: undefined
  *             }
diff --git a/src/api/resources/records/types/DiffRecords.ts b/src/api/resources/records/types/DiffRecords.ts
index 9c4e428..9d9bf91 100644
--- a/src/api/resources/records/types/DiffRecords.ts
+++ b/src/api/resources/records/types/DiffRecords.ts
@@ -14,12 +14,12 @@ import * as Flatfile from "../../..";
  *                 "firstName": {
- *                     snapshotValue: "John",
- *                     value: "Johns"
+ *                     snapshotValue: undefined,
+ *                     value: undefined
  *                 },
  *                 "lastName": {
- *                     snapshotValue: "Doe",
- *                     value: "Does"
+ *                     snapshotValue: undefined,
+ *                     value: undefined
  *                 },
  *                 "email": {
- *                     snapshotValue: "john.doe@example.com",
- *                     value: "john.doe@example.com"
+ *                     snapshotValue: undefined,
+ *                     value: undefined
  *                 }
diff --git a/src/api/resources/records/types/DiffRecordsResponse.ts b/src/api/resources/records/types/DiffRecordsResponse.ts
index 0bc082d..2f1a25d 100644
--- a/src/api/resources/records/types/DiffRecordsResponse.ts
+++ b/src/api/resources/records/types/DiffRecordsResponse.ts
@@ -13,12 +13,12 @@ import * as Flatfile from "../../..";
  *                     "firstName": {
- *                         snapshotValue: "John",
- *                         value: "Johns"
+ *                         snapshotValue: undefined,
+ *                         value: undefined
  *                     },
  *                     "lastName": {
- *                         snapshotValue: "Doe",
- *                         value: "Does"
+ *                         snapshotValue: undefined,
+ *                         value: undefined
  *                     },
  *                     "email": {
- *                         snapshotValue: "john.doe@example.com",
- *                         value: "john.doe@example.com"
+ *                         snapshotValue: undefined,
+ *                         value: undefined
  *                     }
diff --git a/src/api/resources/records/types/GetRecordsResponse.ts b/src/api/resources/records/types/GetRecordsResponse.ts
index 1dc2898..160b2ba 100644
--- a/src/api/resources/records/types/GetRecordsResponse.ts
+++ b/src/api/resources/records/types/GetRecordsResponse.ts
@@ -14,3 +14,3 @@ import * as Flatfile from "../../..";
  *                         "firstName": {
- *                             value: "John",
+ *                             value: undefined,
  *                             messages: [],
@@ -20,3 +20,3 @@ import * as Flatfile from "../../..";
  *                         "lastName": {
- *                             value: "Smith",
+ *                             value: undefined,
  *                             messages: [],
@@ -26,3 +26,3 @@ import * as Flatfile from "../../..";
  *                         "email": {
- *                             value: "john.smith@example.com",
+ *                             value: undefined,
  *                             messages: [],
diff --git a/src/api/resources/records/types/GetRecordsResponseData.ts b/src/api/resources/records/types/GetRecordsResponseData.ts
index 258b428..df58c87 100644
--- a/src/api/resources/records/types/GetRecordsResponseData.ts
+++ b/src/api/resources/records/types/GetRecordsResponseData.ts
@@ -15,3 +15,3 @@ import * as Flatfile from "../../..";
  *                     "firstName": {
- *                         value: "John",
+ *                         value: undefined,
  *                         messages: [],
@@ -21,3 +21,3 @@ import * as Flatfile from "../../..";
  *                     "lastName": {
- *                         value: "Smith",
+ *                         value: undefined,
  *                         messages: [],
@@ -27,3 +27,3 @@ import * as Flatfile from "../../..";
  *                     "email": {
- *                         value: "john.smith@example.com",
+ *                         value: undefined,
  *                         messages: [],
diff --git a/src/api/resources/records/types/RecordBase.ts b/src/api/resources/records/types/RecordBase.ts
index d19d0f7..ab2ae97 100644
--- a/src/api/resources/records/types/RecordBase.ts
+++ b/src/api/resources/records/types/RecordBase.ts
@@ -21,5 +21,3 @@ export interface RecordBase {
     commitId?: Flatfile.CommitId;
-    /** Auto-generated value based on whether the record contains a field with an error message. Cannot be set via the API. */
     valid?: boolean;
-    /** This record level `messages` property is deprecated and no longer stored or used. Use the `messages` property on the individual cell values instead. This property will be removed in a future release. */
     messages?: Flatfile.ValidationMessage[];
diff --git a/src/api/resources/records/types/RecordData.ts b/src/api/resources/records/types/RecordData.ts
index d629418..6860670 100644
--- a/src/api/resources/records/types/RecordData.ts
+++ b/src/api/resources/records/types/RecordData.ts
@@ -12,3 +12,3 @@ import * as Flatfile from "../../..";
  *         "firstName": {
- *             value: "John",
+ *             value: undefined,
  *             messages: [],
@@ -17,3 +17,3 @@ import * as Flatfile from "../../..";
  *         "lastName": {
- *             value: "Smith",
+ *             value: undefined,
  *             messages: [],
@@ -22,3 +22,3 @@ import * as Flatfile from "../../..";
  *         "email": {
- *             value: "john.smith@example.com",
+ *             value: undefined,
  *             messages: [],
diff --git a/src/api/resources/records/types/RecordDataWithLinks.ts b/src/api/resources/records/types/RecordDataWithLinks.ts
index 103aed2..0005027 100644
--- a/src/api/resources/records/types/RecordDataWithLinks.ts
+++ b/src/api/resources/records/types/RecordDataWithLinks.ts
@@ -12,3 +12,3 @@ import * as Flatfile from "../../..";
  *         "firstName": {
- *             value: "John",
+ *             value: undefined,
  *             messages: [],
@@ -18,3 +18,3 @@ import * as Flatfile from "../../..";
  *         "lastName": {
- *             value: "Smith",
+ *             value: undefined,
  *             messages: [],
@@ -24,3 +24,3 @@ import * as Flatfile from "../../..";
  *         "email": {
- *             value: "john.smith@example.com",
+ *             value: undefined,
  *             messages: [],
@@ -34,3 +34,3 @@ import * as Flatfile from "../../..";
  *         "firstName": {
- *             value: "Suzie",
+ *             value: undefined,
  *             messages: [],
@@ -40,3 +40,3 @@ import * as Flatfile from "../../..";
  *         "lastName": {
- *             value: "Q",
+ *             value: undefined,
  *             messages: [],
@@ -46,3 +46,3 @@ import * as Flatfile from "../../..";
  *         "email": {
- *             value: "suzie.q@example.com",
+ *             value: undefined,
  *             messages: [],
diff --git a/src/api/resources/records/types/RecordWithLinks.ts b/src/api/resources/records/types/RecordWithLinks.ts
index 50a1103..267987a 100644
--- a/src/api/resources/records/types/RecordWithLinks.ts
+++ b/src/api/resources/records/types/RecordWithLinks.ts
@@ -14,3 +14,3 @@ import * as Flatfile from "../../..";
  *             "firstName": {
- *                 value: "John",
+ *                 value: undefined,
  *                 messages: [],
@@ -20,3 +20,3 @@ import * as Flatfile from "../../..";
  *             "lastName": {
- *                 value: "Smith",
+ *                 value: undefined,
  *                 messages: [],
@@ -26,3 +26,3 @@ import * as Flatfile from "../../..";
  *             "email": {
- *                 value: "john.smith@example.com",
+ *                 value: undefined,
  *                 messages: [],
@@ -41,3 +41,3 @@ import * as Flatfile from "../../..";
  *             "firstName": {
- *                 value: "Suzie",
+ *                 value: undefined,
  *                 messages: [],
@@ -47,3 +47,3 @@ import * as Flatfile from "../../..";
  *             "lastName": {
- *                 value: "Q",
+ *                 value: undefined,
  *                 messages: [],
@@ -53,3 +53,3 @@ import * as Flatfile from "../../..";
  *             "email": {
- *                 value: "suzie.q@example.com",
+ *                 value: undefined,
  *                 messages: [],
diff --git a/src/api/resources/records/types/Record_.ts b/src/api/resources/records/types/Record_.ts
index 8b0eb8f..bd6b1e4 100644
--- a/src/api/resources/records/types/Record_.ts
+++ b/src/api/resources/records/types/Record_.ts
@@ -16,3 +16,3 @@ import * as Flatfile from "../../..";
  *             "firstName": {
- *                 value: "John",
+ *                 value: undefined,
  *                 messages: [],
@@ -21,3 +21,3 @@ import * as Flatfile from "../../..";
  *             "lastName": {
- *                 value: "Smith",
+ *                 value: undefined,
  *                 messages: [],
@@ -26,3 +26,3 @@ import * as Flatfile from "../../..";
  *             "email": {
- *                 value: "john.smith@example.com",
+ *                 value: undefined,
  *                 messages: [],
diff --git a/src/api/resources/records/types/Records.ts b/src/api/resources/records/types/Records.ts
index c3a2de0..ac4adbd 100644
--- a/src/api/resources/records/types/Records.ts
+++ b/src/api/resources/records/types/Records.ts
@@ -16,3 +16,3 @@ import * as Flatfile from "../../..";
  *                 "firstName": {
- *                     value: "John",
+ *                     value: undefined,
  *                     messages: [],
@@ -21,3 +21,3 @@ import * as Flatfile from "../../..";
  *                 "lastName": {
- *                     value: "Smith",
+ *                     value: undefined,
  *                     messages: [],
@@ -26,3 +26,3 @@ import * as Flatfile from "../../..";
  *                 "email": {
- *                     value: "john.smith@example.com",
+ *                     value: undefined,
  *                     messages: [],
diff --git a/src/api/resources/records/types/RecordsResponse.ts b/src/api/resources/records/types/RecordsResponse.ts
index 022aa70..c1add59 100644
--- a/src/api/resources/records/types/RecordsResponse.ts
+++ b/src/api/resources/records/types/RecordsResponse.ts
@@ -14,3 +14,3 @@ import * as Flatfile from "../../..";
  *                         "firstName": {
- *                             value: "John",
+ *                             value: undefined,
  *                             messages: [],
@@ -20,3 +20,3 @@ import * as Flatfile from "../../..";
  *                         "lastName": {
- *                             value: "Smith",
+ *                             value: undefined,
  *                             messages: [],
@@ -26,3 +26,3 @@ import * as Flatfile from "../../..";
  *                         "email": {
- *                             value: "john.smith@example.com",
+ *                             value: undefined,
  *                             messages: [],
diff --git a/src/api/resources/records/types/RecordsResponseData.ts b/src/api/resources/records/types/RecordsResponseData.ts
index 867ed54..ef6f3a8 100644
--- a/src/api/resources/records/types/RecordsResponseData.ts
+++ b/src/api/resources/records/types/RecordsResponseData.ts
@@ -13,3 +13,3 @@ import * as Flatfile from "../../..";
  *                     "firstName": {
- *                         value: "John",
+ *                         value: undefined,
  *                         messages: [],
@@ -19,3 +19,3 @@ import * as Flatfile from "../../..";
  *                     "lastName": {
- *                         value: "Smith",
+ *                         value: undefined,
  *                         messages: [],
@@ -25,3 +25,3 @@ import * as Flatfile from "../../..";
  *                     "email": {
- *                         value: "john.smith@example.com",
+ *                         value: undefined,
  *                         messages: [],
diff --git a/src/api/resources/records/types/RecordsWithLinks.ts b/src/api/resources/records/types/RecordsWithLinks.ts
index a3e1374..1bb3f2a 100644
--- a/src/api/resources/records/types/RecordsWithLinks.ts
+++ b/src/api/resources/records/types/RecordsWithLinks.ts
@@ -14,3 +14,3 @@ import * as Flatfile from "../../..";
  *                 "firstName": {
- *                     value: "John",
+ *                     value: undefined,
  *                     messages: [],
@@ -20,3 +20,3 @@ import * as Flatfile from "../../..";
  *                 "lastName": {
- *                     value: "Smith",
+ *                     value: undefined,
  *                     messages: [],
@@ -26,3 +26,3 @@ import * as Flatfile from "../../..";
  *                 "email": {
- *                     value: "john.smith@example.com",
+ *                     value: undefined,
  *                     messages: [],
diff --git a/src/api/resources/roles/client/Client.ts b/src/api/resources/roles/client/Client.ts
index 09604a8..502f87e 100644
--- a/src/api/resources/roles/client/Client.ts
+++ b/src/api/resources/roles/client/Client.ts
@@ -42,5 +42,3 @@ export class Roles {
             },
diff --git a/src/api/resources/roles/types/AssignActorRoleRequest.ts b/src/api/resources/roles/types/AssignActorRoleRequest.ts
index 2083319..9ee92d0 100644
--- a/src/api/resources/roles/types/AssignActorRoleRequest.ts
+++ b/src/api/resources/roles/types/AssignActorRoleRequest.ts
@@ -6,15 +6,2 @@ import * as Flatfile from "../../..";
 
-/**
- * @example
- *     {
- *         roleId: "us_rol_YOUR_ID",
- *         resourceId: "us_acc_YOUR_ID"
- *     }
- *
- * @example
- *     {
- *         roleId: "us_rol_YOUR_ID",
- *         resourceId: "us_env_YOUR_ID"
- *     }
- */
 export interface AssignActorRoleRequest {
diff --git a/src/api/resources/roles/types/ResourceIdUnion.ts b/src/api/resources/roles/types/ResourceIdUnion.ts
index 627781c..cc12385 100644
--- a/src/api/resources/roles/types/ResourceIdUnion.ts
+++ b/src/api/resources/roles/types/ResourceIdUnion.ts
@@ -6,12 +6,2 @@ import * as Flatfile from "../../..";
 
-/**
- * @example
- *     "us_acc_YOUR_ID"
- *
- * @example
- *     "us_env_YOUR_ID"
- *
- * @example
- *     "us_sp_YOUR_ID"
- */
 export type ResourceIdUnion = Flatfile.AccountId | Flatfile.EnvironmentId | Flatfile.SpaceId;
diff --git a/src/api/resources/secrets/client/Client.ts b/src/api/resources/secrets/client/Client.ts
index 1ade8af..42920a5 100644
--- a/src/api/resources/secrets/client/Client.ts
+++ b/src/api/resources/secrets/client/Client.ts
@@ -42,3 +42,3 @@ export class Secrets {
         const { environmentId, spaceId } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         if (environmentId != null) {
@@ -62,5 +62,3 @@ export class Secrets {
             },
@@ -154,5 +152,3 @@ export class Secrets {
             },
@@ -241,5 +237,3 @@ export class Secrets {
             },
diff --git a/src/api/resources/sheets/client/Client.ts b/src/api/resources/sheets/client/Client.ts
index 0b478a8..1212443 100644
--- a/src/api/resources/sheets/client/Client.ts
+++ b/src/api/resources/sheets/client/Client.ts
@@ -41,3 +41,3 @@ export class Sheets {
         const { workbookId } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         _queryParams["workbookId"] = workbookId;
@@ -54,5 +54,3 @@ export class Sheets {
             },
@@ -116,5 +114,3 @@ export class Sheets {
             },
@@ -176,5 +172,3 @@ export class Sheets {
             },
@@ -262,5 +256,3 @@ export class Sheets {
             },
@@ -346,3 +338,3 @@ export class Sheets {
         } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         if (versionId != null) {
@@ -406,5 +398,3 @@ export class Sheets {
             },
@@ -467,3 +457,3 @@ export class Sheets {
         } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         if (versionId != null) {
@@ -519,5 +509,3 @@ export class Sheets {
             },
@@ -581,5 +569,3 @@ export class Sheets {
             },
@@ -649,3 +635,3 @@ export class Sheets {
      * @example
-     *     await flatfile.sheets.getSheetCommits("us_sh_YOUR_ID")
+     *     await flatfile.sheets.getSheetCommits("us_sh_YOUR_ID", {})
      */
@@ -657,3 +643,3 @@ export class Sheets {
         const { completed } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         if (completed != null) {
@@ -673,5 +659,3 @@ export class Sheets {
             },
@@ -737,5 +721,3 @@ export class Sheets {
             },
@@ -823,5 +805,3 @@ export class Sheets {
             },
@@ -914,3 +894,3 @@ export class Sheets {
         } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         if (fieldKey != null) {
@@ -966,5 +946,3 @@ export class Sheets {
             },
diff --git a/src/api/resources/sheets/client/requests/GetRecordsCsvRequest.ts b/src/api/resources/sheets/client/requests/GetRecordsCsvRequest.ts
index 87868cc..7a0fc11 100644
--- a/src/api/resources/sheets/client/requests/GetRecordsCsvRequest.ts
+++ b/src/api/resources/sheets/client/requests/GetRecordsCsvRequest.ts
@@ -12,3 +12,3 @@ export interface GetRecordsCsvRequest {
     /**
-     * Returns records that were changed in that version in that version and only those records.
+     * Returns records that were changed in that version  in that version and only those records.
      */
@@ -49,2 +49,3 @@ export interface GetRecordsCsvRequest {
      * The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records
+     *
      */
diff --git a/src/api/resources/sheets/types/ListSheetsResponse.ts b/src/api/resources/sheets/types/ListSheetsResponse.ts
index bda1bce..47b24a6 100644
--- a/src/api/resources/sheets/types/ListSheetsResponse.ts
+++ b/src/api/resources/sheets/types/ListSheetsResponse.ts
@@ -32,2 +32,7 @@ import * as Flatfile from "../../..";
  *                 },
+ *                 countRecords: {
+ *                     valid: 1000,
+ *                     error: 0,
+ *                     total: 1000
+ *                 },
  *                 lockedBy: "Example0",
diff --git a/src/api/resources/sheets/types/Sheet.ts b/src/api/resources/sheets/types/Sheet.ts
index be4c96a..2b97e88 100644
--- a/src/api/resources/sheets/types/Sheet.ts
+++ b/src/api/resources/sheets/types/Sheet.ts
@@ -33,2 +33,7 @@ import * as Flatfile from "../../..";
  *         },
+ *         countRecords: {
+ *             valid: 1000,
+ *             error: 0,
+ *             total: 1000
+ *         },
  *         lockedBy: "Example0",
@@ -49,2 +54,4 @@ export interface Sheet {
     config: Flatfile.SheetConfig;
+    /** The amount of records in the Sheet. */
+    countRecords?: Flatfile.RecordCounts;
     /** The scoped namespace of the Sheet. */
@@ -59,4 +66,2 @@ export interface Sheet {
     lockedAt?: Date;
-    /** The precomputed counts of records in the Sheet (may not exist). */
-    recordCounts?: Flatfile.RecordCounts;
 }
diff --git a/src/api/resources/sheets/types/SheetConfigUpdate.ts b/src/api/resources/sheets/types/SheetConfigUpdate.ts
index 3d52577..34a1f0a 100644
--- a/src/api/resources/sheets/types/SheetConfigUpdate.ts
+++ b/src/api/resources/sheets/types/SheetConfigUpdate.ts
@@ -14,3 +14,3 @@ export interface SheetConfigUpdate {
     description?: string;
-    /** A unique identifier for your Sheet. **Required when updating a Workbook.** */
+    /** A unique identifier for your Sheet. */
     slug?: string;
diff --git a/src/api/resources/sheets/types/SheetResponse.ts b/src/api/resources/sheets/types/SheetResponse.ts
index 32cb1d3..037d224 100644
--- a/src/api/resources/sheets/types/SheetResponse.ts
+++ b/src/api/resources/sheets/types/SheetResponse.ts
@@ -32,2 +32,7 @@ import * as Flatfile from "../../..";
  *             },
+ *             countRecords: {
+ *                 valid: 1000,
+ *                 error: 0,
+ *                 total: 1000
+ *             },
  *             lockedBy: "Example0",
diff --git a/src/api/resources/sheets/types/SheetUpdate.ts b/src/api/resources/sheets/types/SheetUpdate.ts
index 89a1d96..d89b3a0 100644
--- a/src/api/resources/sheets/types/SheetUpdate.ts
+++ b/src/api/resources/sheets/types/SheetUpdate.ts
@@ -16,2 +16,4 @@ export interface SheetUpdate {
     config?: Flatfile.SheetConfig;
+    /** The amount of records in the Sheet. */
+    countRecords?: Flatfile.RecordCounts;
     /** The scoped namespace of the Sheet. */
diff --git a/src/api/resources/snapshots/client/Client.ts b/src/api/resources/snapshots/client/Client.ts
index f45e5c6..b87be19 100644
--- a/src/api/resources/snapshots/client/Client.ts
+++ b/src/api/resources/snapshots/client/Client.ts
@@ -53,5 +53,3 @@ export class Snapshots {
             },
@@ -132,3 +130,3 @@ export class Snapshots {
         const { sheetId } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         _queryParams["sheetId"] = sheetId;
@@ -145,5 +143,3 @@ export class Snapshots {
             },
@@ -225,3 +221,3 @@ export class Snapshots {
         const { includeSummary } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         _queryParams["includeSummary"] = includeSummary.toString();
@@ -238,5 +234,3 @@ export class Snapshots {
             },
@@ -325,5 +319,3 @@ export class Snapshots {
             },
@@ -416,5 +408,3 @@ export class Snapshots {
             },
@@ -503,3 +493,3 @@ export class Snapshots {
         const { pageSize, pageNumber, changeType } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         if (pageSize != null) {
@@ -527,5 +517,3 @@ export class Snapshots {
             },
diff --git a/src/api/resources/spaces/client/Client.ts b/src/api/resources/spaces/client/Client.ts
index 2870146..51922c8 100644
--- a/src/api/resources/spaces/client/Client.ts
+++ b/src/api/resources/spaces/client/Client.ts
@@ -51,3 +51,3 @@ export class Spaces {
         } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         if (environmentId != null) {
@@ -99,5 +99,3 @@ export class Spaces {
             },
@@ -160,3 +158,3 @@ export class Spaces {
      *     await flatfile.spaces.create({
-     *         name: "My First Workbook",
+     *         name: "My First Worbook",
      *         displayOrder: 1,
@@ -181,5 +179,3 @@ export class Spaces {
             },
@@ -268,5 +264,3 @@ export class Spaces {
             },
@@ -351,5 +345,3 @@ export class Spaces {
             },
@@ -421,3 +413,3 @@ export class Spaces {
      *     await flatfile.spaces.bulkDelete({
-     *         spaceIds: "us_sp_YOUR_ID"
+     *         ids: "us_sp_YOUR_ID"
      *     })
@@ -428,8 +420,8 @@ export class Spaces {
     ): Promise<Flatfile.Success> {
-        const { spaceIds } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
-        if (Array.isArray(spaceIds)) {
-            _queryParams["spaceIds"] = spaceIds.map((item) => item);
+        const { ids } = request;
+        const _queryParams: Record<string, string | string[]> = {};
+        if (Array.isArray(ids)) {
+            _queryParams["ids"] = ids.map((item) => item);
         } else {
-            _queryParams["spaceIds"] = spaceIds;
+            _queryParams["ids"] = ids;
         }
@@ -447,5 +439,3 @@ export class Spaces {
             },
@@ -537,5 +527,3 @@ export class Spaces {
             },
@@ -624,5 +612,3 @@ export class Spaces {
             },
@@ -687,86 +673,2 @@ export class Spaces {
 
-    /**
-     * @throws {@link Flatfile.BadRequestError}
-     * @throws {@link Flatfile.NotFoundError}
-     */
-    public async upgrade(
-        spaceId: Flatfile.SpaceId,
-        request: Flatfile.UpgradeSpaceConfig,
-        requestOptions?: Spaces.RequestOptions
-    ): Promise<Flatfile.SpaceResponse> {
-        const _response = await (this._options.fetcher ?? core.fetcher)({
-            url: urlJoin(
-                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
-                `/spaces/${await serializers.SpaceId.jsonOrThrow(spaceId)}/upgrade`
-            ),
-            method: "POST",
-            headers: {
-                Authorization: await this._getAuthorizationHeader(),
-            },
-            contentType: "application/json",
-            body: await serializers.UpgradeSpaceConfig.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
-            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
-            maxRetries: requestOptions?.maxRetries,
-        });
-        if (_response.ok) {
-            return await serializers.SpaceResponse.parseOrThrow(_response.body, {
-                unrecognizedObjectKeys: "passthrough",
-                allowUnrecognizedUnionMembers: true,
-                allowUnrecognizedEnumValues: true,
-                skipValidation: true,
-                breadcrumbsPrefix: ["response"],
-            });
-        }
-
-        if (_response.error.reason === "status-code") {
-            switch (_response.error.statusCode) {
-                case 400:
-                    throw new Flatfile.BadRequestError(
-                        await serializers.Errors.parseOrThrow(_response.error.body, {
-                            unrecognizedObjectKeys: "passthrough",
-                            allowUnrecognizedUnionMembers: true,
-                            allowUnrecognizedEnumValues: true,
-                            skipValidation: true,
-                            breadcrumbsPrefix: ["response"],
-                        })
-                    );
-                case 404:
-                    throw new Flatfile.NotFoundError(
-                        await serializers.Errors.parseOrThrow(_response.error.body, {
-                            unrecognizedObjectKeys: "passthrough",
-                            allowUnrecognizedUnionMembers: true,
-                            allowUnrecognizedEnumValues: true,
-                            skipValidation: true,
-                            breadcrumbsPrefix: ["response"],
-                        })
-                    );
-                default:
-                    throw new errors.FlatfileError({
-                        statusCode: _response.error.statusCode,
-                        body: _response.error.body,
-                    });
-            }
-        }
-
-        switch (_response.error.reason) {
-            case "non-json":
-                throw new errors.FlatfileError({
-                    statusCode: _response.error.statusCode,
-                    body: _response.error.rawBody,
-                });
-            case "timeout":
-                throw new errors.FlatfileTimeoutError();
-            case "unknown":
-                throw new errors.FlatfileError({
-                    message: _response.error.errorMessage,
-                });
-        }
-    }
-
     protected async _getAuthorizationHeader() {
diff --git a/src/api/resources/spaces/client/requests/DeleteSpacesRequest.ts b/src/api/resources/spaces/client/requests/DeleteSpacesRequest.ts
index 01df630..5f4641f 100644
--- a/src/api/resources/spaces/client/requests/DeleteSpacesRequest.ts
+++ b/src/api/resources/spaces/client/requests/DeleteSpacesRequest.ts
@@ -9,3 +9,3 @@ import * as Flatfile from "../../../..";
  *     {
- *         spaceIds: "us_sp_YOUR_ID"
+ *         ids: "us_sp_YOUR_ID"
  *     }
@@ -16,3 +16,3 @@ export interface DeleteSpacesRequest {
      */
-    spaceIds: Flatfile.SpaceId | Flatfile.SpaceId[];
+    ids: Flatfile.SpaceId | Flatfile.SpaceId[];
 }
diff --git a/src/api/resources/spaces/types/InternalSpaceConfigBase.ts b/src/api/resources/spaces/types/InternalSpaceConfigBase.ts
index 12d7903..8157112 100644
--- a/src/api/resources/spaces/types/InternalSpaceConfigBase.ts
+++ b/src/api/resources/spaces/types/InternalSpaceConfigBase.ts
@@ -21,4 +21,2 @@ export interface InternalSpaceConfigBase {
     archivedAt?: Date;
-    /** The ID of the App that space is associated with */
-    appId?: Flatfile.AppId;
 }
diff --git a/src/api/resources/spaces/types/ListSpacesResponse.ts b/src/api/resources/spaces/types/ListSpacesResponse.ts
index e5054a0..4b64c0c 100644
--- a/src/api/resources/spaces/types/ListSpacesResponse.ts
+++ b/src/api/resources/spaces/types/ListSpacesResponse.ts
@@ -31,3 +31,4 @@ import * as Flatfile from "../../..";
  *                 primaryWorkbookId: "us_wb_YOUR_ID",
- *                 labels: []
+ *                 labels: [],
+ *                 metadata: undefined
  *             }]
diff --git a/src/api/resources/spaces/types/Space.ts b/src/api/resources/spaces/types/Space.ts
index ae76874..fac6065 100644
--- a/src/api/resources/spaces/types/Space.ts
+++ b/src/api/resources/spaces/types/Space.ts
@@ -25,3 +25,4 @@ import * as Flatfile from "../../..";
  *         primaryWorkbookId: "us_wb_YOUR_ID",
- *         labels: []
+ *         labels: [],
+ *         metadata: undefined
  *     }
@@ -44,3 +45,4 @@ import * as Flatfile from "../../..";
  *         primaryWorkbookId: "us_wb_YOUR_ID",
- *         labels: []
+ *         labels: [],
+ *         metadata: undefined
  *     }
@@ -62,3 +64,3 @@ export interface Space extends Flatfile.InternalSpaceConfigBase {
     expiredAt?: Date;
-    /** This date marks the most recent activity within the space, tracking actions to the second. Activities include creating or updating records in a sheet, uploading files, or modifying a workbook's configuration. */
+    /** Date that the last activity in the space occurred. This could include any create or update activity in the space like adding a record to a sheet, uploading a new file, or updating the configuration of a workbook. This date is only tracked to the precision of a day. */
     lastActivityAt?: Date;
diff --git a/src/api/resources/spaces/types/SpaceConfig.ts b/src/api/resources/spaces/types/SpaceConfig.ts
index 67f6c9a..f6a04ef 100644
--- a/src/api/resources/spaces/types/SpaceConfig.ts
+++ b/src/api/resources/spaces/types/SpaceConfig.ts
@@ -11,3 +11,3 @@ import * as Flatfile from "../../..";
  *     {
- *         name: "My First Workbook",
+ *         name: "My First Worbook",
  *         displayOrder: 1,
diff --git a/src/api/resources/spaces/types/SpaceResponse.ts b/src/api/resources/spaces/types/SpaceResponse.ts
index b32fe6e..155e02c 100644
--- a/src/api/resources/spaces/types/SpaceResponse.ts
+++ b/src/api/resources/spaces/types/SpaceResponse.ts
@@ -24,3 +24,4 @@ import * as Flatfile from "../../..";
  *             primaryWorkbookId: "us_wb_YOUR_ID",
- *             labels: []
+ *             labels: [],
+ *             metadata: undefined
  *         }
@@ -45,3 +46,4 @@ import * as Flatfile from "../../..";
  *             primaryWorkbookId: "us_wb_YOUR_ID",
- *             labels: []
+ *             labels: [],
+ *             metadata: undefined
  *         }
diff --git a/src/api/resources/spaces/types/UpgradeSpaceConfig.ts b/src/api/resources/spaces/types/UpgradeSpaceConfig.ts
deleted file mode 100644
index e93020d..0000000
--- a/src/api/resources/spaces/types/UpgradeSpaceConfig.ts
+++ /dev/null
@@ -1,10 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-/**
- * Properties used to upgrade a space
- */
-export interface UpgradeSpaceConfig {
-    id: string;
-}
diff --git a/src/api/resources/spaces/types/index.ts b/src/api/resources/spaces/types/index.ts
index 8669369..338c7d4 100644
--- a/src/api/resources/spaces/types/index.ts
+++ b/src/api/resources/spaces/types/index.ts
@@ -6,3 +6,2 @@ export * from "./SpaceConfig";
 export * from "./InternalSpaceConfigBase";
-export * from "./UpgradeSpaceConfig";
 export * from "./EventTokenResponse";
diff --git a/src/api/resources/users/client/Client.ts b/src/api/resources/users/client/Client.ts
index 1d14d9a..beb23a2 100644
--- a/src/api/resources/users/client/Client.ts
+++ b/src/api/resources/users/client/Client.ts
@@ -40,3 +40,3 @@ export class Users {
         const { email } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         if (email != null) {
@@ -56,5 +56,3 @@ export class Users {
             },
@@ -97,136 +95,2 @@ export class Users {
 
-    /**
-     * Creates and invites a new user to your account.
-     *
-     * @example
-     *     await flatfile.users.createAndInvite({
-     *         email: "john.smith@example.com",
-     *         name: "John Smith",
-     *         actorRoles: [{
-     *                 roleId: "us_rol_YOUR_ID",
-     *                 resourceId: "us_acc_YOUR_ID"
-     *             }, {
-     *                 roleId: "us_rol_YOUR_ID",
-     *                 resourceId: "us_env_YOUR_ID"
-     *             }]
-     *     })
-     */
-    public async createAndInvite(
-        request: Flatfile.UserCreateAndInviteRequest,
-        requestOptions?: Users.RequestOptions
-    ): Promise<Flatfile.UserResponse> {
-        const _response = await (this._options.fetcher ?? core.fetcher)({
-            url: urlJoin(
-                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
-                "users/invite"
-            ),
-            method: "POST",
-            headers: {
-                Authorization: await this._getAuthorizationHeader(),
-            },
-            contentType: "application/json",
-            body: await serializers.UserCreateAndInviteRequest.jsonOrThrow(request, {
-                unrecognizedObjectKeys: "strip",
-            }),
-            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
-            maxRetries: requestOptions?.maxRetries,
-        });
-        if (_response.ok) {
-            return await serializers.UserResponse.parseOrThrow(_response.body, {
-                unrecognizedObjectKeys: "passthrough",
-                allowUnrecognizedUnionMembers: true,
-                allowUnrecognizedEnumValues: true,
-                skipValidation: true,
-                breadcrumbsPrefix: ["response"],
-            });
-        }
-
-        if (_response.error.reason === "status-code") {
-            throw new errors.FlatfileError({
-                statusCode: _response.error.statusCode,
-                body: _response.error.body,
-            });
-        }
-
-        switch (_response.error.reason) {
-            case "non-json":
-                throw new errors.FlatfileError({
-                    statusCode: _response.error.statusCode,
-                    body: _response.error.rawBody,
-                });
-            case "timeout":
-                throw new errors.FlatfileTimeoutError();
-            case "unknown":
-                throw new errors.FlatfileError({
-                    message: _response.error.errorMessage,
-                });
-        }
-    }
-
-    /**
-     * Updates a user
-     */
-    public async update(
-        userId: Flatfile.UserId,
-        request: Flatfile.UpdateUserRequest = {},
-        requestOptions?: Users.RequestOptions
-    ): Promise<Flatfile.UserResponse> {
-        const _response = await (this._options.fetcher ?? core.fetcher)({
-            url: urlJoin(
-                (await core.Supplier.get(this._options.environment)) ?? environments.FlatfileEnvironment.Production,
-                `users/${await serializers.UserId.jsonOrThrow(userId)}`
-            ),
-            method: "PATCH",
-            headers: {
-                Authorization: await this._getAuthorizationHeader(),
-            },
-            contentType: "application/json",
-            body: await serializers.UpdateUserRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
-            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
-            maxRetries: requestOptions?.maxRetries,
-        });
-        if (_response.ok) {
-            return await serializers.UserResponse.parseOrThrow(_response.body, {
-                unrecognizedObjectKeys: "passthrough",
-                allowUnrecognizedUnionMembers: true,
-                allowUnrecognizedEnumValues: true,
-                skipValidation: true,
-                breadcrumbsPrefix: ["response"],
-            });
-        }
-
-        if (_response.error.reason === "status-code") {
-            throw new errors.FlatfileError({
-                statusCode: _response.error.statusCode,
-                body: _response.error.body,
-            });
-        }
-
-        switch (_response.error.reason) {
-            case "non-json":
-                throw new errors.FlatfileError({
-                    statusCode: _response.error.statusCode,
-                    body: _response.error.rawBody,
-                });
-            case "timeout":
-                throw new errors.FlatfileTimeoutError();
-            case "unknown":
-                throw new errors.FlatfileError({
-                    message: _response.error.errorMessage,
-                });
-        }
-    }
-
     /**
@@ -249,5 +113,3 @@ export class Users {
             },
@@ -310,5 +172,3 @@ export class Users {
             },
@@ -405,5 +265,3 @@ export class Users {
             },
@@ -503,5 +361,3 @@ export class Users {
             },
@@ -585,3 +441,3 @@ export class Users {
         const { tenantId, pageSize, pageNumber } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         _queryParams["tenantId"] = tenantId;
@@ -606,5 +462,3 @@ export class Users {
             },
@@ -656,3 +510,3 @@ export class Users {
         const { tenantId } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         _queryParams["tenantId"] = tenantId;
@@ -669,5 +523,3 @@ export class Users {
             },
@@ -728,5 +580,3 @@ export class Users {
             },
diff --git a/src/api/resources/users/client/requests/UpdateUserRequest.ts b/src/api/resources/users/client/requests/UpdateUserRequest.ts
deleted file mode 100644
index 30e54f2..0000000
--- a/src/api/resources/users/client/requests/UpdateUserRequest.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-export interface UpdateUserRequest {
-    name?: string;
-    dashboard?: number;
-}
diff --git a/src/api/resources/users/client/requests/index.ts b/src/api/resources/users/client/requests/index.ts
index bf566bf..b49c90b 100644
--- a/src/api/resources/users/client/requests/index.ts
+++ b/src/api/resources/users/client/requests/index.ts
@@ -1,3 +1,2 @@
 export { ListUsersRequest } from "./ListUsersRequest";
-export { UpdateUserRequest } from "./UpdateUserRequest";
 export { ListApiTokensRequest } from "./ListApiTokensRequest";
diff --git a/src/api/resources/users/types/ListUsersResponse.ts b/src/api/resources/users/types/ListUsersResponse.ts
index d90952b..51ec119 100644
--- a/src/api/resources/users/types/ListUsersResponse.ts
+++ b/src/api/resources/users/types/ListUsersResponse.ts
@@ -18,5 +18,3 @@ import * as Flatfile from "../../..";
  *                 createdAt: new Date("2023-10-30T16:59:45.735Z"),
- *                 updatedAt: new Date("2023-10-30T16:59:45.735Z"),
- *                 lastSeenAt: new Date("2023-10-30T16:59:45.735Z"),
- *                 dashboard: 2
+ *                 updatedAt: new Date("2023-10-30T16:59:45.735Z")
  *             }]
diff --git a/src/api/resources/users/types/User.ts b/src/api/resources/users/types/User.ts
index 469b501..996f272 100644
--- a/src/api/resources/users/types/User.ts
+++ b/src/api/resources/users/types/User.ts
@@ -19,5 +19,3 @@ import * as Flatfile from "../../..";
  *         createdAt: new Date("2023-10-30T16:59:45.735Z"),
- *         updatedAt: new Date("2023-10-30T16:59:45.735Z"),
- *         lastSeenAt: new Date("2023-10-30T16:59:45.735Z"),
- *         dashboard: 2
+ *         updatedAt: new Date("2023-10-30T16:59:45.735Z")
  *     }
@@ -31,4 +29,2 @@ export interface User extends Flatfile.UserConfig {
     updatedAt: Date;
-    lastSeenAt?: Date;
-    dashboard?: number;
 }
diff --git a/src/api/resources/users/types/UserCreateAndInviteRequest.ts b/src/api/resources/users/types/UserCreateAndInviteRequest.ts
deleted file mode 100644
index 9603ae1..0000000
--- a/src/api/resources/users/types/UserCreateAndInviteRequest.ts
+++ /dev/null
@@ -1,27 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as Flatfile from "../../..";
-
-/**
- * Properties used to create a new user
- *
- * @example
- *     {
- *         email: "john.smith@example.com",
- *         name: "John Smith",
- *         actorRoles: [{
- *                 roleId: "us_rol_YOUR_ID",
- *                 resourceId: "us_acc_YOUR_ID"
- *             }, {
- *                 roleId: "us_rol_YOUR_ID",
- *                 resourceId: "us_env_YOUR_ID"
- *             }]
- *     }
- */
-export interface UserCreateAndInviteRequest {
-    email: string;
-    name: string;
-    actorRoles: Flatfile.AssignActorRoleRequest[];
-}
diff --git a/src/api/resources/users/types/UserResponse.ts b/src/api/resources/users/types/UserResponse.ts
index 3ccc810..7045914 100644
--- a/src/api/resources/users/types/UserResponse.ts
+++ b/src/api/resources/users/types/UserResponse.ts
@@ -18,5 +18,3 @@ import * as Flatfile from "../../..";
  *             createdAt: new Date("2023-10-30T16:59:45.735Z"),
- *             updatedAt: new Date("2023-10-30T16:59:45.735Z"),
- *             lastSeenAt: new Date("2023-10-30T16:59:45.735Z"),
- *             dashboard: 2
+ *             updatedAt: new Date("2023-10-30T16:59:45.735Z")
  *         }
diff --git a/src/api/resources/users/types/index.ts b/src/api/resources/users/types/index.ts
index bae3706..7bd7d69 100644
--- a/src/api/resources/users/types/index.ts
+++ b/src/api/resources/users/types/index.ts
@@ -4,3 +4,2 @@ export * from "./User";
 export * from "./UserConfig";
-export * from "./UserCreateAndInviteRequest";
 export * from "./ListApiTokensResponse";
diff --git a/src/api/resources/versions/client/Client.ts b/src/api/resources/versions/client/Client.ts
index c96a8a3..7818f3a 100644
--- a/src/api/resources/versions/client/Client.ts
+++ b/src/api/resources/versions/client/Client.ts
@@ -42,5 +42,3 @@ export class Versions {
             },
diff --git a/src/api/resources/workbooks/client/Client.ts b/src/api/resources/workbooks/client/Client.ts
index ac4d087..71734fd 100644
--- a/src/api/resources/workbooks/client/Client.ts
+++ b/src/api/resources/workbooks/client/Client.ts
@@ -33,3 +33,4 @@ export class Workbooks {
      *     await flatfile.workbooks.list({
-     *         spaceId: "us_sp_YOUR_ID"
+     *         spaceId: "us_sp_YOUR_ID",
+     *         includeCounts: true
      *     })
@@ -41,3 +42,3 @@ export class Workbooks {
         const { spaceId, includeCounts } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         if (spaceId != null) {
@@ -61,5 +62,3 @@ export class Workbooks {
             },
@@ -168,5 +167,3 @@ export class Workbooks {
             },
@@ -245,5 +242,3 @@ export class Workbooks {
             },
@@ -331,5 +326,3 @@ export class Workbooks {
             },
@@ -428,5 +421,3 @@ export class Workbooks {
             },
@@ -496,3 +487,3 @@ export class Workbooks {
      * @example
-     *     await flatfile.workbooks.getWorkbookCommits("us_wb_YOUR_ID")
+     *     await flatfile.workbooks.getWorkbookCommits("us_wb_YOUR_ID", {})
      */
@@ -504,3 +495,3 @@ export class Workbooks {
         const { completed } = request;
-        const _queryParams: Record<string, string | string[] | object | object[]> = {};
+        const _queryParams: Record<string, string | string[]> = {};
         if (completed != null) {
@@ -520,5 +511,3 @@ export class Workbooks {
             },
@@ -581,5 +570,3 @@ export class Workbooks {
             },
diff --git a/src/api/resources/workbooks/client/requests/ListWorkbooksRequest.ts b/src/api/resources/workbooks/client/requests/ListWorkbooksRequest.ts
index 6e28163..331f646 100644
--- a/src/api/resources/workbooks/client/requests/ListWorkbooksRequest.ts
+++ b/src/api/resources/workbooks/client/requests/ListWorkbooksRequest.ts
@@ -9,3 +9,4 @@ import * as Flatfile from "../../../..";
  *     {
- *         spaceId: "us_sp_YOUR_ID"
+ *         spaceId: "us_sp_YOUR_ID",
+ *         includeCounts: true
  *     }
@@ -18,3 +19,3 @@ export interface ListWorkbooksRequest {
     /**
-     * Include counts for the workbook. **DEPRECATED** Counts will return 0s. Use GET /sheets/:sheetId/counts
+     * Include counts for the workbook
      */
diff --git a/src/api/resources/workbooks/types/ListWorkbooksResponse.ts b/src/api/resources/workbooks/types/ListWorkbooksResponse.ts
index 99698d2..34f96aa 100644
--- a/src/api/resources/workbooks/types/ListWorkbooksResponse.ts
+++ b/src/api/resources/workbooks/types/ListWorkbooksResponse.ts
@@ -37,2 +37,7 @@ import * as Flatfile from "../../..";
  *                         },
+ *                         countRecords: {
+ *                             valid: 1000,
+ *                             error: 0,
+ *                             total: 1000
+ *                         },
  *                         lockedBy: "Example0",
diff --git a/src/api/resources/workbooks/types/Workbook.ts b/src/api/resources/workbooks/types/Workbook.ts
index d1c132e..dea2d71 100644
--- a/src/api/resources/workbooks/types/Workbook.ts
+++ b/src/api/resources/workbooks/types/Workbook.ts
@@ -38,2 +38,7 @@ import * as Flatfile from "../../..";
  *                 },
+ *                 countRecords: {
+ *                     valid: 1000,
+ *                     error: 0,
+ *                     total: 1000
+ *                 },
  *                 lockedBy: "Example0",
diff --git a/src/api/resources/workbooks/types/WorkbookResponse.ts b/src/api/resources/workbooks/types/WorkbookResponse.ts
index c329988..11e3afa 100644
--- a/src/api/resources/workbooks/types/WorkbookResponse.ts
+++ b/src/api/resources/workbooks/types/WorkbookResponse.ts
@@ -37,2 +37,7 @@ import * as Flatfile from "../../..";
  *                     },
+ *                     countRecords: {
+ *                         valid: 1000,
+ *                         error: 0,
+ *                         total: 1000
+ *                     },
  *                     lockedBy: "Example0",
diff --git a/src/core/fetcher/Fetcher.ts b/src/core/fetcher/Fetcher.ts
index c08e0fd..aa709ae 100644
--- a/src/core/fetcher/Fetcher.ts
+++ b/src/core/fetcher/Fetcher.ts
@@ -2,3 +2,2 @@ import { default as FormData } from "form-data";
 import qs from "qs";
-import { RUNTIME } from "../runtime";
 import { APIResponse } from "./APIResponse";
@@ -13,3 +12,3 @@ export declare namespace Fetcher {
         headers?: Record<string, string | undefined>;
-        queryParameters?: Record<string, string | string[] | object | object[]>;
+        queryParameters?: Record<string, string | string[]>;
         body?: unknown;
@@ -78,13 +77,3 @@ async function fetcherImpl<R = unknown>(args: Fetcher.Args): Promise<APIResponse
 
-    // In Node.js environments, the SDK always uses`node-fetch`.
-    // If not in Node.js the SDK uses global fetch if available,
-    // and falls back to node-fetch.
-    const fetchFn =
-        RUNTIME.type === "node"
-            ? // `.default` is required due to this issue:
-              // https://github.com/node-fetch/node-fetch/issues/450#issuecomment-387045223
-              require("node-fetch").default
-            : typeof fetch == "function"
-            ? fetch
-            : require("node-fetch").default;
+    const fetchFn = typeof fetch == "function" ? fetch : require("node-fetch");
 
diff --git a/src/core/index.ts b/src/core/index.ts
index 2d20c46..e2eb66e 100644
--- a/src/core/index.ts
+++ b/src/core/index.ts
@@ -2,3 +2,2 @@ export * from "./fetcher";
 export * from "./auth";
-export * from "./runtime";
 export * as serialization from "./schemas";
diff --git a/src/core/runtime/index.ts b/src/core/runtime/index.ts
deleted file mode 100644
index 5c76dbb..0000000
--- a/src/core/runtime/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export { RUNTIME } from "./runtime";
diff --git a/src/core/runtime/runtime.ts b/src/core/runtime/runtime.ts
deleted file mode 100644
index f0692ab..0000000
--- a/src/core/runtime/runtime.ts
+++ /dev/null
@@ -1,112 +0,0 @@
-interface DenoGlobal {
-    version: {
-        deno: string;
-    };
-}
-
-interface BunGlobal {
-    version: string;
-}
-
-declare const Deno: DenoGlobal;
-declare const Bun: BunGlobal;
-
-/**
- * A constant that indicates whether the environment the code is running is a Web Browser.
- */
-const isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined";
-
-/**
- * A constant that indicates whether the environment the code is running is a Web Worker.
- */
-const isWebWorker =
-    typeof self === "object" &&
-    // @ts-ignore
-    typeof self?.importScripts === "function" &&
-    (self.constructor?.name === "DedicatedWorkerGlobalScope" ||
-        self.constructor?.name === "ServiceWorkerGlobalScope" ||
-        self.constructor?.name === "SharedWorkerGlobalScope");
-
-/**
- * A constant that indicates whether the environment the code is running is Deno.
- */
-const isDeno =
-    typeof Deno !== "undefined" && typeof Deno.version !== "undefined" && typeof Deno.version.deno !== "undefined";
-
-/**
- * A constant that indicates whether the environment the code is running is Bun.sh.
- */
-const isBun = typeof Bun !== "undefined" && typeof Bun.version !== "undefined";
-
-/**
- * A constant that indicates whether the environment the code is running is Node.JS.
- */
-const isNode =
-    typeof process !== "undefined" &&
-    Boolean(process.version) &&
-    Boolean(process.versions?.node) &&
-    // Deno spoofs process.versions.node, see https://deno.land/std@0.177.0/node/process.ts?s=versions
-    !isDeno &&
-    !isBun;
-
-/**
- * A constant that indicates whether the environment the code is running is in React-Native.
- * https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Core/setUpNavigator.js
- */
-const isReactNative = typeof navigator !== "undefined" && navigator?.product === "ReactNative";
-
-/**
- * A constant that indicates which environment and version the SDK is running in.
- */
-export const RUNTIME: Runtime = evaluateRuntime();
-
-export interface Runtime {
-    type: "browser" | "web-worker" | "deno" | "bun" | "node" | "react-native" | "unknown";
-    version?: string;
-}
-
-function evaluateRuntime(): Runtime {
-    if (isBrowser) {
-        return {
-            type: "browser",
-            version: window.navigator.userAgent,
-        };
-    }
-
-    if (isWebWorker) {
-        return {
-            type: "web-worker",
-        };
-    }
-
-    if (isDeno) {
-        return {
-            type: "deno",
-            version: Deno.version.deno,
-        };
-    }
-
-    if (isBun) {
-        return {
-            type: "bun",
-            version: Bun.version,
-        };
-    }
-
-    if (isNode) {
-        return {
-            type: "node",
-            version: process.versions.node,
-        };
-    }
-
-    if (isReactNative) {
-        return {
-            type: "react-native",
-        };
-    }
-
-    return {
-        type: "unknown",
-    };
-}
diff --git a/src/core/schemas/builders/object/object.ts b/src/core/schemas/builders/object/object.ts
index 6427678..4abadfb 100644
--- a/src/core/schemas/builders/object/object.ts
+++ b/src/core/schemas/builders/object/object.ts
@@ -62,3 +62,3 @@ export function object<ParsedKeys extends string, T extends PropertySchemas<Pars
 
-                if (isSchemaRequired(valueSchema)) {
+                if (await isSchemaRequired(valueSchema)) {
                     requiredKeys.push(rawKey);
@@ -98,3 +98,3 @@ export function object<ParsedKeys extends string, T extends PropertySchemas<Pars
 
-                if (isSchemaRequired(valueSchema)) {
+                if (await isSchemaRequired(valueSchema)) {
                     requiredKeys.push(parsedKey as string);
@@ -319,8 +319,8 @@ async function validateAndTransformExtendedObject<PreTransformedExtension, Trans
 
-function isSchemaRequired(schema: Schema<any, any>): boolean {
-    return !isSchemaOptional(schema);
+async function isSchemaRequired(schema: Schema<any, any>): Promise<boolean> {
+    return !(await isSchemaOptional(schema));
 }
 
-function isSchemaOptional(schema: Schema<any, any>): boolean {
-    switch (schema.getType()) {
+async function isSchemaOptional(schema: Schema<any, any>): Promise<boolean> {
+    switch (await schema.getType()) {
         case SchemaType.ANY:
diff --git a/src/serialization/resources/accounts/index.ts b/src/serialization/resources/accounts/index.ts
deleted file mode 100644
index eea524d..0000000
--- a/src/serialization/resources/accounts/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export * from "./types";
diff --git a/src/serialization/resources/accounts/types/Account.ts b/src/serialization/resources/accounts/types/Account.ts
deleted file mode 100644
index 5c15899..0000000
--- a/src/serialization/resources/accounts/types/Account.ts
+++ /dev/null
@@ -1,42 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as serializers from "../../..";
-import * as Flatfile from "../../../../api";
-import * as core from "../../../../core";
-import { AccountId } from "../../commons/types/AccountId";
-import { AppId } from "../../commons/types/AppId";
-
-export const Account: core.serialization.ObjectSchema<serializers.Account.Raw, Flatfile.Account> =
-    core.serialization.object({
-        id: AccountId,
-        name: core.serialization.string(),
-        subdomain: core.serialization.string().optional(),
-        vanityDomainDashboard: core.serialization.string().optional(),
-        vanityDomainSpaces: core.serialization.string().optional(),
-        embeddedDomainWhitelist: core.serialization.list(core.serialization.string()).optional(),
-        customFromEmail: core.serialization.string().optional(),
-        stripeCustomerId: core.serialization.string().optional(),
-        metadata: core.serialization.record(core.serialization.string(), core.serialization.any()),
-        createdAt: core.serialization.date(),
-        updatedAt: core.serialization.date(),
-        defaultAppId: AppId.optional(),
-    });
-
-export declare namespace Account {
-    interface Raw {
-        id: AccountId.Raw;
-        name: string;
-        subdomain?: string | null;
-        vanityDomainDashboard?: string | null;
-        vanityDomainSpaces?: string | null;
-        embeddedDomainWhitelist?: string[] | null;
-        customFromEmail?: string | null;
-        stripeCustomerId?: string | null;
-        metadata: Record<string, any>;
-        createdAt: string;
-        updatedAt: string;
-        defaultAppId?: AppId.Raw | null;
-    }
-}
diff --git a/src/serialization/resources/accounts/types/AccountPatch.ts b/src/serialization/resources/accounts/types/AccountPatch.ts
deleted file mode 100644
index 303acb8..0000000
--- a/src/serialization/resources/accounts/types/AccountPatch.ts
+++ /dev/null
@@ -1,19 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as serializers from "../../..";
-import * as Flatfile from "../../../../api";
-import * as core from "../../../../core";
-import { AppId } from "../../commons/types/AppId";
-
-export const AccountPatch: core.serialization.ObjectSchema<serializers.AccountPatch.Raw, Flatfile.AccountPatch> =
-    core.serialization.object({
-        defaultAppId: AppId,
-    });
-
-export declare namespace AccountPatch {
-    interface Raw {
-        defaultAppId: AppId.Raw;
-    }
-}
diff --git a/src/serialization/resources/accounts/types/AccountResponse.ts b/src/serialization/resources/accounts/types/AccountResponse.ts
deleted file mode 100644
index b47563f..0000000
--- a/src/serialization/resources/accounts/types/AccountResponse.ts
+++ /dev/null
@@ -1,21 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as serializers from "../../..";
-import * as Flatfile from "../../../../api";
-import * as core from "../../../../core";
-import { Account } from "./Account";
-
-export const AccountResponse: core.serialization.ObjectSchema<
-    serializers.AccountResponse.Raw,
-    Flatfile.AccountResponse
-> = core.serialization.object({
-    data: Account,
-});
-
-export declare namespace AccountResponse {
-    interface Raw {
-        data: Account.Raw;
-    }
-}
diff --git a/src/serialization/resources/accounts/types/index.ts b/src/serialization/resources/accounts/types/index.ts
deleted file mode 100644
index 0f9ca2c..0000000
--- a/src/serialization/resources/accounts/types/index.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-export * from "./AccountResponse";
-export * from "./Account";
-export * from "./AccountPatch";
diff --git a/src/serialization/resources/agents/types/Agent.ts b/src/serialization/resources/agents/types/Agent.ts
index bbd9bfd..a9ef4c1 100644
--- a/src/serialization/resources/agents/types/Agent.ts
+++ b/src/serialization/resources/agents/types/Agent.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { AgentId } from "../../commons/types/AgentId";
-import { AgentConfig } from "./AgentConfig";
 
@@ -12,9 +10,9 @@ export const Agent: core.serialization.ObjectSchema<serializers.Agent.Raw, Flatf
     .object({
-        id: AgentId,
+        id: core.serialization.lazy(async () => (await import("../../..")).AgentId),
     })
-    .extend(AgentConfig);
+    .extend(core.serialization.lazyObject(async () => (await import("../../..")).AgentConfig));
 
 export declare namespace Agent {
-    interface Raw extends AgentConfig.Raw {
-        id: AgentId.Raw;
+    interface Raw extends serializers.AgentConfig.Raw {
+        id: serializers.AgentId.Raw;
     }
diff --git a/src/serialization/resources/agents/types/AgentConfig.ts b/src/serialization/resources/agents/types/AgentConfig.ts
index a9a2ded..9ebc197 100644
--- a/src/serialization/resources/agents/types/AgentConfig.ts
+++ b/src/serialization/resources/agents/types/AgentConfig.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { EventTopic } from "../../events/types/EventTopic";
-import { Compiler } from "./Compiler";
 
@@ -12,6 +10,7 @@ export const AgentConfig: core.serialization.ObjectSchema<serializers.AgentConfi
     core.serialization.object({
-        topics: core.serialization.list(EventTopic).optional(),
-        compiler: Compiler.optional(),
+        topics: core.serialization
+            .list(core.serialization.lazy(async () => (await import("../../..")).EventTopic))
+            .optional(),
+        compiler: core.serialization.lazy(async () => (await import("../../..")).Compiler).optional(),
         source: core.serialization.string().optional(),
-        slug: core.serialization.string().optional(),
     });
@@ -20,6 +19,5 @@ export declare namespace AgentConfig {
     interface Raw {
-        topics?: EventTopic.Raw[] | null;
-        compiler?: Compiler.Raw | null;
+        topics?: serializers.EventTopic.Raw[] | null;
+        compiler?: serializers.Compiler.Raw | null;
         source?: string | null;
-        slug?: string | null;
     }
diff --git a/src/serialization/resources/agents/types/AgentLog.ts b/src/serialization/resources/agents/types/AgentLog.ts
index 227c9b6..7ca1b75 100644
--- a/src/serialization/resources/agents/types/AgentLog.ts
+++ b/src/serialization/resources/agents/types/AgentLog.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { EventId } from "../../commons/types/EventId";
 
@@ -11,3 +10,3 @@ export const AgentLog: core.serialization.ObjectSchema<serializers.AgentLog.Raw,
     core.serialization.object({
-        eventId: EventId,
+        eventId: core.serialization.lazy(async () => (await import("../../..")).EventId),
         success: core.serialization.boolean(),
@@ -20,3 +19,3 @@ export declare namespace AgentLog {
     interface Raw {
-        eventId: EventId.Raw;
+        eventId: serializers.EventId.Raw;
         success: boolean;
diff --git a/src/serialization/resources/agents/types/AgentResponse.ts b/src/serialization/resources/agents/types/AgentResponse.ts
index 30204e5..f301e76 100644
--- a/src/serialization/resources/agents/types/AgentResponse.ts
+++ b/src/serialization/resources/agents/types/AgentResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Agent } from "./Agent";
 
@@ -11,3 +10,3 @@ export const AgentResponse: core.serialization.ObjectSchema<serializers.AgentRes
     core.serialization.object({
-        data: Agent.optional(),
+        data: core.serialization.lazyObject(async () => (await import("../../..")).Agent).optional(),
     });
@@ -16,3 +15,3 @@ export declare namespace AgentResponse {
     interface Raw {
-        data?: Agent.Raw | null;
+        data?: serializers.Agent.Raw | null;
     }
diff --git a/src/serialization/resources/agents/types/DetailedAgentLog.ts b/src/serialization/resources/agents/types/DetailedAgentLog.ts
index 483f5aa..5e6e060 100644
--- a/src/serialization/resources/agents/types/DetailedAgentLog.ts
+++ b/src/serialization/resources/agents/types/DetailedAgentLog.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { EventId } from "../../commons/types/EventId";
 
@@ -13,3 +12,3 @@ export const DetailedAgentLog: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    eventId: EventId,
+    eventId: core.serialization.lazy(async () => (await import("../../..")).EventId),
     success: core.serialization.boolean(),
@@ -25,3 +24,3 @@ export declare namespace DetailedAgentLog {
     interface Raw {
-        eventId: EventId.Raw;
+        eventId: serializers.EventId.Raw;
         success: boolean;
diff --git a/src/serialization/resources/agents/types/Execution.ts b/src/serialization/resources/agents/types/Execution.ts
index af424f7..ce7585f 100644
--- a/src/serialization/resources/agents/types/Execution.ts
+++ b/src/serialization/resources/agents/types/Execution.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { EventId } from "../../commons/types/EventId";
 
@@ -11,3 +10,3 @@ export const Execution: core.serialization.ObjectSchema<serializers.Execution.Ra
     core.serialization.object({
-        eventId: EventId,
+        eventId: core.serialization.lazy(async () => (await import("../../..")).EventId),
         success: core.serialization.boolean(),
@@ -21,3 +20,3 @@ export declare namespace Execution {
     interface Raw {
-        eventId: EventId.Raw;
+        eventId: serializers.EventId.Raw;
         success: boolean;
diff --git a/src/serialization/resources/agents/types/GetAgentLogsResponse.ts b/src/serialization/resources/agents/types/GetAgentLogsResponse.ts
index 6d5d01b..7db2427 100644
--- a/src/serialization/resources/agents/types/GetAgentLogsResponse.ts
+++ b/src/serialization/resources/agents/types/GetAgentLogsResponse.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Pagination } from "../../commons/types/Pagination";
-import { AgentLog } from "./AgentLog";
 
@@ -14,4 +12,6 @@ export const GetAgentLogsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    pagination: Pagination.optional(),
-    data: core.serialization.list(AgentLog).optional(),
+    pagination: core.serialization.lazyObject(async () => (await import("../../..")).Pagination).optional(),
+    data: core.serialization
+        .list(core.serialization.lazyObject(async () => (await import("../../..")).AgentLog))
+        .optional(),
 });
@@ -20,4 +20,4 @@ export declare namespace GetAgentLogsResponse {
     interface Raw {
-        pagination?: Pagination.Raw | null;
-        data?: AgentLog.Raw[] | null;
+        pagination?: serializers.Pagination.Raw | null;
+        data?: serializers.AgentLog.Raw[] | null;
     }
diff --git a/src/serialization/resources/agents/types/GetDetailedAgentLogResponse.ts b/src/serialization/resources/agents/types/GetDetailedAgentLogResponse.ts
index 19d38b2..6286bee 100644
--- a/src/serialization/resources/agents/types/GetDetailedAgentLogResponse.ts
+++ b/src/serialization/resources/agents/types/GetDetailedAgentLogResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { DetailedAgentLog } from "./DetailedAgentLog";
 
@@ -13,3 +12,3 @@ export const GetDetailedAgentLogResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: DetailedAgentLog,
+    data: core.serialization.lazyObject(async () => (await import("../../..")).DetailedAgentLog),
 });
@@ -18,3 +17,3 @@ export declare namespace GetDetailedAgentLogResponse {
     interface Raw {
-        data: DetailedAgentLog.Raw;
+        data: serializers.DetailedAgentLog.Raw;
     }
diff --git a/src/serialization/resources/agents/types/GetDetailedAgentLogsResponse.ts b/src/serialization/resources/agents/types/GetDetailedAgentLogsResponse.ts
index 69924a0..ca07416 100644
--- a/src/serialization/resources/agents/types/GetDetailedAgentLogsResponse.ts
+++ b/src/serialization/resources/agents/types/GetDetailedAgentLogsResponse.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Pagination } from "../../commons/types/Pagination";
-import { DetailedAgentLog } from "./DetailedAgentLog";
 
@@ -14,4 +12,6 @@ export const GetDetailedAgentLogsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    pagination: Pagination.optional(),
-    data: core.serialization.list(DetailedAgentLog),
+    pagination: core.serialization.lazyObject(async () => (await import("../../..")).Pagination).optional(),
+    data: core.serialization.list(
+        core.serialization.lazyObject(async () => (await import("../../..")).DetailedAgentLog)
+    ),
 });
@@ -20,4 +20,4 @@ export declare namespace GetDetailedAgentLogsResponse {
     interface Raw {
-        pagination?: Pagination.Raw | null;
-        data: DetailedAgentLog.Raw[];
+        pagination?: serializers.Pagination.Raw | null;
+        data: serializers.DetailedAgentLog.Raw[];
     }
diff --git a/src/serialization/resources/agents/types/GetExecutionsResponse.ts b/src/serialization/resources/agents/types/GetExecutionsResponse.ts
index 76e69a4..e51eccd 100644
--- a/src/serialization/resources/agents/types/GetExecutionsResponse.ts
+++ b/src/serialization/resources/agents/types/GetExecutionsResponse.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Pagination } from "../../commons/types/Pagination";
-import { Execution } from "./Execution";
 
@@ -14,4 +12,4 @@ export const GetExecutionsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    pagination: Pagination.optional(),
-    data: core.serialization.list(Execution),
+    pagination: core.serialization.lazyObject(async () => (await import("../../..")).Pagination).optional(),
+    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Execution)),
 });
@@ -20,4 +18,4 @@ export declare namespace GetExecutionsResponse {
     interface Raw {
-        pagination?: Pagination.Raw | null;
-        data: Execution.Raw[];
+        pagination?: serializers.Pagination.Raw | null;
+        data: serializers.Execution.Raw[];
     }
diff --git a/src/serialization/resources/agents/types/ListAgentsResponse.ts b/src/serialization/resources/agents/types/ListAgentsResponse.ts
index 911337b..de02f67 100644
--- a/src/serialization/resources/agents/types/ListAgentsResponse.ts
+++ b/src/serialization/resources/agents/types/ListAgentsResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Agent } from "./Agent";
 
@@ -13,3 +12,5 @@ export const ListAgentsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(Agent).optional(),
+    data: core.serialization
+        .list(core.serialization.lazyObject(async () => (await import("../../..")).Agent))
+        .optional(),
 });
@@ -18,3 +19,3 @@ export declare namespace ListAgentsResponse {
     interface Raw {
-        data?: Agent.Raw[] | null;
+        data?: serializers.Agent.Raw[] | null;
     }
diff --git a/src/serialization/resources/apps/types/App.ts b/src/serialization/resources/apps/types/App.ts
index 42dff50..baa0e8b 100644
--- a/src/serialization/resources/apps/types/App.ts
+++ b/src/serialization/resources/apps/types/App.ts
@@ -7,10 +7,8 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { AppId } from "../../commons/types/AppId";
-import { AppType } from "./AppType";
 
 export const App: core.serialization.ObjectSchema<serializers.App.Raw, Flatfile.App> = core.serialization.object({
-    id: AppId,
+    id: core.serialization.lazy(async () => (await import("../../..")).AppId),
     name: core.serialization.string(),
     namespace: core.serialization.string(),
-    type: AppType,
+    type: core.serialization.lazy(async () => (await import("../../..")).AppType),
     entity: core.serialization.string(),
@@ -19,3 +17,2 @@ export const App: core.serialization.ObjectSchema<serializers.App.Raw, Flatfile.
     metadata: core.serialization.any(),
-    environmentFilters: core.serialization.any(),
     createdAt: core.serialization.date(),
@@ -28,6 +25,6 @@ export declare namespace App {
     interface Raw {
-        id: AppId.Raw;
+        id: serializers.AppId.Raw;
         name: string;
         namespace: string;
-        type: AppType.Raw;
+        type: serializers.AppType.Raw;
         entity: string;
@@ -36,3 +33,2 @@ export declare namespace App {
         metadata?: any;
-        environmentFilters?: any;
         createdAt: string;
diff --git a/src/serialization/resources/apps/types/AppCreate.ts b/src/serialization/resources/apps/types/AppCreate.ts
index 56c3a52..556c270 100644
--- a/src/serialization/resources/apps/types/AppCreate.ts
+++ b/src/serialization/resources/apps/types/AppCreate.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { AppType } from "./AppType";
 
@@ -13,3 +12,3 @@ export const AppCreate: core.serialization.ObjectSchema<serializers.AppCreate.Ra
         namespace: core.serialization.string(),
-        type: AppType,
+        type: core.serialization.lazy(async () => (await import("../../..")).AppType),
         entity: core.serialization.string().optional(),
@@ -18,3 +17,2 @@ export const AppCreate: core.serialization.ObjectSchema<serializers.AppCreate.Ra
         metadata: core.serialization.any().optional(),
-        environmentFilters: core.serialization.any().optional(),
     });
@@ -25,3 +23,3 @@ export declare namespace AppCreate {
         namespace: string;
-        type: AppType.Raw;
+        type: serializers.AppType.Raw;
         entity?: string | null;
@@ -30,3 +28,2 @@ export declare namespace AppCreate {
         metadata?: any | null;
-        environmentFilters?: any | null;
     }
diff --git a/src/serialization/resources/apps/types/AppPatch.ts b/src/serialization/resources/apps/types/AppPatch.ts
index 34c7942..f81114f 100644
--- a/src/serialization/resources/apps/types/AppPatch.ts
+++ b/src/serialization/resources/apps/types/AppPatch.ts
@@ -16,3 +16,2 @@ export const AppPatch: core.serialization.ObjectSchema<serializers.AppPatch.Raw,
         metadata: core.serialization.any().optional(),
-        environmentFilters: core.serialization.any().optional(),
         activatedAt: core.serialization.date().optional(),
@@ -28,3 +27,2 @@ export declare namespace AppPatch {
         metadata?: any | null;
-        environmentFilters?: any | null;
         activatedAt?: string | null;
diff --git a/src/serialization/resources/apps/types/AppResponse.ts b/src/serialization/resources/apps/types/AppResponse.ts
index b368af1..6f3b608 100644
--- a/src/serialization/resources/apps/types/AppResponse.ts
+++ b/src/serialization/resources/apps/types/AppResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { App } from "./App";
 
@@ -11,3 +10,3 @@ export const AppResponse: core.serialization.ObjectSchema<serializers.AppRespons
     core.serialization.object({
-        data: App,
+        data: core.serialization.lazyObject(async () => (await import("../../..")).App),
     });
@@ -16,3 +15,3 @@ export declare namespace AppResponse {
     interface Raw {
-        data: App.Raw;
+        data: serializers.App.Raw;
     }
diff --git a/src/serialization/resources/apps/types/AppsResponse.ts b/src/serialization/resources/apps/types/AppsResponse.ts
index e778d68..fb686c0 100644
--- a/src/serialization/resources/apps/types/AppsResponse.ts
+++ b/src/serialization/resources/apps/types/AppsResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { App } from "./App";
 
@@ -11,3 +10,3 @@ export const AppsResponse: core.serialization.ObjectSchema<serializers.AppsRespo
     core.serialization.object({
-        data: core.serialization.list(App),
+        data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).App)),
     });
@@ -16,3 +15,3 @@ export declare namespace AppsResponse {
     interface Raw {
-        data: App.Raw[];
+        data: serializers.App.Raw[];
     }
diff --git a/src/serialization/resources/assistant/index.ts b/src/serialization/resources/assistant/index.ts
deleted file mode 100644
index eea524d..0000000
--- a/src/serialization/resources/assistant/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export * from "./types";
diff --git a/src/serialization/resources/assistant/types/Prompt.ts b/src/serialization/resources/assistant/types/Prompt.ts
deleted file mode 100644
index 970bff8..0000000
--- a/src/serialization/resources/assistant/types/Prompt.ts
+++ /dev/null
@@ -1,32 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as serializers from "../../..";
-import * as Flatfile from "../../../../api";
-import * as core from "../../../../core";
-import { PromptId } from "../../commons/types/PromptId";
-import { AccountId } from "../../commons/types/AccountId";
-
-export const Prompt: core.serialization.ObjectSchema<serializers.Prompt.Raw, Flatfile.Prompt> =
-    core.serialization.object({
-        id: PromptId,
-        createdById: core.serialization.string(),
-        accountId: AccountId,
-        prompt: core.serialization.string(),
-        createdAt: core.serialization.date(),
-        updatedAt: core.serialization.date(),
-        deletedAt: core.serialization.date().optional(),
-    });
-
-export declare namespace Prompt {
-    interface Raw {
-        id: PromptId.Raw;
-        createdById: string;
-        accountId: AccountId.Raw;
-        prompt: string;
-        createdAt: string;
-        updatedAt: string;
-        deletedAt?: string | null;
-    }
-}
diff --git a/src/serialization/resources/assistant/types/PromptCreate.ts b/src/serialization/resources/assistant/types/PromptCreate.ts
deleted file mode 100644
index 38950d0..0000000
--- a/src/serialization/resources/assistant/types/PromptCreate.ts
+++ /dev/null
@@ -1,18 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as serializers from "../../..";
-import * as Flatfile from "../../../../api";
-import * as core from "../../../../core";
-
-export const PromptCreate: core.serialization.ObjectSchema<serializers.PromptCreate.Raw, Flatfile.PromptCreate> =
-    core.serialization.object({
-        prompt: core.serialization.string(),
-    });
-
-export declare namespace PromptCreate {
-    interface Raw {
-        prompt: string;
-    }
-}
diff --git a/src/serialization/resources/assistant/types/PromptPatch.ts b/src/serialization/resources/assistant/types/PromptPatch.ts
deleted file mode 100644
index 2b1ede6..0000000
--- a/src/serialization/resources/assistant/types/PromptPatch.ts
+++ /dev/null
@@ -1,18 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as serializers from "../../..";
-import * as Flatfile from "../../../../api";
-import * as core from "../../../../core";
-
-export const PromptPatch: core.serialization.ObjectSchema<serializers.PromptPatch.Raw, Flatfile.PromptPatch> =
-    core.serialization.object({
-        prompt: core.serialization.string().optional(),
-    });
-
-export declare namespace PromptPatch {
-    interface Raw {
-        prompt?: string | null;
-    }
-}
diff --git a/src/serialization/resources/assistant/types/PromptResponse.ts b/src/serialization/resources/assistant/types/PromptResponse.ts
deleted file mode 100644
index ae87c84..0000000
--- a/src/serialization/resources/assistant/types/PromptResponse.ts
+++ /dev/null
@@ -1,19 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as serializers from "../../..";
-import * as Flatfile from "../../../../api";
-import * as core from "../../../../core";
-import { Prompt } from "./Prompt";
-
-export const PromptResponse: core.serialization.ObjectSchema<serializers.PromptResponse.Raw, Flatfile.PromptResponse> =
-    core.serialization.object({
-        data: Prompt,
-    });
-
-export declare namespace PromptResponse {
-    interface Raw {
-        data: Prompt.Raw;
-    }
-}
diff --git a/src/serialization/resources/assistant/types/PromptsResponse.ts b/src/serialization/resources/assistant/types/PromptsResponse.ts
deleted file mode 100644
index 9821a6b..0000000
--- a/src/serialization/resources/assistant/types/PromptsResponse.ts
+++ /dev/null
@@ -1,24 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as serializers from "../../..";
-import * as Flatfile from "../../../../api";
-import * as core from "../../../../core";
-import { Pagination } from "../../commons/types/Pagination";
-import { Prompt } from "./Prompt";
-
-export const PromptsResponse: core.serialization.ObjectSchema<
-    serializers.PromptsResponse.Raw,
-    Flatfile.PromptsResponse
-> = core.serialization.object({
-    pagination: Pagination.optional(),
-    data: core.serialization.list(Prompt),
-});
-
-export declare namespace PromptsResponse {
-    interface Raw {
-        pagination?: Pagination.Raw | null;
-        data: Prompt.Raw[];
-    }
-}
diff --git a/src/serialization/resources/assistant/types/index.ts b/src/serialization/resources/assistant/types/index.ts
deleted file mode 100644
index d296f59..0000000
--- a/src/serialization/resources/assistant/types/index.ts
+++ /dev/null
@@ -1,5 +0,0 @@
-export * from "./PromptsResponse";
-export * from "./PromptResponse";
-export * from "./PromptPatch";
-export * from "./PromptCreate";
-export * from "./Prompt";
diff --git a/src/serialization/resources/auth/types/ApiKey.ts b/src/serialization/resources/auth/types/ApiKey.ts
index a048302..939ad8d 100644
--- a/src/serialization/resources/auth/types/ApiKey.ts
+++ b/src/serialization/resources/auth/types/ApiKey.ts
@@ -7,8 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { ApiKeyId } from "./ApiKeyId";
-import { RawKey } from "./RawKey";
-import { ApiKeyType } from "./ApiKeyType";
-import { EnvironmentId } from "../../commons/types/EnvironmentId";
-import { AccountId } from "../../commons/types/AccountId";
-import { ApiKeyOperation } from "./ApiKeyOperation";
 
@@ -16,8 +10,10 @@ export const ApiKey: core.serialization.ObjectSchema<serializers.ApiKey.Raw, Fla
     core.serialization.object({
-        id: ApiKeyId,
-        rawKey: RawKey.optional(),
-        type: ApiKeyType,
-        environmentId: EnvironmentId.optional(),
-        accountId: AccountId.optional(),
-        operations: core.serialization.list(ApiKeyOperation),
+        id: core.serialization.lazy(async () => (await import("../../..")).ApiKeyId),
+        rawKey: core.serialization.lazy(async () => (await import("../../..")).RawKey).optional(),
+        type: core.serialization.lazy(async () => (await import("../../..")).ApiKeyType),
+        environmentId: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId).optional(),
+        accountId: core.serialization.lazy(async () => (await import("../../..")).AccountId).optional(),
+        operations: core.serialization.list(
+            core.serialization.lazyObject(async () => (await import("../../..")).ApiKeyOperation)
+        ),
         createdAt: core.serialization.date(),
@@ -30,8 +26,8 @@ export declare namespace ApiKey {
     interface Raw {
-        id: ApiKeyId.Raw;
-        rawKey?: RawKey.Raw | null;
-        type: ApiKeyType.Raw;
-        environmentId?: EnvironmentId.Raw | null;
-        accountId?: AccountId.Raw | null;
-        operations: ApiKeyOperation.Raw[];
+        id: serializers.ApiKeyId.Raw;
+        rawKey?: serializers.RawKey.Raw | null;
+        type: serializers.ApiKeyType.Raw;
+        environmentId?: serializers.EnvironmentId.Raw | null;
+        accountId?: serializers.AccountId.Raw | null;
+        operations: serializers.ApiKeyOperation.Raw[];
         createdAt: string;
diff --git a/src/serialization/resources/auth/types/ApiKeysResponse.ts b/src/serialization/resources/auth/types/ApiKeysResponse.ts
index 0d016a7..af686f9 100644
--- a/src/serialization/resources/auth/types/ApiKeysResponse.ts
+++ b/src/serialization/resources/auth/types/ApiKeysResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { ApiKey } from "./ApiKey";
 
@@ -13,3 +12,3 @@ export const ApiKeysResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(ApiKey),
+    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).ApiKey)),
 });
@@ -18,3 +17,3 @@ export declare namespace ApiKeysResponse {
     interface Raw {
-        data: ApiKey.Raw[];
+        data: serializers.ApiKey.Raw[];
     }
diff --git a/src/serialization/resources/auth/types/Credentials.ts b/src/serialization/resources/auth/types/Credentials.ts
index 9ab3ccc..57ba6ba 100644
--- a/src/serialization/resources/auth/types/Credentials.ts
+++ b/src/serialization/resources/auth/types/Credentials.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { UserCredentials } from "./UserCredentials";
-import { ApiCredentials } from "./ApiCredentials";
 
@@ -13,4 +11,4 @@ export const Credentials: core.serialization.Schema<serializers.Credentials.Raw,
         .union("type", {
-            userCredentials: UserCredentials,
-            apiCredentials: ApiCredentials,
+            userCredentials: core.serialization.lazyObject(async () => (await import("../../..")).UserCredentials),
+            apiCredentials: core.serialization.lazyObject(async () => (await import("../../..")).ApiCredentials),
         })
@@ -24,3 +22,3 @@ export declare namespace Credentials {
 
-    interface UserCredentials extends UserCredentials.Raw {
+    interface UserCredentials extends serializers.UserCredentials.Raw {
         type: "userCredentials";
@@ -28,3 +26,3 @@ export declare namespace Credentials {
 
-    interface ApiCredentials extends ApiCredentials.Raw {
+    interface ApiCredentials extends serializers.ApiCredentials.Raw {
         type: "apiCredentials";
diff --git a/src/serialization/resources/cells/types/CellValueWithCountsDeprecated.ts b/src/serialization/resources/cells/types/CellValueWithCountsDeprecated.ts
index bec2ed6..42ec382 100644
--- a/src/serialization/resources/cells/types/CellValueWithCountsDeprecated.ts
+++ b/src/serialization/resources/cells/types/CellValueWithCountsDeprecated.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { RecordCounts } from "../../records/types/RecordCounts";
-import { CellValue } from "../../records/types/CellValue";
 
@@ -15,9 +13,9 @@ export const CellValueWithCountsDeprecated: core.serialization.ObjectSchema<
     .object({
-        counts: RecordCounts.optional(),
+        counts: core.serialization.lazyObject(async () => (await import("../../..")).RecordCounts).optional(),
     })
-    .extend(CellValue);
+    .extend(core.serialization.lazyObject(async () => (await import("../../..")).CellValue));
 
 export declare namespace CellValueWithCountsDeprecated {
-    interface Raw extends CellValue.Raw {
-        counts?: RecordCounts.Raw | null;
+    interface Raw extends serializers.CellValue.Raw {
+        counts?: serializers.RecordCounts.Raw | null;
     }
diff --git a/src/serialization/resources/cells/types/CellsResponseDataDeprecated.ts b/src/serialization/resources/cells/types/CellsResponseDataDeprecated.ts
index 63db296..312d5d8 100644
--- a/src/serialization/resources/cells/types/CellsResponseDataDeprecated.ts
+++ b/src/serialization/resources/cells/types/CellsResponseDataDeprecated.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { CellValueWithCountsDeprecated } from "./CellValueWithCountsDeprecated";
 
@@ -12,6 +11,11 @@ export const CellsResponseDataDeprecated: core.serialization.Schema<
     Flatfile.CellsResponseDataDeprecated
-> = core.serialization.record(core.serialization.string(), core.serialization.list(CellValueWithCountsDeprecated));
+> = core.serialization.record(
+    core.serialization.string(),
+    core.serialization.list(
+        core.serialization.lazyObject(async () => (await import("../../..")).CellValueWithCountsDeprecated)
+    )
+);
 
 export declare namespace CellsResponseDataDeprecated {
-    type Raw = Record<string, CellValueWithCountsDeprecated.Raw[]>;
+    type Raw = Record<string, serializers.CellValueWithCountsDeprecated.Raw[]>;
 }
diff --git a/src/serialization/resources/cells/types/CellsResponseDeprecated.ts b/src/serialization/resources/cells/types/CellsResponseDeprecated.ts
index 4994dae..d283ff9 100644
--- a/src/serialization/resources/cells/types/CellsResponseDeprecated.ts
+++ b/src/serialization/resources/cells/types/CellsResponseDeprecated.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { CellsResponseDataDeprecated } from "./CellsResponseDataDeprecated";
-import { CellValueWithCountsDeprecated } from "./CellValueWithCountsDeprecated";
 
@@ -14,3 +12,3 @@ export const CellsResponseDeprecated: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: CellsResponseDataDeprecated,
+    data: core.serialization.lazy(async () => (await import("../../..")).CellsResponseDataDeprecated),
 });
@@ -19,3 +17,3 @@ export declare namespace CellsResponseDeprecated {
     interface Raw {
-        data: CellsResponseDataDeprecated.Raw;
+        data: serializers.CellsResponseDataDeprecated.Raw;
     }
diff --git a/src/serialization/resources/commits/types/Commit.ts b/src/serialization/resources/commits/types/Commit.ts
index 7315cfd..6cdc734 100644
--- a/src/serialization/resources/commits/types/Commit.ts
+++ b/src/serialization/resources/commits/types/Commit.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { CommitId } from "../../commons/types/CommitId";
-import { SheetId } from "../../commons/types/SheetId";
 
@@ -12,4 +10,4 @@ export const Commit: core.serialization.ObjectSchema<serializers.Commit.Raw, Fla
     core.serialization.object({
-        id: CommitId,
-        sheetId: SheetId,
+        id: core.serialization.lazy(async () => (await import("../../..")).CommitId),
+        sheetId: core.serialization.lazy(async () => (await import("../../..")).SheetId),
         createdBy: core.serialization.string(),
@@ -22,4 +20,4 @@ export declare namespace Commit {
     interface Raw {
-        id: CommitId.Raw;
-        sheetId: SheetId.Raw;
+        id: serializers.CommitId.Raw;
+        sheetId: serializers.SheetId.Raw;
         createdBy: string;
diff --git a/src/serialization/resources/commits/types/CommitResponse.ts b/src/serialization/resources/commits/types/CommitResponse.ts
index 8aba11a..9569e4b 100644
--- a/src/serialization/resources/commits/types/CommitResponse.ts
+++ b/src/serialization/resources/commits/types/CommitResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Commit } from "./Commit";
 
@@ -11,3 +10,3 @@ export const CommitResponse: core.serialization.ObjectSchema<serializers.CommitR
     core.serialization.object({
-        data: Commit,
+        data: core.serialization.lazyObject(async () => (await import("../../..")).Commit),
     });
@@ -16,3 +15,3 @@ export declare namespace CommitResponse {
     interface Raw {
-        data: Commit.Raw;
+        data: serializers.Commit.Raw;
     }
diff --git a/src/serialization/resources/commits/types/ListCommitsResponse.ts b/src/serialization/resources/commits/types/ListCommitsResponse.ts
index 49c5bdd..b4dda47 100644
--- a/src/serialization/resources/commits/types/ListCommitsResponse.ts
+++ b/src/serialization/resources/commits/types/ListCommitsResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Commit } from "./Commit";
 
@@ -13,3 +12,3 @@ export const ListCommitsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(Commit),
+    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Commit)),
 });
@@ -18,3 +17,3 @@ export declare namespace ListCommitsResponse {
     interface Raw {
-        data: Commit.Raw[];
+        data: serializers.Commit.Raw[];
     }
diff --git a/src/serialization/resources/commons/types/AccessToken.ts b/src/serialization/resources/commons/types/AccessToken.ts
index 96f8240..36af432 100644
--- a/src/serialization/resources/commons/types/AccessToken.ts
+++ b/src/serialization/resources/commons/types/AccessToken.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { UserId } from "./UserId";
-import { AccountId } from "./AccountId";
 
@@ -16,4 +14,4 @@ export const AccessToken: core.serialization.ObjectSchema<serializers.AccessToke
         email: core.serialization.string().optional(),
-        userId: UserId.optional(),
-        accountId: AccountId.optional(),
+        userId: core.serialization.lazy(async () => (await import("../../..")).UserId).optional(),
+        accountId: core.serialization.lazy(async () => (await import("../../..")).AccountId).optional(),
     });
@@ -26,4 +24,4 @@ export declare namespace AccessToken {
         email?: string | null;
-        userId?: UserId.Raw | null;
-        accountId?: AccountId.Raw | null;
+        userId?: serializers.UserId.Raw | null;
+        accountId?: serializers.AccountId.Raw | null;
     }
diff --git a/src/serialization/resources/commons/types/Action.ts b/src/serialization/resources/commons/types/Action.ts
index 600618b..3f40e77 100644
--- a/src/serialization/resources/commons/types/Action.ts
+++ b/src/serialization/resources/commons/types/Action.ts
@@ -7,7 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { ActionMode } from "./ActionMode";
-import { ActionMessage } from "./ActionMessage";
-import { ActionSchedule } from "./ActionSchedule";
-import { InputForm } from "./InputForm";
-import { ActionConstraint } from "./ActionConstraint";
 
@@ -17,9 +12,11 @@ export const Action: core.serialization.ObjectSchema<serializers.Action.Raw, Fla
         operation: core.serialization.string().optional(),
-        mode: ActionMode.optional(),
+        mode: core.serialization.lazy(async () => (await import("../../..")).ActionMode).optional(),
         label: core.serialization.string(),
         tooltip: core.serialization.string().optional(),
-        messages: core.serialization.list(ActionMessage).optional(),
+        messages: core.serialization
+            .list(core.serialization.lazyObject(async () => (await import("../../..")).ActionMessage))
+            .optional(),
         type: core.serialization.string().optional(),
         description: core.serialization.string().optional(),
-        schedule: ActionSchedule.optional(),
+        schedule: core.serialization.lazy(async () => (await import("../../..")).ActionSchedule).optional(),
         primary: core.serialization.boolean().optional(),
@@ -29,4 +26,6 @@ export const Action: core.serialization.ObjectSchema<serializers.Action.Raw, Fla
         requireSelection: core.serialization.boolean().optional(),
-        inputForm: InputForm.optional(),
-        constraints: core.serialization.list(ActionConstraint).optional(),
+        inputForm: core.serialization.lazyObject(async () => (await import("../../..")).InputForm).optional(),
+        constraints: core.serialization
+            .list(core.serialization.lazyObject(async () => (await import("../../..")).ActionConstraint))
+            .optional(),
     });
@@ -37,9 +36,9 @@ export declare namespace Action {
         operation?: string | null;
-        mode?: ActionMode.Raw | null;
+        mode?: serializers.ActionMode.Raw | null;
         label: string;
         tooltip?: string | null;
-        messages?: ActionMessage.Raw[] | null;
+        messages?: serializers.ActionMessage.Raw[] | null;
         type?: string | null;
         description?: string | null;
-        schedule?: ActionSchedule.Raw | null;
+        schedule?: serializers.ActionSchedule.Raw | null;
         primary?: boolean | null;
@@ -49,4 +48,4 @@ export declare namespace Action {
         requireSelection?: boolean | null;
-        inputForm?: InputForm.Raw | null;
-        constraints?: ActionConstraint.Raw[] | null;
+        inputForm?: serializers.InputForm.Raw | null;
+        constraints?: serializers.ActionConstraint.Raw[] | null;
     }
diff --git a/src/serialization/resources/commons/types/ActionConstraint.ts b/src/serialization/resources/commons/types/ActionConstraint.ts
index c0a7f53..f2988c8 100644
--- a/src/serialization/resources/commons/types/ActionConstraint.ts
+++ b/src/serialization/resources/commons/types/ActionConstraint.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { ActionConstraintType } from "./ActionConstraintType";
 
@@ -13,3 +12,3 @@ export const ActionConstraint: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    type: ActionConstraintType,
+    type: core.serialization.lazy(async () => (await import("../../..")).ActionConstraintType),
 });
@@ -18,3 +17,3 @@ export declare namespace ActionConstraint {
     interface Raw {
-        type: ActionConstraintType.Raw;
+        type: serializers.ActionConstraintType.Raw;
     }
diff --git a/src/serialization/resources/commons/types/ActionMessage.ts b/src/serialization/resources/commons/types/ActionMessage.ts
index 82e1c9f..6fe3da8 100644
--- a/src/serialization/resources/commons/types/ActionMessage.ts
+++ b/src/serialization/resources/commons/types/ActionMessage.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { ActionMessageType } from "./ActionMessageType";
 
@@ -11,3 +10,3 @@ export const ActionMessage: core.serialization.ObjectSchema<serializers.ActionMe
     core.serialization.object({
-        type: ActionMessageType,
+        type: core.serialization.lazy(async () => (await import("../../..")).ActionMessageType),
         content: core.serialization.string(),
@@ -17,3 +16,3 @@ export declare namespace ActionMessage {
     interface Raw {
-        type: ActionMessageType.Raw;
+        type: serializers.ActionMessageType.Raw;
         content: string;
diff --git a/src/serialization/resources/commons/types/ActionMessageType.ts b/src/serialization/resources/commons/types/ActionMessageType.ts
index 1114e5f..6cb1238 100644
--- a/src/serialization/resources/commons/types/ActionMessageType.ts
+++ b/src/serialization/resources/commons/types/ActionMessageType.ts
@@ -11,6 +11,6 @@ export const ActionMessageType: core.serialization.Schema<
     Flatfile.ActionMessageType
-> = core.serialization.enum_(["error", "info"]);
+> = core.serialization.enum_(["success", "error", "warning", "info"]);
 
 export declare namespace ActionMessageType {
-    type Raw = "error" | "info";
+    type Raw = "success" | "error" | "warning" | "info";
 }
diff --git a/src/serialization/resources/commons/types/Errors.ts b/src/serialization/resources/commons/types/Errors.ts
index bb5171b..f154ca3 100644
--- a/src/serialization/resources/commons/types/Errors.ts
+++ b/src/serialization/resources/commons/types/Errors.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Error_ } from "./Error_";
 
@@ -11,3 +10,3 @@ export const Errors: core.serialization.ObjectSchema<serializers.Errors.Raw, Fla
     core.serialization.object({
-        errors: core.serialization.list(Error_),
+        errors: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Error_)),
     });
@@ -16,3 +15,3 @@ export declare namespace Errors {
     interface Raw {
-        errors: Error_.Raw[];
+        errors: serializers.Error_.Raw[];
     }
diff --git a/src/serialization/resources/commons/types/InputConfig.ts b/src/serialization/resources/commons/types/InputConfig.ts
index 4ee3b51..a461b10 100644
--- a/src/serialization/resources/commons/types/InputConfig.ts
+++ b/src/serialization/resources/commons/types/InputConfig.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { InputEnumPropertyOption } from "./InputEnumPropertyOption";
 
@@ -11,3 +10,5 @@ export const InputConfig: core.serialization.ObjectSchema<serializers.InputConfi
     core.serialization.object({
-        options: core.serialization.list(InputEnumPropertyOption),
+        options: core.serialization.list(
+            core.serialization.lazyObject(async () => (await import("../../..")).InputEnumPropertyOption)
+        ),
     });
@@ -16,3 +17,3 @@ export declare namespace InputConfig {
     interface Raw {
-        options: InputEnumPropertyOption.Raw[];
+        options: serializers.InputEnumPropertyOption.Raw[];
     }
diff --git a/src/serialization/resources/commons/types/InputConstraint.ts b/src/serialization/resources/commons/types/InputConstraint.ts
index 84f29cb..df71a16 100644
--- a/src/serialization/resources/commons/types/InputConstraint.ts
+++ b/src/serialization/resources/commons/types/InputConstraint.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { InputConstraintType } from "./InputConstraintType";
 
@@ -13,3 +12,3 @@ export const InputConstraint: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    type: InputConstraintType,
+    type: core.serialization.lazy(async () => (await import("../../..")).InputConstraintType),
 });
@@ -18,3 +17,3 @@ export declare namespace InputConstraint {
     interface Raw {
-        type: InputConstraintType.Raw;
+        type: serializers.InputConstraintType.Raw;
     }
diff --git a/src/serialization/resources/commons/types/InputField.ts b/src/serialization/resources/commons/types/InputField.ts
index 66952dd..94b29bc 100644
--- a/src/serialization/resources/commons/types/InputField.ts
+++ b/src/serialization/resources/commons/types/InputField.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { InputConfig } from "./InputConfig";
-import { InputConstraint } from "./InputConstraint";
 
@@ -17,4 +15,6 @@ export const InputField: core.serialization.ObjectSchema<serializers.InputField.
         defaultValue: core.serialization.any().optional(),
-        config: InputConfig.optional(),
-        constraints: core.serialization.list(InputConstraint).optional(),
+        config: core.serialization.lazyObject(async () => (await import("../../..")).InputConfig).optional(),
+        constraints: core.serialization
+            .list(core.serialization.lazyObject(async () => (await import("../../..")).InputConstraint))
+            .optional(),
     });
@@ -28,4 +28,4 @@ export declare namespace InputField {
         defaultValue?: any | null;
-        config?: InputConfig.Raw | null;
-        constraints?: InputConstraint.Raw[] | null;
+        config?: serializers.InputConfig.Raw | null;
+        constraints?: serializers.InputConstraint.Raw[] | null;
     }
diff --git a/src/serialization/resources/commons/types/InputForm.ts b/src/serialization/resources/commons/types/InputForm.ts
index c4c469e..42bf905 100644
--- a/src/serialization/resources/commons/types/InputForm.ts
+++ b/src/serialization/resources/commons/types/InputForm.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { InputFormType } from "./InputFormType";
-import { InputField } from "./InputField";
 
@@ -12,4 +10,6 @@ export const InputForm: core.serialization.ObjectSchema<serializers.InputForm.Ra
     core.serialization.object({
-        type: InputFormType,
-        fields: core.serialization.list(InputField),
+        type: core.serialization.lazy(async () => (await import("../../..")).InputFormType),
+        fields: core.serialization.list(
+            core.serialization.lazyObject(async () => (await import("../../..")).InputField)
+        ),
     });
@@ -18,4 +18,4 @@ export declare namespace InputForm {
     interface Raw {
-        type: InputFormType.Raw;
-        fields: InputField.Raw[];
+        type: serializers.InputFormType.Raw;
+        fields: serializers.InputField.Raw[];
     }
diff --git a/src/serialization/resources/commons/types/PromptId.ts b/src/serialization/resources/commons/types/PromptId.ts
deleted file mode 100644
index 695182d..0000000
--- a/src/serialization/resources/commons/types/PromptId.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as serializers from "../../..";
-import * as Flatfile from "../../../../api";
-import * as core from "../../../../core";
-
-export const PromptId: core.serialization.Schema<serializers.PromptId.Raw, Flatfile.PromptId> =
-    core.serialization.string();
-
-export declare namespace PromptId {
-    type Raw = string;
-}
diff --git a/src/serialization/resources/commons/types/Success.ts b/src/serialization/resources/commons/types/Success.ts
index 6cedfa1..29191d6 100644
--- a/src/serialization/resources/commons/types/Success.ts
+++ b/src/serialization/resources/commons/types/Success.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { SuccessData } from "./SuccessData";
 
@@ -11,3 +10,3 @@ export const Success: core.serialization.ObjectSchema<serializers.Success.Raw, F
     core.serialization.object({
-        data: SuccessData.optional(),
+        data: core.serialization.lazyObject(async () => (await import("../../..")).SuccessData).optional(),
     });
@@ -16,3 +15,3 @@ export declare namespace Success {
     interface Raw {
-        data?: SuccessData.Raw | null;
+        data?: serializers.SuccessData.Raw | null;
     }
diff --git a/src/serialization/resources/commons/types/index.ts b/src/serialization/resources/commons/types/index.ts
index baa887d..d92ca92 100644
--- a/src/serialization/resources/commons/types/index.ts
+++ b/src/serialization/resources/commons/types/index.ts
@@ -24,3 +24,2 @@ export * from "./ProgramId";
 export * from "./FamilyId";
-export * from "./PromptId";
 export * from "./DataRetentionPolicyId";
diff --git a/src/serialization/resources/dataRetentionPolicies/types/DataRetentionPolicy.ts b/src/serialization/resources/dataRetentionPolicies/types/DataRetentionPolicy.ts
index c15c377..ff62d1b 100644
--- a/src/serialization/resources/dataRetentionPolicies/types/DataRetentionPolicy.ts
+++ b/src/serialization/resources/dataRetentionPolicies/types/DataRetentionPolicy.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { DataRetentionPolicyId } from "../../commons/types/DataRetentionPolicyId";
-import { DataRetentionPolicyConfig } from "./DataRetentionPolicyConfig";
 
@@ -15,3 +13,3 @@ export const DataRetentionPolicy: core.serialization.ObjectSchema<
     .object({
-        id: DataRetentionPolicyId,
+        id: core.serialization.lazy(async () => (await import("../../..")).DataRetentionPolicyId),
         createdAt: core.serialization.date(),
@@ -19,7 +17,7 @@ export const DataRetentionPolicy: core.serialization.ObjectSchema<
     })
-    .extend(DataRetentionPolicyConfig);
+    .extend(core.serialization.lazyObject(async () => (await import("../../..")).DataRetentionPolicyConfig));
 
 export declare namespace DataRetentionPolicy {
-    interface Raw extends DataRetentionPolicyConfig.Raw {
-        id: DataRetentionPolicyId.Raw;
+    interface Raw extends serializers.DataRetentionPolicyConfig.Raw {
+        id: serializers.DataRetentionPolicyId.Raw;
         createdAt: string;
diff --git a/src/serialization/resources/dataRetentionPolicies/types/DataRetentionPolicyConfig.ts b/src/serialization/resources/dataRetentionPolicies/types/DataRetentionPolicyConfig.ts
index 235e2f5..edbe89c 100644
--- a/src/serialization/resources/dataRetentionPolicies/types/DataRetentionPolicyConfig.ts
+++ b/src/serialization/resources/dataRetentionPolicies/types/DataRetentionPolicyConfig.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { DataRetentionPolicyEnum } from "./DataRetentionPolicyEnum";
-import { EnvironmentId } from "../../commons/types/EnvironmentId";
 
@@ -14,5 +12,5 @@ export const DataRetentionPolicyConfig: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    type: DataRetentionPolicyEnum,
+    type: core.serialization.lazy(async () => (await import("../../..")).DataRetentionPolicyEnum),
     period: core.serialization.number(),
-    environmentId: EnvironmentId,
+    environmentId: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId),
 });
@@ -21,5 +19,5 @@ export declare namespace DataRetentionPolicyConfig {
     interface Raw {
-        type: DataRetentionPolicyEnum.Raw;
+        type: serializers.DataRetentionPolicyEnum.Raw;
         period: number;
-        environmentId: EnvironmentId.Raw;
+        environmentId: serializers.EnvironmentId.Raw;
     }
diff --git a/src/serialization/resources/dataRetentionPolicies/types/DataRetentionPolicyResponse.ts b/src/serialization/resources/dataRetentionPolicies/types/DataRetentionPolicyResponse.ts
index fd78041..da57362 100644
--- a/src/serialization/resources/dataRetentionPolicies/types/DataRetentionPolicyResponse.ts
+++ b/src/serialization/resources/dataRetentionPolicies/types/DataRetentionPolicyResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { DataRetentionPolicy } from "./DataRetentionPolicy";
 
@@ -13,3 +12,3 @@ export const DataRetentionPolicyResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: DataRetentionPolicy,
+    data: core.serialization.lazyObject(async () => (await import("../../..")).DataRetentionPolicy),
 });
@@ -18,3 +17,3 @@ export declare namespace DataRetentionPolicyResponse {
     interface Raw {
-        data: DataRetentionPolicy.Raw;
+        data: serializers.DataRetentionPolicy.Raw;
     }
diff --git a/src/serialization/resources/dataRetentionPolicies/types/ListDataRetentionPoliciesResponse.ts b/src/serialization/resources/dataRetentionPolicies/types/ListDataRetentionPoliciesResponse.ts
index 811fb98..bb82dd4 100644
--- a/src/serialization/resources/dataRetentionPolicies/types/ListDataRetentionPoliciesResponse.ts
+++ b/src/serialization/resources/dataRetentionPolicies/types/ListDataRetentionPoliciesResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { DataRetentionPolicy } from "./DataRetentionPolicy";
 
@@ -13,3 +12,5 @@ export const ListDataRetentionPoliciesResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(DataRetentionPolicy),
+    data: core.serialization.list(
+        core.serialization.lazyObject(async () => (await import("../../..")).DataRetentionPolicy)
+    ),
 });
@@ -18,3 +19,3 @@ export declare namespace ListDataRetentionPoliciesResponse {
     interface Raw {
-        data: DataRetentionPolicy.Raw[];
+        data: serializers.DataRetentionPolicy.Raw[];
     }
diff --git a/src/serialization/resources/documents/types/Document.ts b/src/serialization/resources/documents/types/Document.ts
index 6be73b3..51bc0cc 100644
--- a/src/serialization/resources/documents/types/Document.ts
+++ b/src/serialization/resources/documents/types/Document.ts
@@ -7,6 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { DocumentId } from "../../commons/types/DocumentId";
-import { SpaceId } from "../../commons/types/SpaceId";
-import { EnvironmentId } from "../../commons/types/EnvironmentId";
-import { DocumentConfig } from "./DocumentConfig";
 
@@ -14,5 +10,5 @@ export const Document: core.serialization.ObjectSchema<serializers.Document.Raw,
     .object({
-        id: DocumentId,
-        spaceId: SpaceId.optional(),
-        environmentId: EnvironmentId.optional(),
+        id: core.serialization.lazy(async () => (await import("../../..")).DocumentId),
+        spaceId: core.serialization.lazy(async () => (await import("../../..")).SpaceId).optional(),
+        environmentId: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId).optional(),
         createdAt: core.serialization.date(),
@@ -20,9 +16,9 @@ export const Document: core.serialization.ObjectSchema<serializers.Document.Raw,
     })
-    .extend(DocumentConfig);
+    .extend(core.serialization.lazyObject(async () => (await import("../../..")).DocumentConfig));
 
 export declare namespace Document {
-    interface Raw extends DocumentConfig.Raw {
-        id: DocumentId.Raw;
-        spaceId?: SpaceId.Raw | null;
-        environmentId?: EnvironmentId.Raw | null;
+    interface Raw extends serializers.DocumentConfig.Raw {
+        id: serializers.DocumentId.Raw;
+        spaceId?: serializers.SpaceId.Raw | null;
+        environmentId?: serializers.EnvironmentId.Raw | null;
         createdAt: string;
diff --git a/src/serialization/resources/documents/types/DocumentConfig.ts b/src/serialization/resources/documents/types/DocumentConfig.ts
index a7b7c1d..64cc667 100644
--- a/src/serialization/resources/documents/types/DocumentConfig.ts
+++ b/src/serialization/resources/documents/types/DocumentConfig.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Action } from "../../commons/types/Action";
 
@@ -14,3 +13,5 @@ export const DocumentConfig: core.serialization.ObjectSchema<serializers.Documen
         treatments: core.serialization.list(core.serialization.string()).optional(),
-        actions: core.serialization.list(Action).optional(),
+        actions: core.serialization
+            .list(core.serialization.lazyObject(async () => (await import("../../..")).Action))
+            .optional(),
     });
@@ -22,3 +23,3 @@ export declare namespace DocumentConfig {
         treatments?: string[] | null;
-        actions?: Action.Raw[] | null;
+        actions?: serializers.Action.Raw[] | null;
     }
diff --git a/src/serialization/resources/documents/types/DocumentResponse.ts b/src/serialization/resources/documents/types/DocumentResponse.ts
index d7c207a..980edeb 100644
--- a/src/serialization/resources/documents/types/DocumentResponse.ts
+++ b/src/serialization/resources/documents/types/DocumentResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Document } from "./Document";
 
@@ -13,3 +12,3 @@ export const DocumentResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: Document,
+    data: core.serialization.lazyObject(async () => (await import("../../..")).Document),
 });
@@ -18,3 +17,3 @@ export declare namespace DocumentResponse {
     interface Raw {
-        data: Document.Raw;
+        data: serializers.Document.Raw;
     }
diff --git a/src/serialization/resources/documents/types/ListDocumentsResponse.ts b/src/serialization/resources/documents/types/ListDocumentsResponse.ts
index 6de1ff3..17eb9ad 100644
--- a/src/serialization/resources/documents/types/ListDocumentsResponse.ts
+++ b/src/serialization/resources/documents/types/ListDocumentsResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { DocumentResponse } from "./DocumentResponse";
 
@@ -13,3 +12,5 @@ export const ListDocumentsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(DocumentResponse),
+    data: core.serialization.list(
+        core.serialization.lazyObject(async () => (await import("../../..")).DocumentResponse)
+    ),
 });
@@ -18,3 +19,3 @@ export declare namespace ListDocumentsResponse {
     interface Raw {
-        data: DocumentResponse.Raw[];
+        data: serializers.DocumentResponse.Raw[];
     }
diff --git a/src/serialization/resources/entitlements/types/ListEntitlementsResponse.ts b/src/serialization/resources/entitlements/types/ListEntitlementsResponse.ts
index 0a05b48..1e5a59a 100644
--- a/src/serialization/resources/entitlements/types/ListEntitlementsResponse.ts
+++ b/src/serialization/resources/entitlements/types/ListEntitlementsResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Entitlement } from "./Entitlement";
 
@@ -13,3 +12,3 @@ export const ListEntitlementsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(Entitlement),
+    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Entitlement)),
 });
@@ -18,3 +17,3 @@ export declare namespace ListEntitlementsResponse {
     interface Raw {
-        data: Entitlement.Raw[];
+        data: serializers.Entitlement.Raw[];
     }
diff --git a/src/serialization/resources/environments/types/Environment.ts b/src/serialization/resources/environments/types/Environment.ts
index 80fb792..33280ca 100644
--- a/src/serialization/resources/environments/types/Environment.ts
+++ b/src/serialization/resources/environments/types/Environment.ts
@@ -7,5 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { EnvironmentId } from "../../commons/types/EnvironmentId";
-import { AccountId } from "../../commons/types/AccountId";
-import { GuestAuthenticationEnum } from "./GuestAuthenticationEnum";
 
@@ -13,7 +10,9 @@ export const Environment: core.serialization.ObjectSchema<serializers.Environmen
     core.serialization.object({
-        id: EnvironmentId,
-        accountId: AccountId,
+        id: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId),
+        accountId: core.serialization.lazy(async () => (await import("../../..")).AccountId),
         name: core.serialization.string(),
         isProd: core.serialization.boolean(),
-        guestAuthentication: core.serialization.list(GuestAuthenticationEnum),
+        guestAuthentication: core.serialization.list(
+            core.serialization.lazy(async () => (await import("../../..")).GuestAuthenticationEnum)
+        ),
         features: core.serialization.record(core.serialization.string(), core.serialization.any()),
@@ -27,7 +26,7 @@ export declare namespace Environment {
     interface Raw {
-        id: EnvironmentId.Raw;
-        accountId: AccountId.Raw;
+        id: serializers.EnvironmentId.Raw;
+        accountId: serializers.AccountId.Raw;
         name: string;
         isProd: boolean;
-        guestAuthentication: GuestAuthenticationEnum.Raw[];
+        guestAuthentication: serializers.GuestAuthenticationEnum.Raw[];
         features: Record<string, any>;
diff --git a/src/serialization/resources/environments/types/EnvironmentConfigCreate.ts b/src/serialization/resources/environments/types/EnvironmentConfigCreate.ts
index 96bd5d6..553c141 100644
--- a/src/serialization/resources/environments/types/EnvironmentConfigCreate.ts
+++ b/src/serialization/resources/environments/types/EnvironmentConfigCreate.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { GuestAuthenticationEnum } from "./GuestAuthenticationEnum";
 
@@ -15,3 +14,5 @@ export const EnvironmentConfigCreate: core.serialization.ObjectSchema<
     isProd: core.serialization.boolean(),
-    guestAuthentication: core.serialization.list(GuestAuthenticationEnum).optional(),
+    guestAuthentication: core.serialization
+        .list(core.serialization.lazy(async () => (await import("../../..")).GuestAuthenticationEnum))
+        .optional(),
     metadata: core.serialization.record(core.serialization.string(), core.serialization.any()).optional(),
@@ -26,3 +27,3 @@ export declare namespace EnvironmentConfigCreate {
         isProd: boolean;
-        guestAuthentication?: GuestAuthenticationEnum.Raw[] | null;
+        guestAuthentication?: serializers.GuestAuthenticationEnum.Raw[] | null;
         metadata?: Record<string, any> | null;
diff --git a/src/serialization/resources/environments/types/EnvironmentConfigUpdate.ts b/src/serialization/resources/environments/types/EnvironmentConfigUpdate.ts
index 2db4261..4f7008c 100644
--- a/src/serialization/resources/environments/types/EnvironmentConfigUpdate.ts
+++ b/src/serialization/resources/environments/types/EnvironmentConfigUpdate.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { GuestAuthenticationEnum } from "./GuestAuthenticationEnum";
 
@@ -15,3 +14,5 @@ export const EnvironmentConfigUpdate: core.serialization.ObjectSchema<
     isProd: core.serialization.boolean().optional(),
-    guestAuthentication: core.serialization.list(GuestAuthenticationEnum).optional(),
+    guestAuthentication: core.serialization
+        .list(core.serialization.lazy(async () => (await import("../../..")).GuestAuthenticationEnum))
+        .optional(),
     metadata: core.serialization.record(core.serialization.string(), core.serialization.any()).optional(),
@@ -26,3 +27,3 @@ export declare namespace EnvironmentConfigUpdate {
         isProd?: boolean | null;
-        guestAuthentication?: GuestAuthenticationEnum.Raw[] | null;
+        guestAuthentication?: serializers.GuestAuthenticationEnum.Raw[] | null;
         metadata?: Record<string, any> | null;
diff --git a/src/serialization/resources/environments/types/EnvironmentResponse.ts b/src/serialization/resources/environments/types/EnvironmentResponse.ts
index d18af70..8dc0231 100644
--- a/src/serialization/resources/environments/types/EnvironmentResponse.ts
+++ b/src/serialization/resources/environments/types/EnvironmentResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Environment } from "./Environment";
 
@@ -13,3 +12,3 @@ export const EnvironmentResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: Environment,
+    data: core.serialization.lazyObject(async () => (await import("../../..")).Environment),
 });
@@ -18,3 +17,3 @@ export declare namespace EnvironmentResponse {
     interface Raw {
-        data: Environment.Raw;
+        data: serializers.Environment.Raw;
     }
diff --git a/src/serialization/resources/environments/types/ListEnvironmentsResponse.ts b/src/serialization/resources/environments/types/ListEnvironmentsResponse.ts
index 93f4727..e68721d 100644
--- a/src/serialization/resources/environments/types/ListEnvironmentsResponse.ts
+++ b/src/serialization/resources/environments/types/ListEnvironmentsResponse.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Environment } from "./Environment";
-import { Pagination } from "../../commons/types/Pagination";
 
@@ -14,4 +12,4 @@ export const ListEnvironmentsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(Environment),
-    pagination: Pagination.optional(),
+    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Environment)),
+    pagination: core.serialization.lazyObject(async () => (await import("../../..")).Pagination).optional(),
 });
@@ -20,4 +18,4 @@ export declare namespace ListEnvironmentsResponse {
     interface Raw {
-        data: Environment.Raw[];
-        pagination?: Pagination.Raw | null;
+        data: serializers.Environment.Raw[];
+        pagination?: serializers.Pagination.Raw | null;
     }
diff --git a/src/serialization/resources/events/types/BaseEvent.ts b/src/serialization/resources/events/types/BaseEvent.ts
index 5091bcd..9c6c8d5 100644
--- a/src/serialization/resources/events/types/BaseEvent.ts
+++ b/src/serialization/resources/events/types/BaseEvent.ts
@@ -7,6 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Domain } from "./Domain";
-import { Context } from "./Context";
-import { EventAttributes } from "./EventAttributes";
-import { Origin } from "./Origin";
 
@@ -14,5 +10,5 @@ export const BaseEvent: core.serialization.ObjectSchema<serializers.BaseEvent.Ra
     core.serialization.object({
-        domain: Domain,
-        context: Context,
-        attributes: EventAttributes.optional(),
+        domain: core.serialization.lazy(async () => (await import("../../..")).Domain),
+        context: core.serialization.lazyObject(async () => (await import("../../..")).Context),
+        attributes: core.serialization.lazyObject(async () => (await import("../../..")).EventAttributes).optional(),
         callbackUrl: core.serialization.string().optional(),
@@ -20,3 +16,3 @@ export const BaseEvent: core.serialization.ObjectSchema<serializers.BaseEvent.Ra
         target: core.serialization.string().optional(),
-        origin: Origin.optional(),
+        origin: core.serialization.lazyObject(async () => (await import("../../..")).Origin).optional(),
         namespaces: core.serialization.list(core.serialization.string()).optional(),
@@ -26,5 +22,5 @@ export declare namespace BaseEvent {
     interface Raw {
-        domain: Domain.Raw;
-        context: Context.Raw;
-        attributes?: EventAttributes.Raw | null;
+        domain: serializers.Domain.Raw;
+        context: serializers.Context.Raw;
+        attributes?: serializers.EventAttributes.Raw | null;
         callbackUrl?: string | null;
@@ -32,3 +28,3 @@ export declare namespace BaseEvent {
         target?: string | null;
-        origin?: Origin.Raw | null;
+        origin?: serializers.Origin.Raw | null;
         namespaces?: string[] | null;
diff --git a/src/serialization/resources/events/types/Context.ts b/src/serialization/resources/events/types/Context.ts
index f9c3faf..be5bd5b 100644
--- a/src/serialization/resources/events/types/Context.ts
+++ b/src/serialization/resources/events/types/Context.ts
@@ -7,19 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { EventContextSlugs } from "./EventContextSlugs";
-import { ActionName } from "./ActionName";
-import { AccountId } from "../../commons/types/AccountId";
-import { EnvironmentId } from "../../commons/types/EnvironmentId";
-import { SpaceId } from "../../commons/types/SpaceId";
-import { WorkbookId } from "../../commons/types/WorkbookId";
-import { SheetId } from "../../commons/types/SheetId";
-import { SheetSlug } from "./SheetSlug";
-import { SnapshotId } from "../../commons/types/SnapshotId";
-import { VersionId } from "../../commons/types/VersionId";
-import { CommitId } from "../../commons/types/CommitId";
-import { JobId } from "../../commons/types/JobId";
-import { ProgramId } from "../../commons/types/ProgramId";
-import { FileId } from "../../commons/types/FileId";
-import { DocumentId } from "../../commons/types/DocumentId";
-import { EventId } from "../../commons/types/EventId";
-import { AppId } from "../../commons/types/AppId";
 
@@ -28,20 +11,19 @@ export const Context: core.serialization.ObjectSchema<serializers.Context.Raw, F
         namespaces: core.serialization.list(core.serialization.string()).optional(),
-        slugs: EventContextSlugs.optional(),
-        actionName: ActionName.optional(),
-        accountId: AccountId,
-        environmentId: EnvironmentId,
-        spaceId: SpaceId.optional(),
-        workbookId: WorkbookId.optional(),
-        sheetId: SheetId.optional(),
-        sheetSlug: SheetSlug.optional(),
-        snapshotId: SnapshotId.optional(),
-        versionId: VersionId.optional(),
-        commitId: CommitId.optional(),
-        jobId: JobId.optional(),
-        programId: ProgramId.optional(),
-        fileId: FileId.optional(),
-        documentId: DocumentId.optional(),
-        precedingEventId: EventId.optional(),
+        slugs: core.serialization.lazyObject(async () => (await import("../../..")).EventContextSlugs).optional(),
+        actionName: core.serialization.lazy(async () => (await import("../../..")).ActionName).optional(),
+        accountId: core.serialization.lazy(async () => (await import("../../..")).AccountId),
+        environmentId: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId),
+        spaceId: core.serialization.lazy(async () => (await import("../../..")).SpaceId).optional(),
+        workbookId: core.serialization.lazy(async () => (await import("../../..")).WorkbookId).optional(),
+        sheetId: core.serialization.lazy(async () => (await import("../../..")).SheetId).optional(),
+        sheetSlug: core.serialization.lazy(async () => (await import("../../..")).SheetSlug).optional(),
+        snapshotId: core.serialization.lazy(async () => (await import("../../..")).SnapshotId).optional(),
+        versionId: core.serialization.lazy(async () => (await import("../../..")).VersionId).optional(),
+        commitId: core.serialization.lazy(async () => (await import("../../..")).CommitId).optional(),
+        jobId: core.serialization.lazy(async () => (await import("../../..")).JobId).optional(),
+        programId: core.serialization.lazy(async () => (await import("../../..")).ProgramId).optional(),
+        fileId: core.serialization.lazy(async () => (await import("../../..")).FileId).optional(),
+        documentId: core.serialization.lazy(async () => (await import("../../..")).DocumentId).optional(),
+        precedingEventId: core.serialization.lazy(async () => (await import("../../..")).EventId).optional(),
         actorId: core.serialization.string().optional(),
-        appId: AppId.optional(),
     });
@@ -51,20 +33,19 @@ export declare namespace Context {
         namespaces?: string[] | null;
-        slugs?: EventContextSlugs.Raw | null;
-        actionName?: ActionName.Raw | null;
-        accountId: AccountId.Raw;
-        environmentId: EnvironmentId.Raw;
-        spaceId?: SpaceId.Raw | null;
-        workbookId?: WorkbookId.Raw | null;
-        sheetId?: SheetId.Raw | null;
-        sheetSlug?: SheetSlug.Raw | null;
-        snapshotId?: SnapshotId.Raw | null;
-        versionId?: VersionId.Raw | null;
-        commitId?: CommitId.Raw | null;
-        jobId?: JobId.Raw | null;
-        programId?: ProgramId.Raw | null;
-        fileId?: FileId.Raw | null;
-        documentId?: DocumentId.Raw | null;
-        precedingEventId?: EventId.Raw | null;
+        slugs?: serializers.EventContextSlugs.Raw | null;
+        actionName?: serializers.ActionName.Raw | null;
+        accountId: serializers.AccountId.Raw;
+        environmentId: serializers.EnvironmentId.Raw;
+        spaceId?: serializers.SpaceId.Raw | null;
+        workbookId?: serializers.WorkbookId.Raw | null;
+        sheetId?: serializers.SheetId.Raw | null;
+        sheetSlug?: serializers.SheetSlug.Raw | null;
+        snapshotId?: serializers.SnapshotId.Raw | null;
+        versionId?: serializers.VersionId.Raw | null;
+        commitId?: serializers.CommitId.Raw | null;
+        jobId?: serializers.JobId.Raw | null;
+        programId?: serializers.ProgramId.Raw | null;
+        fileId?: serializers.FileId.Raw | null;
+        documentId?: serializers.DocumentId.Raw | null;
+        precedingEventId?: serializers.EventId.Raw | null;
         actorId?: string | null;
-        appId?: AppId.Raw | null;
     }
diff --git a/src/serialization/resources/events/types/CreateEventConfig.ts b/src/serialization/resources/events/types/CreateEventConfig.ts
index 0fb6cee..92e0ac2 100644
--- a/src/serialization/resources/events/types/CreateEventConfig.ts
+++ b/src/serialization/resources/events/types/CreateEventConfig.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { EventTopic } from "./EventTopic";
-import { BaseEvent } from "./BaseEvent";
 
@@ -15,3 +13,3 @@ export const CreateEventConfig: core.serialization.ObjectSchema<
     .object({
-        topic: EventTopic,
+        topic: core.serialization.lazy(async () => (await import("../../..")).EventTopic),
         payload: core.serialization.record(core.serialization.string(), core.serialization.any()),
@@ -19,7 +17,7 @@ export const CreateEventConfig: core.serialization.ObjectSchema<
     })
-    .extend(BaseEvent);
+    .extend(core.serialization.lazyObject(async () => (await import("../../..")).BaseEvent));
 
 export declare namespace CreateEventConfig {
-    interface Raw extends BaseEvent.Raw {
-        topic: EventTopic.Raw;
+    interface Raw extends serializers.BaseEvent.Raw {
+        topic: serializers.EventTopic.Raw;
         payload: Record<string, any>;
diff --git a/src/serialization/resources/events/types/Domain.ts b/src/serialization/resources/events/types/Domain.ts
index 25cf0c0..e35b638 100644
--- a/src/serialization/resources/events/types/Domain.ts
+++ b/src/serialization/resources/events/types/Domain.ts
@@ -17,3 +17,2 @@ export const Domain: core.serialization.Schema<serializers.Domain.Raw, Flatfile.
     "secret",
-    "cron",
 ]);
@@ -21,3 +20,3 @@ export const Domain: core.serialization.Schema<serializers.Domain.Raw, Flatfile.
 export declare namespace Domain {
-    type Raw = "file" | "space" | "workbook" | "job" | "document" | "sheet" | "program" | "secret" | "cron";
+    type Raw = "file" | "space" | "workbook" | "job" | "document" | "sheet" | "program" | "secret";
 }
diff --git a/src/serialization/resources/events/types/Event.ts b/src/serialization/resources/events/types/Event.ts
index b8a6225..4ece7a3 100644
--- a/src/serialization/resources/events/types/Event.ts
+++ b/src/serialization/resources/events/types/Event.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { GenericEvent } from "./GenericEvent";
 
@@ -11,49 +10,48 @@ export const Event: core.serialization.Schema<serializers.Event.Raw, Flatfile.Ev
     .union("topic", {
-        "agent:created": GenericEvent,
-        "agent:updated": GenericEvent,
-        "agent:deleted": GenericEvent,
-        "space:created": GenericEvent,
-        "space:updated": GenericEvent,
-        "space:deleted": GenericEvent,
-        "space:archived": GenericEvent,
-        "space:expired": GenericEvent,
-        "space:guestAdded": GenericEvent,
-        "space:guestRemoved": GenericEvent,
-        "document:created": GenericEvent,
-        "document:updated": GenericEvent,
-        "document:deleted": GenericEvent,
-        "workbook:created": GenericEvent,
-        "workbook:updated": GenericEvent,
-        "workbook:deleted": GenericEvent,
-        "workbook:expired": GenericEvent,
-        "sheet:created": GenericEvent,
-        "sheet:updated": GenericEvent,
-        "sheet:deleted": GenericEvent,
-        "sheet:counts-updated": GenericEvent,
-        "snapshot:created": GenericEvent,
-        "records:created": GenericEvent,
-        "records:updated": GenericEvent,
-        "records:deleted": GenericEvent,
-        "file:created": GenericEvent,
-        "file:updated": GenericEvent,
-        "file:deleted": GenericEvent,
-        "file:expired": GenericEvent,
-        "job:created": GenericEvent,
-        "job:updated": GenericEvent,
-        "job:deleted": GenericEvent,
-        "job:failed": GenericEvent,
-        "job:completed": GenericEvent,
-        "job:ready": GenericEvent,
-        "job:scheduled": GenericEvent,
-        "job:outcome-acknowledged": GenericEvent,
-        "job:parts-completed": GenericEvent,
-        "program:created": GenericEvent,
-        "program:updated": GenericEvent,
-        "commit:created": GenericEvent,
-        "commit:updated": GenericEvent,
-        "commit:completed": GenericEvent,
-        "secret:created": GenericEvent,
-        "secret:updated": GenericEvent,
-        "secret:deleted": GenericEvent,
-        "layer:created": GenericEvent,
+        "agent:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "agent:updated": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "agent:deleted": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "space:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "space:updated": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "space:deleted": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "space:archived": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "space:expired": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "space:guestAdded": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "space:guestRemoved": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "document:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "document:updated": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "document:deleted": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "workbook:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "workbook:updated": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "workbook:deleted": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "workbook:expired": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "sheet:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "sheet:updated": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "sheet:deleted": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "snapshot:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "records:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "records:updated": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "records:deleted": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "file:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "file:updated": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "file:deleted": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "file:expired": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "job:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "job:updated": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "job:deleted": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "job:failed": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "job:completed": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "job:ready": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "job:scheduled": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "job:outcome-acknowledged": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "job:parts-completed": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "program:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "program:updated": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "commit:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "commit:updated": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "commit:completed": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "secret:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "secret:updated": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "secret:deleted": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
+        "layer:created": core.serialization.lazyObject(async () => (await import("../../..")).GenericEvent),
     })
@@ -86,3 +84,2 @@ export declare namespace Event {
         | Event.SheetDeleted
-        | Event.SheetCountsUpdated
         | Event.SnapshotCreated
@@ -114,3 +111,3 @@ export declare namespace Event {
 
-    interface AgentCreated extends GenericEvent.Raw {
+    interface AgentCreated extends serializers.GenericEvent.Raw {
         topic: "agent:created";
@@ -118,3 +115,3 @@ export declare namespace Event {
 
-    interface AgentUpdated extends GenericEvent.Raw {
+    interface AgentUpdated extends serializers.GenericEvent.Raw {
         topic: "agent:updated";
@@ -122,3 +119,3 @@ export declare namespace Event {
 
-    interface AgentDeleted extends GenericEvent.Raw {
+    interface AgentDeleted extends serializers.GenericEvent.Raw {
         topic: "agent:deleted";
@@ -126,3 +123,3 @@ export declare namespace Event {
 
-    interface SpaceCreated extends GenericEvent.Raw {
+    interface SpaceCreated extends serializers.GenericEvent.Raw {
         topic: "space:created";
@@ -130,3 +127,3 @@ export declare namespace Event {
 
-    interface SpaceUpdated extends GenericEvent.Raw {
+    interface SpaceUpdated extends serializers.GenericEvent.Raw {
         topic: "space:updated";
@@ -134,3 +131,3 @@ export declare namespace Event {
 
-    interface SpaceDeleted extends GenericEvent.Raw {
+    interface SpaceDeleted extends serializers.GenericEvent.Raw {
         topic: "space:deleted";
@@ -138,3 +135,3 @@ export declare namespace Event {
 
-    interface SpaceArchived extends GenericEvent.Raw {
+    interface SpaceArchived extends serializers.GenericEvent.Raw {
         topic: "space:archived";
@@ -142,3 +139,3 @@ export declare namespace Event {
 
-    interface SpaceExpired extends GenericEvent.Raw {
+    interface SpaceExpired extends serializers.GenericEvent.Raw {
         topic: "space:expired";
@@ -146,3 +143,3 @@ export declare namespace Event {
 
-    interface SpaceGuestAdded extends GenericEvent.Raw {
+    interface SpaceGuestAdded extends serializers.GenericEvent.Raw {
         topic: "space:guestAdded";
@@ -150,3 +147,3 @@ export declare namespace Event {
 
-    interface SpaceGuestRemoved extends GenericEvent.Raw {
+    interface SpaceGuestRemoved extends serializers.GenericEvent.Raw {
         topic: "space:guestRemoved";
@@ -154,3 +151,3 @@ export declare namespace Event {
 
-    interface DocumentCreated extends GenericEvent.Raw {
+    interface DocumentCreated extends serializers.GenericEvent.Raw {
         topic: "document:created";
@@ -158,3 +155,3 @@ export declare namespace Event {
 
-    interface DocumentUpdated extends GenericEvent.Raw {
+    interface DocumentUpdated extends serializers.GenericEvent.Raw {
         topic: "document:updated";
@@ -162,3 +159,3 @@ export declare namespace Event {
 
-    interface DocumentDeleted extends GenericEvent.Raw {
+    interface DocumentDeleted extends serializers.GenericEvent.Raw {
         topic: "document:deleted";
@@ -166,3 +163,3 @@ export declare namespace Event {
 
-    interface WorkbookCreated extends GenericEvent.Raw {
+    interface WorkbookCreated extends serializers.GenericEvent.Raw {
         topic: "workbook:created";
@@ -170,3 +167,3 @@ export declare namespace Event {
 
-    interface WorkbookUpdated extends GenericEvent.Raw {
+    interface WorkbookUpdated extends serializers.GenericEvent.Raw {
         topic: "workbook:updated";
@@ -174,3 +171,3 @@ export declare namespace Event {
 
-    interface WorkbookDeleted extends GenericEvent.Raw {
+    interface WorkbookDeleted extends serializers.GenericEvent.Raw {
         topic: "workbook:deleted";
@@ -178,3 +175,3 @@ export declare namespace Event {
 
-    interface WorkbookExpired extends GenericEvent.Raw {
+    interface WorkbookExpired extends serializers.GenericEvent.Raw {
         topic: "workbook:expired";
@@ -182,3 +179,3 @@ export declare namespace Event {
 
-    interface SheetCreated extends GenericEvent.Raw {
+    interface SheetCreated extends serializers.GenericEvent.Raw {
         topic: "sheet:created";
@@ -186,3 +183,3 @@ export declare namespace Event {
 
-    interface SheetUpdated extends GenericEvent.Raw {
+    interface SheetUpdated extends serializers.GenericEvent.Raw {
         topic: "sheet:updated";
@@ -190,3 +187,3 @@ export declare namespace Event {
 
-    interface SheetDeleted extends GenericEvent.Raw {
+    interface SheetDeleted extends serializers.GenericEvent.Raw {
         topic: "sheet:deleted";
@@ -194,7 +191,3 @@ export declare namespace Event {
 
-    interface SheetCountsUpdated extends GenericEvent.Raw {
-        topic: "sheet:counts-updated";
-    }
-
-    interface SnapshotCreated extends GenericEvent.Raw {
+    interface SnapshotCreated extends serializers.GenericEvent.Raw {
         topic: "snapshot:created";
@@ -202,3 +195,3 @@ export declare namespace Event {
 
-    interface RecordsCreated extends GenericEvent.Raw {
+    interface RecordsCreated extends serializers.GenericEvent.Raw {
         topic: "records:created";
@@ -206,3 +199,3 @@ export declare namespace Event {
 
-    interface RecordsUpdated extends GenericEvent.Raw {
+    interface RecordsUpdated extends serializers.GenericEvent.Raw {
         topic: "records:updated";
@@ -210,3 +203,3 @@ export declare namespace Event {
 
-    interface RecordsDeleted extends GenericEvent.Raw {
+    interface RecordsDeleted extends serializers.GenericEvent.Raw {
         topic: "records:deleted";
@@ -214,3 +207,3 @@ export declare namespace Event {
 
-    interface FileCreated extends GenericEvent.Raw {
+    interface FileCreated extends serializers.GenericEvent.Raw {
         topic: "file:created";
@@ -218,3 +211,3 @@ export declare namespace Event {
 
-    interface FileUpdated extends GenericEvent.Raw {
+    interface FileUpdated extends serializers.GenericEvent.Raw {
         topic: "file:updated";
@@ -222,3 +215,3 @@ export declare namespace Event {
 
-    interface FileDeleted extends GenericEvent.Raw {
+    interface FileDeleted extends serializers.GenericEvent.Raw {
         topic: "file:deleted";
@@ -226,3 +219,3 @@ export declare namespace Event {
 
-    interface FileExpired extends GenericEvent.Raw {
+    interface FileExpired extends serializers.GenericEvent.Raw {
         topic: "file:expired";
@@ -230,3 +223,3 @@ export declare namespace Event {
 
-    interface JobCreated extends GenericEvent.Raw {
+    interface JobCreated extends serializers.GenericEvent.Raw {
         topic: "job:created";
@@ -234,3 +227,3 @@ export declare namespace Event {
 
-    interface JobUpdated extends GenericEvent.Raw {
+    interface JobUpdated extends serializers.GenericEvent.Raw {
         topic: "job:updated";
@@ -238,3 +231,3 @@ export declare namespace Event {
 
-    interface JobDeleted extends GenericEvent.Raw {
+    interface JobDeleted extends serializers.GenericEvent.Raw {
         topic: "job:deleted";
@@ -242,3 +235,3 @@ export declare namespace Event {
 
-    interface JobFailed extends GenericEvent.Raw {
+    interface JobFailed extends serializers.GenericEvent.Raw {
         topic: "job:failed";
@@ -246,3 +239,3 @@ export declare namespace Event {
 
-    interface JobCompleted extends GenericEvent.Raw {
+    interface JobCompleted extends serializers.GenericEvent.Raw {
         topic: "job:completed";
@@ -250,3 +243,3 @@ export declare namespace Event {
 
-    interface JobReady extends GenericEvent.Raw {
+    interface JobReady extends serializers.GenericEvent.Raw {
         topic: "job:ready";
@@ -254,3 +247,3 @@ export declare namespace Event {
 
-    interface JobScheduled extends GenericEvent.Raw {
+    interface JobScheduled extends serializers.GenericEvent.Raw {
         topic: "job:scheduled";
@@ -258,3 +251,3 @@ export declare namespace Event {
 
-    interface JobOutcomeAcknowledged extends GenericEvent.Raw {
+    interface JobOutcomeAcknowledged extends serializers.GenericEvent.Raw {
         topic: "job:outcome-acknowledged";
@@ -262,3 +255,3 @@ export declare namespace Event {
 
-    interface JobPartsCompleted extends GenericEvent.Raw {
+    interface JobPartsCompleted extends serializers.GenericEvent.Raw {
         topic: "job:parts-completed";
@@ -266,3 +259,3 @@ export declare namespace Event {
 
-    interface ProgramCreated extends GenericEvent.Raw {
+    interface ProgramCreated extends serializers.GenericEvent.Raw {
         topic: "program:created";
@@ -270,3 +263,3 @@ export declare namespace Event {
 
-    interface ProgramUpdated extends GenericEvent.Raw {
+    interface ProgramUpdated extends serializers.GenericEvent.Raw {
         topic: "program:updated";
@@ -274,3 +267,3 @@ export declare namespace Event {
 
-    interface CommitCreated extends GenericEvent.Raw {
+    interface CommitCreated extends serializers.GenericEvent.Raw {
         topic: "commit:created";
@@ -278,3 +271,3 @@ export declare namespace Event {
 
-    interface CommitUpdated extends GenericEvent.Raw {
+    interface CommitUpdated extends serializers.GenericEvent.Raw {
         topic: "commit:updated";
@@ -282,3 +275,3 @@ export declare namespace Event {
 
-    interface CommitCompleted extends GenericEvent.Raw {
+    interface CommitCompleted extends serializers.GenericEvent.Raw {
         topic: "commit:completed";
@@ -286,3 +279,3 @@ export declare namespace Event {
 
-    interface SecretCreated extends GenericEvent.Raw {
+    interface SecretCreated extends serializers.GenericEvent.Raw {
         topic: "secret:created";
@@ -290,3 +283,3 @@ export declare namespace Event {
 
-    interface SecretUpdated extends GenericEvent.Raw {
+    interface SecretUpdated extends serializers.GenericEvent.Raw {
         topic: "secret:updated";
@@ -294,3 +287,3 @@ export declare namespace Event {
 
-    interface SecretDeleted extends GenericEvent.Raw {
+    interface SecretDeleted extends serializers.GenericEvent.Raw {
         topic: "secret:deleted";
@@ -298,3 +291,3 @@ export declare namespace Event {
 
-    interface LayerCreated extends GenericEvent.Raw {
+    interface LayerCreated extends serializers.GenericEvent.Raw {
         topic: "layer:created";
diff --git a/src/serialization/resources/events/types/EventAttributes.ts b/src/serialization/resources/events/types/EventAttributes.ts
index 2c3d7a3..b7491b6 100644
--- a/src/serialization/resources/events/types/EventAttributes.ts
+++ b/src/serialization/resources/events/types/EventAttributes.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Progress } from "./Progress";
 
@@ -14,3 +13,3 @@ export const EventAttributes: core.serialization.ObjectSchema<
     targetUpdatedAt: core.serialization.date().optional(),
-    progress: Progress.optional(),
+    progress: core.serialization.lazyObject(async () => (await import("../../..")).Progress).optional(),
 });
@@ -20,3 +19,3 @@ export declare namespace EventAttributes {
         targetUpdatedAt?: string | null;
-        progress?: Progress.Raw | null;
+        progress?: serializers.Progress.Raw | null;
     }
diff --git a/src/serialization/resources/events/types/EventResponse.ts b/src/serialization/resources/events/types/EventResponse.ts
index 01c2432..ed7cea4 100644
--- a/src/serialization/resources/events/types/EventResponse.ts
+++ b/src/serialization/resources/events/types/EventResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Event } from "./Event";
 
@@ -11,3 +10,3 @@ export const EventResponse: core.serialization.ObjectSchema<serializers.EventRes
     core.serialization.object({
-        data: Event,
+        data: core.serialization.lazy(async () => (await import("../../..")).Event),
     });
@@ -16,3 +15,3 @@ export declare namespace EventResponse {
     interface Raw {
-        data: Event.Raw;
+        data: serializers.Event.Raw;
     }
diff --git a/src/serialization/resources/events/types/EventTopic.ts b/src/serialization/resources/events/types/EventTopic.ts
index 5805426..8302ee9 100644
--- a/src/serialization/resources/events/types/EventTopic.ts
+++ b/src/serialization/resources/events/types/EventTopic.ts
@@ -30,3 +30,2 @@ export const EventTopic: core.serialization.Schema<serializers.EventTopic.Raw, F
         "sheet:deleted",
-        "sheet:counts-updated",
         "snapshot:created",
@@ -57,6 +56,2 @@ export const EventTopic: core.serialization.Schema<serializers.EventTopic.Raw, F
         "secret:deleted",
-        "cron:5-minutes",
-        "cron:hourly",
-        "cron:daily",
-        "cron:weekly",
     ]);
@@ -85,3 +80,2 @@ export declare namespace EventTopic {
         | "sheet:deleted"
-        | "sheet:counts-updated"
         | "snapshot:created"
@@ -111,7 +105,3 @@ export declare namespace EventTopic {
         | "secret:updated"
-        | "secret:deleted"
-        | "cron:5-minutes"
-        | "cron:hourly"
-        | "cron:daily"
-        | "cron:weekly";
+        | "secret:deleted";
 }
diff --git a/src/serialization/resources/events/types/GenericEvent.ts b/src/serialization/resources/events/types/GenericEvent.ts
index 2355633..747656a 100644
--- a/src/serialization/resources/events/types/GenericEvent.ts
+++ b/src/serialization/resources/events/types/GenericEvent.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { EventId } from "../../commons/types/EventId";
-import { BaseEvent } from "./BaseEvent";
 
@@ -13,3 +11,3 @@ export const GenericEvent: core.serialization.ObjectSchema<serializers.GenericEv
         .object({
-            id: EventId,
+            id: core.serialization.lazy(async () => (await import("../../..")).EventId),
             createdAt: core.serialization.date(),
@@ -20,7 +18,7 @@ export const GenericEvent: core.serialization.ObjectSchema<serializers.GenericEv
         })
-        .extend(BaseEvent);
+        .extend(core.serialization.lazyObject(async () => (await import("../../..")).BaseEvent));
 
 export declare namespace GenericEvent {
-    interface Raw extends BaseEvent.Raw {
-        id: EventId.Raw;
+    interface Raw extends serializers.BaseEvent.Raw {
+        id: serializers.EventId.Raw;
         createdAt: string;
diff --git a/src/serialization/resources/events/types/ListAllEventsResponse.ts b/src/serialization/resources/events/types/ListAllEventsResponse.ts
index ea80637..4a5a4df 100644
--- a/src/serialization/resources/events/types/ListAllEventsResponse.ts
+++ b/src/serialization/resources/events/types/ListAllEventsResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Event } from "./Event";
 
@@ -13,3 +12,3 @@ export const ListAllEventsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(Event),
+    data: core.serialization.list(core.serialization.lazy(async () => (await import("../../..")).Event)),
 });
@@ -18,3 +17,3 @@ export declare namespace ListAllEventsResponse {
     interface Raw {
-        data: Event.Raw[];
+        data: serializers.Event.Raw[];
     }
diff --git a/src/serialization/resources/files/client/requests/UpdateFileRequest.ts b/src/serialization/resources/files/client/requests/UpdateFileRequest.ts
index cdac336..c051d5b 100644
--- a/src/serialization/resources/files/client/requests/UpdateFileRequest.ts
+++ b/src/serialization/resources/files/client/requests/UpdateFileRequest.ts
@@ -7,6 +7,2 @@ import * as Flatfile from "../../../../../api";
 import * as core from "../../../../../core";
-import { WorkbookId } from "../../../commons/types/WorkbookId";
-import { Mode } from "../../types/Mode";
-import { ModelFileStatusEnum } from "../../types/ModelFileStatusEnum";
-import { Action } from "../../../commons/types/Action";
 
@@ -16,7 +12,9 @@ export const UpdateFileRequest: core.serialization.Schema<
 > = core.serialization.object({
-    workbookId: WorkbookId.optional(),
+    workbookId: core.serialization.lazy(async () => (await import("../../../..")).WorkbookId).optional(),
     name: core.serialization.string().optional(),
-    mode: Mode.optional(),
-    status: ModelFileStatusEnum.optional(),
-    actions: core.serialization.list(Action).optional(),
+    mode: core.serialization.lazy(async () => (await import("../../../..")).Mode).optional(),
+    status: core.serialization.lazy(async () => (await import("../../../..")).ModelFileStatusEnum).optional(),
+    actions: core.serialization
+        .list(core.serialization.lazyObject(async () => (await import("../../../..")).Action))
+        .optional(),
 });
@@ -25,7 +23,7 @@ export declare namespace UpdateFileRequest {
     interface Raw {
-        workbookId?: WorkbookId.Raw | null;
+        workbookId?: serializers.WorkbookId.Raw | null;
         name?: string | null;
-        mode?: Mode.Raw | null;
-        status?: ModelFileStatusEnum.Raw | null;
-        actions?: Action.Raw[] | null;
+        mode?: serializers.Mode.Raw | null;
+        status?: serializers.ModelFileStatusEnum.Raw | null;
+        actions?: serializers.Action.Raw[] | null;
     }
diff --git a/src/serialization/resources/files/types/FileResponse.ts b/src/serialization/resources/files/types/FileResponse.ts
index dfdcf4a..6d471d0 100644
--- a/src/serialization/resources/files/types/FileResponse.ts
+++ b/src/serialization/resources/files/types/FileResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { File_ } from "./File_";
 
@@ -11,3 +10,3 @@ export const FileResponse: core.serialization.ObjectSchema<serializers.FileRespo
     core.serialization.object({
-        data: File_,
+        data: core.serialization.lazyObject(async () => (await import("../../..")).File_),
     });
@@ -16,3 +15,3 @@ export declare namespace FileResponse {
     interface Raw {
-        data: File_.Raw;
+        data: serializers.File_.Raw;
     }
diff --git a/src/serialization/resources/files/types/File_.ts b/src/serialization/resources/files/types/File_.ts
index e51ec4e..be5afe6 100644
--- a/src/serialization/resources/files/types/File_.ts
+++ b/src/serialization/resources/files/types/File_.ts
@@ -7,12 +7,5 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { FileId } from "../../commons/types/FileId";
-import { ModelFileStatusEnum } from "./ModelFileStatusEnum";
-import { Mode } from "./Mode";
-import { SpaceId } from "../../commons/types/SpaceId";
-import { WorkbookId } from "../../commons/types/WorkbookId";
-import { SheetId } from "../../commons/types/SheetId";
-import { Action } from "../../commons/types/Action";
 
 export const File_: core.serialization.ObjectSchema<serializers.File_.Raw, Flatfile.File_> = core.serialization.object({
-    id: FileId,
+    id: core.serialization.lazy(async () => (await import("../../..")).FileId),
     name: core.serialization.string(),
@@ -21,4 +14,4 @@ export const File_: core.serialization.ObjectSchema<serializers.File_.Raw, Flatf
     encoding: core.serialization.string(),
-    status: ModelFileStatusEnum,
-    mode: Mode.optional(),
+    status: core.serialization.lazy(async () => (await import("../../..")).ModelFileStatusEnum),
+    mode: core.serialization.lazy(async () => (await import("../../..")).Mode).optional(),
     size: core.serialization.number(),
@@ -28,6 +21,8 @@ export const File_: core.serialization.ObjectSchema<serializers.File_.Raw, Flatf
     expiredAt: core.serialization.date().optional(),
-    spaceId: SpaceId,
-    workbookId: WorkbookId.optional(),
-    sheetId: SheetId.optional(),
-    actions: core.serialization.list(Action).optional(),
+    spaceId: core.serialization.lazy(async () => (await import("../../..")).SpaceId),
+    workbookId: core.serialization.lazy(async () => (await import("../../..")).WorkbookId).optional(),
+    sheetId: core.serialization.lazy(async () => (await import("../../..")).SheetId).optional(),
+    actions: core.serialization
+        .list(core.serialization.lazyObject(async () => (await import("../../..")).Action))
+        .optional(),
 });
@@ -36,3 +31,3 @@ export declare namespace File_ {
     interface Raw {
-        id: FileId.Raw;
+        id: serializers.FileId.Raw;
         name: string;
@@ -41,4 +36,4 @@ export declare namespace File_ {
         encoding: string;
-        status: ModelFileStatusEnum.Raw;
-        mode?: Mode.Raw | null;
+        status: serializers.ModelFileStatusEnum.Raw;
+        mode?: serializers.Mode.Raw | null;
         size: number;
@@ -48,6 +43,6 @@ export declare namespace File_ {
         expiredAt?: string | null;
-        spaceId: SpaceId.Raw;
-        workbookId?: WorkbookId.Raw | null;
-        sheetId?: SheetId.Raw | null;
-        actions?: Action.Raw[] | null;
+        spaceId: serializers.SpaceId.Raw;
+        workbookId?: serializers.WorkbookId.Raw | null;
+        sheetId?: serializers.SheetId.Raw | null;
+        actions?: serializers.Action.Raw[] | null;
     }
diff --git a/src/serialization/resources/files/types/ListFilesResponse.ts b/src/serialization/resources/files/types/ListFilesResponse.ts
index 3fd4366..031df46 100644
--- a/src/serialization/resources/files/types/ListFilesResponse.ts
+++ b/src/serialization/resources/files/types/ListFilesResponse.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Pagination } from "../../commons/types/Pagination";
-import { File_ } from "./File_";
 
@@ -14,4 +12,4 @@ export const ListFilesResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    pagination: Pagination.optional(),
-    data: core.serialization.list(File_),
+    pagination: core.serialization.lazyObject(async () => (await import("../../..")).Pagination).optional(),
+    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).File_)),
 });
@@ -20,4 +18,4 @@ export declare namespace ListFilesResponse {
     interface Raw {
-        pagination?: Pagination.Raw | null;
-        data: File_.Raw[];
+        pagination?: serializers.Pagination.Raw | null;
+        data: serializers.File_.Raw[];
     }
diff --git a/src/serialization/resources/foreigndb/index.ts b/src/serialization/resources/foreigndb/index.ts
deleted file mode 100644
index eea524d..0000000
--- a/src/serialization/resources/foreigndb/index.ts
+++ /dev/null
@@ -1 +0,0 @@
-export * from "./types";
diff --git a/src/serialization/resources/foreigndb/types/DatabaseTask.ts b/src/serialization/resources/foreigndb/types/DatabaseTask.ts
deleted file mode 100644
index 0ecae12..0000000
--- a/src/serialization/resources/foreigndb/types/DatabaseTask.ts
+++ /dev/null
@@ -1,22 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as serializers from "../../..";
-import * as Flatfile from "../../../../api";
-import * as core from "../../../../core";
-
-export const DatabaseTask: core.serialization.ObjectSchema<serializers.DatabaseTask.Raw, Flatfile.DatabaseTask> =
-    core.serialization.object({
-        status: core.serialization.string(),
-        type: core.serialization.string(),
-        progress: core.serialization.number(),
-    });
-
-export declare namespace DatabaseTask {
-    interface Raw {
-        status: string;
-        type: string;
-        progress: number;
-    }
-}
diff --git a/src/serialization/resources/foreigndb/types/GetDatabaseResponse.ts b/src/serialization/resources/foreigndb/types/GetDatabaseResponse.ts
deleted file mode 100644
index c2ed67a..0000000
--- a/src/serialization/resources/foreigndb/types/GetDatabaseResponse.ts
+++ /dev/null
@@ -1,21 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as serializers from "../../..";
-import * as Flatfile from "../../../../api";
-import * as core from "../../../../core";
-import { DatabaseTask } from "./DatabaseTask";
-
-export const GetDatabaseResponse: core.serialization.ObjectSchema<
-    serializers.GetDatabaseResponse.Raw,
-    Flatfile.GetDatabaseResponse
-> = core.serialization.object({
-    task: DatabaseTask,
-});
-
-export declare namespace GetDatabaseResponse {
-    interface Raw {
-        task: DatabaseTask.Raw;
-    }
-}
diff --git a/src/serialization/resources/foreigndb/types/GetDatabaseUserResponse.ts b/src/serialization/resources/foreigndb/types/GetDatabaseUserResponse.ts
deleted file mode 100644
index 60c4812..0000000
--- a/src/serialization/resources/foreigndb/types/GetDatabaseUserResponse.ts
+++ /dev/null
@@ -1,22 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as serializers from "../../..";
-import * as Flatfile from "../../../../api";
-import * as core from "../../../../core";
-
-export const GetDatabaseUserResponse: core.serialization.ObjectSchema<
-    serializers.GetDatabaseUserResponse.Raw,
-    Flatfile.GetDatabaseUserResponse
-> = core.serialization.object({
-    username: core.serialization.string(),
-    password: core.serialization.string(),
-});
-
-export declare namespace GetDatabaseUserResponse {
-    interface Raw {
-        username: string;
-        password: string;
-    }
-}
diff --git a/src/serialization/resources/foreigndb/types/RestoreDatabaseRequest.ts b/src/serialization/resources/foreigndb/types/RestoreDatabaseRequest.ts
deleted file mode 100644
index 54f0df8..0000000
--- a/src/serialization/resources/foreigndb/types/RestoreDatabaseRequest.ts
+++ /dev/null
@@ -1,20 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as serializers from "../../..";
-import * as Flatfile from "../../../../api";
-import * as core from "../../../../core";
-
-export const RestoreDatabaseRequest: core.serialization.ObjectSchema<
-    serializers.RestoreDatabaseRequest.Raw,
-    Flatfile.RestoreDatabaseRequest
-> = core.serialization.object({
-    fileId: core.serialization.string(),
-});
-
-export declare namespace RestoreDatabaseRequest {
-    interface Raw {
-        fileId: string;
-    }
-}
diff --git a/src/serialization/resources/foreigndb/types/RestoreDatabaseResponse.ts b/src/serialization/resources/foreigndb/types/RestoreDatabaseResponse.ts
deleted file mode 100644
index 963dfea..0000000
--- a/src/serialization/resources/foreigndb/types/RestoreDatabaseResponse.ts
+++ /dev/null
@@ -1,24 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as serializers from "../../..";
-import * as Flatfile from "../../../../api";
-import * as core from "../../../../core";
-
-export const RestoreDatabaseResponse: core.serialization.ObjectSchema<
-    serializers.RestoreDatabaseResponse.Raw,
-    Flatfile.RestoreDatabaseResponse
-> = core.serialization.object({
-    host: core.serialization.string(),
-    port: core.serialization.number(),
-    dbname: core.serialization.string(),
-});
-
-export declare namespace RestoreDatabaseResponse {
-    interface Raw {
-        host: string;
-        port: number;
-        dbname: string;
-    }
-}
diff --git a/src/serialization/resources/foreigndb/types/UploadToObjectStorageRequest.ts b/src/serialization/resources/foreigndb/types/UploadToObjectStorageRequest.ts
deleted file mode 100644
index 6aada70..0000000
--- a/src/serialization/resources/foreigndb/types/UploadToObjectStorageRequest.ts
+++ /dev/null
@@ -1,20 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as serializers from "../../..";
-import * as Flatfile from "../../../../api";
-import * as core from "../../../../core";
-
-export const UploadToObjectStorageRequest: core.serialization.ObjectSchema<
-    serializers.UploadToObjectStorageRequest.Raw,
-    Flatfile.UploadToObjectStorageRequest
-> = core.serialization.object({
-    fileId: core.serialization.string(),
-});
-
-export declare namespace UploadToObjectStorageRequest {
-    interface Raw {
-        fileId: string;
-    }
-}
diff --git a/src/serialization/resources/foreigndb/types/index.ts b/src/serialization/resources/foreigndb/types/index.ts
deleted file mode 100644
index 8086286..0000000
--- a/src/serialization/resources/foreigndb/types/index.ts
+++ /dev/null
@@ -1,6 +0,0 @@
-export * from "./UploadToObjectStorageRequest";
-export * from "./RestoreDatabaseRequest";
-export * from "./RestoreDatabaseResponse";
-export * from "./GetDatabaseResponse";
-export * from "./DatabaseTask";
-export * from "./GetDatabaseUserResponse";
diff --git a/src/serialization/resources/guests/client/create.ts b/src/serialization/resources/guests/client/create.ts
index 864ae1c..cb67c36 100644
--- a/src/serialization/resources/guests/client/create.ts
+++ b/src/serialization/resources/guests/client/create.ts
@@ -7,9 +7,8 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { GuestConfig } from "../types/GuestConfig";
 
 export const Request: core.serialization.Schema<serializers.guests.create.Request.Raw, Flatfile.GuestConfig[]> =
-    core.serialization.list(GuestConfig);
+    core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).GuestConfig));
 
 export declare namespace Request {
-    type Raw = GuestConfig.Raw[];
+    type Raw = serializers.GuestConfig.Raw[];
 }
diff --git a/src/serialization/resources/guests/client/invite.ts b/src/serialization/resources/guests/client/invite.ts
index 6c27969..efd1d9d 100644
--- a/src/serialization/resources/guests/client/invite.ts
+++ b/src/serialization/resources/guests/client/invite.ts
@@ -7,9 +7,8 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Invite } from "../types/Invite";
 
 export const Request: core.serialization.Schema<serializers.guests.invite.Request.Raw, Flatfile.Invite[]> =
-    core.serialization.list(Invite);
+    core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Invite));
 
 export declare namespace Request {
-    type Raw = Invite.Raw[];
+    type Raw = serializers.Invite.Raw[];
 }
diff --git a/src/serialization/resources/guests/types/CreateGuestResponse.ts b/src/serialization/resources/guests/types/CreateGuestResponse.ts
index 153dc3f..83ae108 100644
--- a/src/serialization/resources/guests/types/CreateGuestResponse.ts
+++ b/src/serialization/resources/guests/types/CreateGuestResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Guest } from "./Guest";
 
@@ -13,3 +12,3 @@ export const CreateGuestResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(Guest),
+    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Guest)),
 });
@@ -18,3 +17,3 @@ export declare namespace CreateGuestResponse {
     interface Raw {
-        data: Guest.Raw[];
+        data: serializers.Guest.Raw[];
     }
diff --git a/src/serialization/resources/guests/types/Guest.ts b/src/serialization/resources/guests/types/Guest.ts
index 6eddce0..7e86e97 100644
--- a/src/serialization/resources/guests/types/Guest.ts
+++ b/src/serialization/resources/guests/types/Guest.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { GuestId } from "../../commons/types/GuestId";
-import { GuestConfig } from "./GuestConfig";
 
@@ -12,3 +10,3 @@ export const Guest: core.serialization.ObjectSchema<serializers.Guest.Raw, Flatf
     .object({
-        id: GuestId,
+        id: core.serialization.lazy(async () => (await import("../../..")).GuestId),
         createdAt: core.serialization.date(),
@@ -16,7 +14,7 @@ export const Guest: core.serialization.ObjectSchema<serializers.Guest.Raw, Flatf
     })
-    .extend(GuestConfig);
+    .extend(core.serialization.lazyObject(async () => (await import("../../..")).GuestConfig));
 
 export declare namespace Guest {
-    interface Raw extends GuestConfig.Raw {
-        id: GuestId.Raw;
+    interface Raw extends serializers.GuestConfig.Raw {
+        id: serializers.GuestId.Raw;
         createdAt: string;
diff --git a/src/serialization/resources/guests/types/GuestConfig.ts b/src/serialization/resources/guests/types/GuestConfig.ts
index c329126..d996f49 100644
--- a/src/serialization/resources/guests/types/GuestConfig.ts
+++ b/src/serialization/resources/guests/types/GuestConfig.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { EnvironmentId } from "../../commons/types/EnvironmentId";
-import { GuestSpace } from "./GuestSpace";
 
@@ -12,6 +10,8 @@ export const GuestConfig: core.serialization.ObjectSchema<serializers.GuestConfi
     core.serialization.object({
-        environmentId: EnvironmentId,
+        environmentId: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId),
         email: core.serialization.string(),
         name: core.serialization.string(),
-        spaces: core.serialization.list(GuestSpace),
+        spaces: core.serialization.list(
+            core.serialization.lazyObject(async () => (await import("../../..")).GuestSpace)
+        ),
     });
@@ -20,6 +20,6 @@ export declare namespace GuestConfig {
     interface Raw {
-        environmentId: EnvironmentId.Raw;
+        environmentId: serializers.EnvironmentId.Raw;
         email: string;
         name: string;
-        spaces: GuestSpace.Raw[];
+        spaces: serializers.GuestSpace.Raw[];
     }
diff --git a/src/serialization/resources/guests/types/GuestConfigUpdate.ts b/src/serialization/resources/guests/types/GuestConfigUpdate.ts
index 53eed6f..38c8b39 100644
--- a/src/serialization/resources/guests/types/GuestConfigUpdate.ts
+++ b/src/serialization/resources/guests/types/GuestConfigUpdate.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { EnvironmentId } from "../../commons/types/EnvironmentId";
-import { GuestSpace } from "./GuestSpace";
 
@@ -14,6 +12,8 @@ export const GuestConfigUpdate: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    environmentId: EnvironmentId.optional(),
+    environmentId: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId).optional(),
     email: core.serialization.string().optional(),
     name: core.serialization.string().optional(),
-    spaces: core.serialization.list(GuestSpace).optional(),
+    spaces: core.serialization
+        .list(core.serialization.lazyObject(async () => (await import("../../..")).GuestSpace))
+        .optional(),
 });
@@ -22,6 +22,6 @@ export declare namespace GuestConfigUpdate {
     interface Raw {
-        environmentId?: EnvironmentId.Raw | null;
+        environmentId?: serializers.EnvironmentId.Raw | null;
         email?: string | null;
         name?: string | null;
-        spaces?: GuestSpace.Raw[] | null;
+        spaces?: serializers.GuestSpace.Raw[] | null;
     }
diff --git a/src/serialization/resources/guests/types/GuestResponse.ts b/src/serialization/resources/guests/types/GuestResponse.ts
index 940f16b..89a0694 100644
--- a/src/serialization/resources/guests/types/GuestResponse.ts
+++ b/src/serialization/resources/guests/types/GuestResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Guest } from "./Guest";
 
@@ -11,3 +10,3 @@ export const GuestResponse: core.serialization.ObjectSchema<serializers.GuestRes
     core.serialization.object({
-        data: Guest,
+        data: core.serialization.lazyObject(async () => (await import("../../..")).Guest),
     });
@@ -16,3 +15,3 @@ export declare namespace GuestResponse {
     interface Raw {
-        data: Guest.Raw;
+        data: serializers.Guest.Raw;
     }
diff --git a/src/serialization/resources/guests/types/GuestSpace.ts b/src/serialization/resources/guests/types/GuestSpace.ts
index dfe9099..9b80f8a 100644
--- a/src/serialization/resources/guests/types/GuestSpace.ts
+++ b/src/serialization/resources/guests/types/GuestSpace.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { SpaceId } from "../../commons/types/SpaceId";
-import { GuestWorkbook } from "./GuestWorkbook";
 
@@ -12,4 +10,6 @@ export const GuestSpace: core.serialization.ObjectSchema<serializers.GuestSpace.
     core.serialization.object({
-        id: SpaceId,
-        workbooks: core.serialization.list(GuestWorkbook).optional(),
+        id: core.serialization.lazy(async () => (await import("../../..")).SpaceId),
+        workbooks: core.serialization
+            .list(core.serialization.lazyObject(async () => (await import("../../..")).GuestWorkbook))
+            .optional(),
         lastAccessed: core.serialization.date().optional(),
@@ -19,4 +19,4 @@ export declare namespace GuestSpace {
     interface Raw {
-        id: SpaceId.Raw;
-        workbooks?: GuestWorkbook.Raw[] | null;
+        id: serializers.SpaceId.Raw;
+        workbooks?: serializers.GuestWorkbook.Raw[] | null;
         lastAccessed?: string | null;
diff --git a/src/serialization/resources/guests/types/GuestTokenResponse.ts b/src/serialization/resources/guests/types/GuestTokenResponse.ts
index c1f31b5..29ed00c 100644
--- a/src/serialization/resources/guests/types/GuestTokenResponse.ts
+++ b/src/serialization/resources/guests/types/GuestTokenResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { GuestToken } from "./GuestToken";
 
@@ -13,3 +12,3 @@ export const GuestTokenResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: GuestToken,
+    data: core.serialization.lazyObject(async () => (await import("../../..")).GuestToken),
 });
@@ -18,3 +17,3 @@ export declare namespace GuestTokenResponse {
     interface Raw {
-        data: GuestToken.Raw;
+        data: serializers.GuestToken.Raw;
     }
diff --git a/src/serialization/resources/guests/types/GuestWorkbook.ts b/src/serialization/resources/guests/types/GuestWorkbook.ts
index d4d47c5..a98d6e0 100644
--- a/src/serialization/resources/guests/types/GuestWorkbook.ts
+++ b/src/serialization/resources/guests/types/GuestWorkbook.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { WorkbookId } from "../../commons/types/WorkbookId";
 
@@ -11,3 +10,3 @@ export const GuestWorkbook: core.serialization.ObjectSchema<serializers.GuestWor
     core.serialization.object({
-        id: WorkbookId,
+        id: core.serialization.lazy(async () => (await import("../../..")).WorkbookId),
     });
@@ -16,3 +15,3 @@ export declare namespace GuestWorkbook {
     interface Raw {
-        id: WorkbookId.Raw;
+        id: serializers.WorkbookId.Raw;
     }
diff --git a/src/serialization/resources/guests/types/Invite.ts b/src/serialization/resources/guests/types/Invite.ts
index 3b68895..c13ddcc 100644
--- a/src/serialization/resources/guests/types/Invite.ts
+++ b/src/serialization/resources/guests/types/Invite.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { GuestId } from "../../commons/types/GuestId";
-import { SpaceId } from "../../commons/types/SpaceId";
 
@@ -12,4 +10,4 @@ export const Invite: core.serialization.ObjectSchema<serializers.Invite.Raw, Fla
     core.serialization.object({
-        guestId: GuestId,
-        spaceId: SpaceId,
+        guestId: core.serialization.lazy(async () => (await import("../../..")).GuestId),
+        spaceId: core.serialization.lazy(async () => (await import("../../..")).SpaceId),
         fromName: core.serialization.string().optional(),
@@ -20,4 +18,4 @@ export declare namespace Invite {
     interface Raw {
-        guestId: GuestId.Raw;
-        spaceId: SpaceId.Raw;
+        guestId: serializers.GuestId.Raw;
+        spaceId: serializers.SpaceId.Raw;
         fromName?: string | null;
diff --git a/src/serialization/resources/guests/types/ListGuestsResponse.ts b/src/serialization/resources/guests/types/ListGuestsResponse.ts
index fd06575..3c56e62 100644
--- a/src/serialization/resources/guests/types/ListGuestsResponse.ts
+++ b/src/serialization/resources/guests/types/ListGuestsResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Guest } from "./Guest";
 
@@ -13,3 +12,3 @@ export const ListGuestsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(Guest),
+    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Guest)),
 });
@@ -18,3 +17,3 @@ export declare namespace ListGuestsResponse {
     interface Raw {
-        data: Guest.Raw[];
+        data: serializers.Guest.Raw[];
     }
diff --git a/src/serialization/resources/index.ts b/src/serialization/resources/index.ts
index 481e6bc..06437e8 100644
--- a/src/serialization/resources/index.ts
+++ b/src/serialization/resources/index.ts
@@ -1,3 +1 @@
-export * as accounts from "./accounts";
-export * from "./accounts/types";
 export * as agents from "./agents";
@@ -6,4 +4,2 @@ export * as apps from "./apps";
 export * from "./apps/types";
-export * as assistant from "./assistant";
-export * from "./assistant/types";
 export * as auth from "./auth";
@@ -28,4 +24,2 @@ export * as files from "./files";
 export * from "./files/types";
-export * as foreigndb from "./foreigndb";
-export * from "./foreigndb/types";
 export * as guests from "./guests";
diff --git a/src/serialization/resources/jobs/client/ack.ts b/src/serialization/resources/jobs/client/ack.ts
index 5d541b3..6093d08 100644
--- a/src/serialization/resources/jobs/client/ack.ts
+++ b/src/serialization/resources/jobs/client/ack.ts
@@ -7,9 +7,8 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { JobAckDetails } from "../types/JobAckDetails";
 
 export const Request: core.serialization.Schema<serializers.jobs.ack.Request.Raw, Flatfile.JobAckDetails | undefined> =
-    JobAckDetails.optional();
+    core.serialization.lazyObject(async () => (await import("../../..")).JobAckDetails).optional();
 
 export declare namespace Request {
-    type Raw = JobAckDetails.Raw | null | undefined;
+    type Raw = serializers.JobAckDetails.Raw | null | undefined;
 }
diff --git a/src/serialization/resources/jobs/client/cancel.ts b/src/serialization/resources/jobs/client/cancel.ts
index 8751b32..d1a7e1b 100644
--- a/src/serialization/resources/jobs/client/cancel.ts
+++ b/src/serialization/resources/jobs/client/cancel.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { JobCancelDetails } from "../types/JobCancelDetails";
 
@@ -12,6 +11,6 @@ export const Request: core.serialization.Schema<
     Flatfile.JobCancelDetails | undefined
-> = JobCancelDetails.optional();
+> = core.serialization.lazyObject(async () => (await import("../../..")).JobCancelDetails).optional();
 
 export declare namespace Request {
-    type Raw = JobCancelDetails.Raw | null | undefined;
+    type Raw = serializers.JobCancelDetails.Raw | null | undefined;
 }
diff --git a/src/serialization/resources/jobs/client/complete.ts b/src/serialization/resources/jobs/client/complete.ts
index 84761c5..2c1a1f5 100644
--- a/src/serialization/resources/jobs/client/complete.ts
+++ b/src/serialization/resources/jobs/client/complete.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { JobCompleteDetails } from "../types/JobCompleteDetails";
 
@@ -12,6 +11,6 @@ export const Request: core.serialization.Schema<
     Flatfile.JobCompleteDetails | undefined
-> = JobCompleteDetails.optional();
+> = core.serialization.lazyObject(async () => (await import("../../..")).JobCompleteDetails).optional();
 
 export declare namespace Request {
-    type Raw = JobCompleteDetails.Raw | null | undefined;
+    type Raw = serializers.JobCompleteDetails.Raw | null | undefined;
 }
diff --git a/src/serialization/resources/jobs/client/fail.ts b/src/serialization/resources/jobs/client/fail.ts
index 675ecdc..87d0ca9 100644
--- a/src/serialization/resources/jobs/client/fail.ts
+++ b/src/serialization/resources/jobs/client/fail.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { JobCompleteDetails } from "../types/JobCompleteDetails";
 
@@ -12,6 +11,6 @@ export const Request: core.serialization.Schema<
     Flatfile.JobCompleteDetails | undefined
-> = JobCompleteDetails.optional();
+> = core.serialization.lazyObject(async () => (await import("../../..")).JobCompleteDetails).optional();
 
 export declare namespace Request {
-    type Raw = JobCompleteDetails.Raw | null | undefined;
+    type Raw = serializers.JobCompleteDetails.Raw | null | undefined;
 }
diff --git a/src/serialization/resources/jobs/types/CategoryMapping.ts b/src/serialization/resources/jobs/types/CategoryMapping.ts
index 4d7c7ae..e4a805e 100644
--- a/src/serialization/resources/jobs/types/CategoryMapping.ts
+++ b/src/serialization/resources/jobs/types/CategoryMapping.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { EnumValue } from "./EnumValue";
 
@@ -13,4 +12,4 @@ export const CategoryMapping: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    sourceValue: EnumValue.optional(),
-    destinationValue: EnumValue.optional(),
+    sourceValue: core.serialization.lazy(async () => (await import("../../..")).EnumValue).optional(),
+    destinationValue: core.serialization.lazy(async () => (await import("../../..")).EnumValue).optional(),
 });
@@ -19,4 +18,4 @@ export declare namespace CategoryMapping {
     interface Raw {
-        sourceValue?: EnumValue.Raw | null;
-        destinationValue?: EnumValue.Raw | null;
+        sourceValue?: serializers.EnumValue.Raw | null;
+        destinationValue?: serializers.EnumValue.Raw | null;
     }
diff --git a/src/serialization/resources/jobs/types/DeleteRecordsJobConfig.ts b/src/serialization/resources/jobs/types/DeleteRecordsJobConfig.ts
index 59fe917..c57ef84 100644
--- a/src/serialization/resources/jobs/types/DeleteRecordsJobConfig.ts
+++ b/src/serialization/resources/jobs/types/DeleteRecordsJobConfig.ts
@@ -7,8 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Filter } from "../../commons/types/Filter";
-import { FilterField } from "../../commons/types/FilterField";
-import { SearchValue } from "../../commons/types/SearchValue";
-import { SearchField } from "../../commons/types/SearchField";
-import { SheetId } from "../../commons/types/SheetId";
-import { RecordId } from "../../commons/types/RecordId";
 
@@ -18,9 +12,11 @@ export const DeleteRecordsJobConfig: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    filter: Filter.optional(),
-    filterField: FilterField.optional(),
-    searchValue: SearchValue.optional(),
-    searchField: SearchField.optional(),
+    filter: core.serialization.lazy(async () => (await import("../../..")).Filter).optional(),
+    filterField: core.serialization.lazy(async () => (await import("../../..")).FilterField).optional(),
+    searchValue: core.serialization.lazy(async () => (await import("../../..")).SearchValue).optional(),
+    searchField: core.serialization.lazy(async () => (await import("../../..")).SearchField).optional(),
     q: core.serialization.string().optional(),
-    sheet: SheetId,
-    exceptions: core.serialization.list(RecordId).optional(),
+    sheet: core.serialization.lazy(async () => (await import("../../..")).SheetId),
+    exceptions: core.serialization
+        .list(core.serialization.lazy(async () => (await import("../../..")).RecordId))
+        .optional(),
 });
@@ -29,9 +25,9 @@ export declare namespace DeleteRecordsJobConfig {
     interface Raw {
-        filter?: Filter.Raw | null;
-        filterField?: FilterField.Raw | null;
-        searchValue?: SearchValue.Raw | null;
-        searchField?: SearchField.Raw | null;
+        filter?: serializers.Filter.Raw | null;
+        filterField?: serializers.FilterField.Raw | null;
+        searchValue?: serializers.SearchValue.Raw | null;
+        searchField?: serializers.SearchField.Raw | null;
         q?: string | null;
-        sheet: SheetId.Raw;
-        exceptions?: RecordId.Raw[] | null;
+        sheet: serializers.SheetId.Raw;
+        exceptions?: serializers.RecordId.Raw[] | null;
     }
diff --git a/src/serialization/resources/jobs/types/DestinationField.ts b/src/serialization/resources/jobs/types/DestinationField.ts
index 3fc0838..31e1f45 100644
--- a/src/serialization/resources/jobs/types/DestinationField.ts
+++ b/src/serialization/resources/jobs/types/DestinationField.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Property } from "../../property/types/Property";
 
@@ -13,3 +12,3 @@ export const DestinationField: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    destinationField: Property,
+    destinationField: core.serialization.lazy(async () => (await import("../../..")).Property),
     preview: core.serialization.list(core.serialization.string()).optional(),
@@ -19,3 +18,3 @@ export declare namespace DestinationField {
     interface Raw {
-        destinationField: Property.Raw;
+        destinationField: serializers.Property.Raw;
         preview?: string[] | null;
diff --git a/src/serialization/resources/jobs/types/Edge.ts b/src/serialization/resources/jobs/types/Edge.ts
index 21d4702..213c1d7 100644
--- a/src/serialization/resources/jobs/types/Edge.ts
+++ b/src/serialization/resources/jobs/types/Edge.ts
@@ -7,12 +7,9 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Property } from "../../property/types/Property";
-import { EnumDetails } from "./EnumDetails";
-import { Metadata } from "./Metadata";
 
 export const Edge: core.serialization.ObjectSchema<serializers.Edge.Raw, Flatfile.Edge> = core.serialization.object({
-    sourceField: Property,
-    destinationField: Property,
+    sourceField: core.serialization.lazy(async () => (await import("../../..")).Property),
+    destinationField: core.serialization.lazy(async () => (await import("../../..")).Property),
     preview: core.serialization.list(core.serialization.string()).optional(),
-    enumDetails: EnumDetails.optional(),
-    metadata: Metadata.optional(),
+    enumDetails: core.serialization.lazyObject(async () => (await import("../../..")).EnumDetails).optional(),
+    metadata: core.serialization.lazyObject(async () => (await import("../../..")).Metadata).optional(),
 });
@@ -21,7 +18,7 @@ export declare namespace Edge {
     interface Raw {
-        sourceField: Property.Raw;
-        destinationField: Property.Raw;
+        sourceField: serializers.Property.Raw;
+        destinationField: serializers.Property.Raw;
         preview?: string[] | null;
-        enumDetails?: EnumDetails.Raw | null;
-        metadata?: Metadata.Raw | null;
+        enumDetails?: serializers.EnumDetails.Raw | null;
+        metadata?: serializers.Metadata.Raw | null;
     }
diff --git a/src/serialization/resources/jobs/types/EnumDetails.ts b/src/serialization/resources/jobs/types/EnumDetails.ts
index a1b6ea5..bb54392 100644
--- a/src/serialization/resources/jobs/types/EnumDetails.ts
+++ b/src/serialization/resources/jobs/types/EnumDetails.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { CategoryMapping } from "./CategoryMapping";
-import { EnumValue } from "./EnumValue";
 
@@ -12,5 +10,11 @@ export const EnumDetails: core.serialization.ObjectSchema<serializers.EnumDetail
     core.serialization.object({
-        mapping: core.serialization.list(CategoryMapping),
-        unusedSourceValues: core.serialization.list(EnumValue).optional(),
-        unusedDestinationValues: core.serialization.list(EnumValue).optional(),
+        mapping: core.serialization.list(
+            core.serialization.lazyObject(async () => (await import("../../..")).CategoryMapping)
+        ),
+        unusedSourceValues: core.serialization
+            .list(core.serialization.lazy(async () => (await import("../../..")).EnumValue))
+            .optional(),
+        unusedDestinationValues: core.serialization
+            .list(core.serialization.lazy(async () => (await import("../../..")).EnumValue))
+            .optional(),
     });
@@ -19,5 +23,5 @@ export declare namespace EnumDetails {
     interface Raw {
-        mapping: CategoryMapping.Raw[];
-        unusedSourceValues?: EnumValue.Raw[] | null;
-        unusedDestinationValues?: EnumValue.Raw[] | null;
+        mapping: serializers.CategoryMapping.Raw[];
+        unusedSourceValues?: serializers.EnumValue.Raw[] | null;
+        unusedDestinationValues?: serializers.EnumValue.Raw[] | null;
     }
diff --git a/src/serialization/resources/jobs/types/ExportJobConfig.ts b/src/serialization/resources/jobs/types/ExportJobConfig.ts
index 6ec7e0e..a846432 100644
--- a/src/serialization/resources/jobs/types/ExportJobConfig.ts
+++ b/src/serialization/resources/jobs/types/ExportJobConfig.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { ExportOptions } from "./ExportOptions";
 
@@ -13,3 +12,3 @@ export const ExportJobConfig: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    options: ExportOptions,
+    options: core.serialization.lazyObject(async () => (await import("../../..")).ExportOptions),
 });
@@ -18,3 +17,3 @@ export declare namespace ExportJobConfig {
     interface Raw {
-        options: ExportOptions.Raw;
+        options: serializers.ExportOptions.Raw;
     }
diff --git a/src/serialization/resources/jobs/types/ExportOptions.ts b/src/serialization/resources/jobs/types/ExportOptions.ts
index 69719ef..a8f4db9 100644
--- a/src/serialization/resources/jobs/types/ExportOptions.ts
+++ b/src/serialization/resources/jobs/types/ExportOptions.ts
@@ -7,11 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { VersionId } from "../../commons/types/VersionId";
-import { CommitId } from "../../commons/types/CommitId";
-import { SortField } from "../../commons/types/SortField";
-import { SortDirection } from "../../commons/types/SortDirection";
-import { Filter } from "../../commons/types/Filter";
-import { FilterField } from "../../commons/types/FilterField";
-import { SearchValue } from "../../commons/types/SearchValue";
-import { SearchField } from "../../commons/types/SearchField";
-import { RecordId } from "../../commons/types/RecordId";
 
@@ -19,12 +10,14 @@ export const ExportOptions: core.serialization.ObjectSchema<serializers.ExportOp
     core.serialization.object({
-        versionId: VersionId.optional(),
-        commitId: CommitId.optional(),
-        sortField: SortField.optional(),
-        sortDirection: SortDirection.optional(),
-        filter: Filter.optional(),
-        filterField: FilterField.optional(),
-        searchValue: SearchValue.optional(),
-        searchField: SearchField.optional(),
+        versionId: core.serialization.lazy(async () => (await import("../../..")).VersionId).optional(),
+        commitId: core.serialization.lazy(async () => (await import("../../..")).CommitId).optional(),
+        sortField: core.serialization.lazy(async () => (await import("../../..")).SortField).optional(),
+        sortDirection: core.serialization.lazy(async () => (await import("../../..")).SortDirection).optional(),
+        filter: core.serialization.lazy(async () => (await import("../../..")).Filter).optional(),
+        filterField: core.serialization.lazy(async () => (await import("../../..")).FilterField).optional(),
+        searchValue: core.serialization.lazy(async () => (await import("../../..")).SearchValue).optional(),
+        searchField: core.serialization.lazy(async () => (await import("../../..")).SearchField).optional(),
         q: core.serialization.string().optional(),
-        ids: core.serialization.list(RecordId).optional(),
+        ids: core.serialization
+            .list(core.serialization.lazy(async () => (await import("../../..")).RecordId))
+            .optional(),
     });
@@ -33,12 +26,12 @@ export declare namespace ExportOptions {
     interface Raw {
-        versionId?: VersionId.Raw | null;
-        commitId?: CommitId.Raw | null;
-        sortField?: SortField.Raw | null;
-        sortDirection?: SortDirection.Raw | null;
-        filter?: Filter.Raw | null;
-        filterField?: FilterField.Raw | null;
-        searchValue?: SearchValue.Raw | null;
-        searchField?: SearchField.Raw | null;
+        versionId?: serializers.VersionId.Raw | null;
+        commitId?: serializers.CommitId.Raw | null;
+        sortField?: serializers.SortField.Raw | null;
+        sortDirection?: serializers.SortDirection.Raw | null;
+        filter?: serializers.Filter.Raw | null;
+        filterField?: serializers.FilterField.Raw | null;
+        searchValue?: serializers.SearchValue.Raw | null;
+        searchField?: serializers.SearchField.Raw | null;
         q?: string | null;
-        ids?: RecordId.Raw[] | null;
+        ids?: serializers.RecordId.Raw[] | null;
     }
diff --git a/src/serialization/resources/jobs/types/FileJobConfig.ts b/src/serialization/resources/jobs/types/FileJobConfig.ts
index 2264e24..24589c9 100644
--- a/src/serialization/resources/jobs/types/FileJobConfig.ts
+++ b/src/serialization/resources/jobs/types/FileJobConfig.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Driver } from "./Driver";
 
@@ -11,3 +10,3 @@ export const FileJobConfig: core.serialization.ObjectSchema<serializers.FileJobC
     core.serialization.object({
-        driver: Driver,
+        driver: core.serialization.lazy(async () => (await import("../../..")).Driver),
         options: core.serialization.record(core.serialization.string(), core.serialization.any()).optional(),
@@ -17,3 +16,3 @@ export declare namespace FileJobConfig {
     interface Raw {
-        driver: Driver.Raw;
+        driver: serializers.Driver.Raw;
         options?: Record<string, any> | null;
diff --git a/src/serialization/resources/jobs/types/FindAndReplaceJobConfig.ts b/src/serialization/resources/jobs/types/FindAndReplaceJobConfig.ts
index a2173f9..4053fe5 100644
--- a/src/serialization/resources/jobs/types/FindAndReplaceJobConfig.ts
+++ b/src/serialization/resources/jobs/types/FindAndReplaceJobConfig.ts
@@ -7,8 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Filter } from "../../commons/types/Filter";
-import { FilterField } from "../../commons/types/FilterField";
-import { SearchValue } from "../../commons/types/SearchValue";
-import { SearchField } from "../../commons/types/SearchField";
-import { RecordId } from "../../commons/types/RecordId";
-import { CellValueUnion } from "../../records/types/CellValueUnion";
 
@@ -18,10 +12,10 @@ export const FindAndReplaceJobConfig: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    filter: Filter.optional(),
-    filterField: FilterField.optional(),
-    searchValue: SearchValue.optional(),
-    searchField: SearchField.optional(),
+    filter: core.serialization.lazy(async () => (await import("../../..")).Filter).optional(),
+    filterField: core.serialization.lazy(async () => (await import("../../..")).FilterField).optional(),
+    searchValue: core.serialization.lazy(async () => (await import("../../..")).SearchValue).optional(),
+    searchField: core.serialization.lazy(async () => (await import("../../..")).SearchField).optional(),
     q: core.serialization.string().optional(),
-    ids: core.serialization.list(RecordId).optional(),
-    find: CellValueUnion.optional(),
-    replace: CellValueUnion.optional(),
+    ids: core.serialization.list(core.serialization.lazy(async () => (await import("../../..")).RecordId)).optional(),
+    find: core.serialization.lazy(async () => (await import("../../..")).CellValueUnion).optional(),
+    replace: core.serialization.lazy(async () => (await import("../../..")).CellValueUnion).optional(),
     fieldKey: core.serialization.string(),
@@ -31,10 +25,10 @@ export declare namespace FindAndReplaceJobConfig {
     interface Raw {
-        filter?: Filter.Raw | null;
-        filterField?: FilterField.Raw | null;
-        searchValue?: SearchValue.Raw | null;
-        searchField?: SearchField.Raw | null;
+        filter?: serializers.Filter.Raw | null;
+        filterField?: serializers.FilterField.Raw | null;
+        searchValue?: serializers.SearchValue.Raw | null;
+        searchField?: serializers.SearchField.Raw | null;
         q?: string | null;
-        ids?: RecordId.Raw[] | null;
-        find?: CellValueUnion.Raw | null;
-        replace?: CellValueUnion.Raw | null;
+        ids?: serializers.RecordId.Raw[] | null;
+        find?: serializers.CellValueUnion.Raw | null;
+        replace?: serializers.CellValueUnion.Raw | null;
         fieldKey: string;
diff --git a/src/serialization/resources/jobs/types/Job.ts b/src/serialization/resources/jobs/types/Job.ts
index 5726ad4..16a64d2 100644
--- a/src/serialization/resources/jobs/types/Job.ts
+++ b/src/serialization/resources/jobs/types/Job.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { JobId } from "../../commons/types/JobId";
-import { JobConfig } from "./JobConfig";
 
@@ -12,3 +10,3 @@ export const Job: core.serialization.ObjectSchema<serializers.Job.Raw, Flatfile.
     .object({
-        id: JobId,
+        id: core.serialization.lazy(async () => (await import("../../..")).JobId),
         createdAt: core.serialization.date(),
@@ -19,7 +17,7 @@ export const Job: core.serialization.ObjectSchema<serializers.Job.Raw, Flatfile.
     })
-    .extend(JobConfig);
+    .extend(core.serialization.lazyObject(async () => (await import("../../..")).JobConfig));
 
 export declare namespace Job {
-    interface Raw extends JobConfig.Raw {
-        id: JobId.Raw;
+    interface Raw extends serializers.JobConfig.Raw {
+        id: serializers.JobId.Raw;
         createdAt: string;
diff --git a/src/serialization/resources/jobs/types/JobCompleteDetails.ts b/src/serialization/resources/jobs/types/JobCompleteDetails.ts
index 762e8e4..a0a9321 100644
--- a/src/serialization/resources/jobs/types/JobCompleteDetails.ts
+++ b/src/serialization/resources/jobs/types/JobCompleteDetails.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { JobOutcome } from "./JobOutcome";
 
@@ -13,3 +12,3 @@ export const JobCompleteDetails: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    outcome: JobOutcome.optional(),
+    outcome: core.serialization.lazyObject(async () => (await import("../../..")).JobOutcome).optional(),
     info: core.serialization.string().optional(),
@@ -19,3 +18,3 @@ export declare namespace JobCompleteDetails {
     interface Raw {
-        outcome?: JobOutcome.Raw | null;
+        outcome?: serializers.JobOutcome.Raw | null;
         info?: string | null;
diff --git a/src/serialization/resources/jobs/types/JobConfig.ts b/src/serialization/resources/jobs/types/JobConfig.ts
index 46c6384..942ff42 100644
--- a/src/serialization/resources/jobs/types/JobConfig.ts
+++ b/src/serialization/resources/jobs/types/JobConfig.ts
@@ -7,14 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { JobType } from "./JobType";
-import { JobSource } from "./JobSource";
-import { JobDestination } from "./JobDestination";
-import { JobUpdateConfig } from "./JobUpdateConfig";
-import { Trigger } from "./Trigger";
-import { JobStatus } from "./JobStatus";
-import { FileId } from "../../commons/types/FileId";
-import { JobMode } from "./JobMode";
-import { JobSubject } from "./JobSubject";
-import { EnvironmentId } from "../../commons/types/EnvironmentId";
-import { JobPartExecution } from "./JobPartExecution";
-import { JobId } from "../../commons/types/JobId";
 
@@ -22,14 +10,14 @@ export const JobConfig: core.serialization.ObjectSchema<serializers.JobConfig.Ra
     core.serialization.object({
-        type: JobType,
+        type: core.serialization.lazy(async () => (await import("../../..")).JobType),
         operation: core.serialization.string(),
-        source: JobSource,
-        destination: JobDestination.optional(),
-        config: JobUpdateConfig.optional(),
-        trigger: Trigger.optional(),
-        status: JobStatus.optional(),
+        source: core.serialization.lazy(async () => (await import("../../..")).JobSource),
+        destination: core.serialization.lazy(async () => (await import("../../..")).JobDestination).optional(),
+        config: core.serialization.lazy(async () => (await import("../../..")).JobUpdateConfig).optional(),
+        trigger: core.serialization.lazy(async () => (await import("../../..")).Trigger).optional(),
+        status: core.serialization.lazy(async () => (await import("../../..")).JobStatus).optional(),
         progress: core.serialization.number().optional(),
-        fileId: FileId.optional(),
-        mode: JobMode.optional(),
+        fileId: core.serialization.lazy(async () => (await import("../../..")).FileId).optional(),
+        mode: core.serialization.lazy(async () => (await import("../../..")).JobMode).optional(),
         input: core.serialization.record(core.serialization.string(), core.serialization.any()).optional(),
-        subject: JobSubject.optional(),
+        subject: core.serialization.lazy(async () => (await import("../../..")).JobSubject).optional(),
         outcome: core.serialization.record(core.serialization.string(), core.serialization.any()).optional(),
@@ -37,7 +25,7 @@ export const JobConfig: core.serialization.ObjectSchema<serializers.JobConfig.Ra
         managed: core.serialization.boolean().optional(),
-        environmentId: EnvironmentId.optional(),
+        environmentId: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId).optional(),
         part: core.serialization.number().optional(),
         partData: core.serialization.record(core.serialization.string(), core.serialization.any()).optional(),
-        partExecution: JobPartExecution.optional(),
-        parentId: JobId.optional(),
+        partExecution: core.serialization.lazy(async () => (await import("../../..")).JobPartExecution).optional(),
+        parentId: core.serialization.lazy(async () => (await import("../../..")).JobId).optional(),
     });
@@ -46,14 +34,14 @@ export declare namespace JobConfig {
     interface Raw {
-        type: JobType.Raw;
+        type: serializers.JobType.Raw;
         operation: string;
-        source: JobSource.Raw;
-        destination?: JobDestination.Raw | null;
-        config?: JobUpdateConfig.Raw | null;
-        trigger?: Trigger.Raw | null;
-        status?: JobStatus.Raw | null;
+        source: serializers.JobSource.Raw;
+        destination?: serializers.JobDestination.Raw | null;
+        config?: serializers.JobUpdateConfig.Raw | null;
+        trigger?: serializers.Trigger.Raw | null;
+        status?: serializers.JobStatus.Raw | null;
         progress?: number | null;
-        fileId?: FileId.Raw | null;
-        mode?: JobMode.Raw | null;
+        fileId?: serializers.FileId.Raw | null;
+        mode?: serializers.JobMode.Raw | null;
         input?: Record<string, any> | null;
-        subject?: JobSubject.Raw | null;
+        subject?: serializers.JobSubject.Raw | null;
         outcome?: Record<string, any> | null;
@@ -61,7 +49,7 @@ export declare namespace JobConfig {
         managed?: boolean | null;
-        environmentId?: EnvironmentId.Raw | null;
+        environmentId?: serializers.EnvironmentId.Raw | null;
         part?: number | null;
         partData?: Record<string, any> | null;
-        partExecution?: JobPartExecution.Raw | null;
-        parentId?: JobId.Raw | null;
+        partExecution?: serializers.JobPartExecution.Raw | null;
+        parentId?: serializers.JobId.Raw | null;
     }
diff --git a/src/serialization/resources/jobs/types/JobDestination.ts b/src/serialization/resources/jobs/types/JobDestination.ts
index 2594d3f..21ac2f8 100644
--- a/src/serialization/resources/jobs/types/JobDestination.ts
+++ b/src/serialization/resources/jobs/types/JobDestination.ts
@@ -7,9 +7,8 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { WorkbookId } from "../../commons/types/WorkbookId";
 
 export const JobDestination: core.serialization.Schema<serializers.JobDestination.Raw, Flatfile.JobDestination> =
-    WorkbookId;
+    core.serialization.lazy(async () => (await import("../../..")).WorkbookId);
 
 export declare namespace JobDestination {
-    type Raw = WorkbookId.Raw;
+    type Raw = serializers.WorkbookId.Raw;
 }
diff --git a/src/serialization/resources/jobs/types/JobExecutionPlan.ts b/src/serialization/resources/jobs/types/JobExecutionPlan.ts
index 2937830..f392d75 100644
--- a/src/serialization/resources/jobs/types/JobExecutionPlan.ts
+++ b/src/serialization/resources/jobs/types/JobExecutionPlan.ts
@@ -7,5 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Edge } from "./Edge";
-import { SourceField } from "./SourceField";
-import { DestinationField } from "./DestinationField";
 
@@ -15,5 +12,9 @@ export const JobExecutionPlan: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    fieldMapping: core.serialization.list(Edge),
-    unmappedSourceFields: core.serialization.list(SourceField),
-    unmappedDestinationFields: core.serialization.list(DestinationField),
+    fieldMapping: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Edge)),
+    unmappedSourceFields: core.serialization.list(
+        core.serialization.lazyObject(async () => (await import("../../..")).SourceField)
+    ),
+    unmappedDestinationFields: core.serialization.list(
+        core.serialization.lazyObject(async () => (await import("../../..")).DestinationField)
+    ),
     programId: core.serialization.string().optional(),
@@ -23,5 +24,5 @@ export declare namespace JobExecutionPlan {
     interface Raw {
-        fieldMapping: Edge.Raw[];
-        unmappedSourceFields: SourceField.Raw[];
-        unmappedDestinationFields: DestinationField.Raw[];
+        fieldMapping: serializers.Edge.Raw[];
+        unmappedSourceFields: serializers.SourceField.Raw[];
+        unmappedDestinationFields: serializers.DestinationField.Raw[];
         programId?: string | null;
diff --git a/src/serialization/resources/jobs/types/JobExecutionPlanConfig.ts b/src/serialization/resources/jobs/types/JobExecutionPlanConfig.ts
index adbf6ec..4a1ff58 100644
--- a/src/serialization/resources/jobs/types/JobExecutionPlanConfig.ts
+++ b/src/serialization/resources/jobs/types/JobExecutionPlanConfig.ts
@@ -7,5 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Edge } from "./Edge";
-import { SourceField } from "./SourceField";
-import { DestinationField } from "./DestinationField";
 
@@ -15,5 +12,11 @@ export const JobExecutionPlanConfig: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    fieldMapping: core.serialization.list(Edge).optional(),
-    unmappedSourceFields: core.serialization.list(SourceField).optional(),
-    unmappedDestinationFields: core.serialization.list(DestinationField).optional(),
+    fieldMapping: core.serialization
+        .list(core.serialization.lazyObject(async () => (await import("../../..")).Edge))
+        .optional(),
+    unmappedSourceFields: core.serialization
+        .list(core.serialization.lazyObject(async () => (await import("../../..")).SourceField))
+        .optional(),
+    unmappedDestinationFields: core.serialization
+        .list(core.serialization.lazyObject(async () => (await import("../../..")).DestinationField))
+        .optional(),
     programId: core.serialization.string().optional(),
@@ -23,5 +26,5 @@ export declare namespace JobExecutionPlanConfig {
     interface Raw {
-        fieldMapping?: Edge.Raw[] | null;
-        unmappedSourceFields?: SourceField.Raw[] | null;
-        unmappedDestinationFields?: DestinationField.Raw[] | null;
+        fieldMapping?: serializers.Edge.Raw[] | null;
+        unmappedSourceFields?: serializers.SourceField.Raw[] | null;
+        unmappedDestinationFields?: serializers.DestinationField.Raw[] | null;
         programId?: string | null;
diff --git a/src/serialization/resources/jobs/types/JobExecutionPlanConfigRequest.ts b/src/serialization/resources/jobs/types/JobExecutionPlanConfigRequest.ts
index b0be6dd..3297026 100644
--- a/src/serialization/resources/jobs/types/JobExecutionPlanConfigRequest.ts
+++ b/src/serialization/resources/jobs/types/JobExecutionPlanConfigRequest.ts
@@ -7,5 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { FileId } from "../../commons/types/FileId";
-import { JobId } from "../../commons/types/JobId";
-import { JobExecutionPlanConfig } from "./JobExecutionPlanConfig";
 
@@ -16,11 +13,11 @@ export const JobExecutionPlanConfigRequest: core.serialization.ObjectSchema<
     .object({
-        fileId: FileId,
-        jobId: JobId,
+        fileId: core.serialization.lazy(async () => (await import("../../..")).FileId),
+        jobId: core.serialization.lazy(async () => (await import("../../..")).JobId),
     })
-    .extend(JobExecutionPlanConfig);
+    .extend(core.serialization.lazyObject(async () => (await import("../../..")).JobExecutionPlanConfig));
 
 export declare namespace JobExecutionPlanConfigRequest {
-    interface Raw extends JobExecutionPlanConfig.Raw {
-        fileId: FileId.Raw;
-        jobId: JobId.Raw;
+    interface Raw extends serializers.JobExecutionPlanConfig.Raw {
+        fileId: serializers.FileId.Raw;
+        jobId: serializers.JobId.Raw;
     }
diff --git a/src/serialization/resources/jobs/types/JobExecutionPlanRequest.ts b/src/serialization/resources/jobs/types/JobExecutionPlanRequest.ts
index 79eb9f7..8fae6d3 100644
--- a/src/serialization/resources/jobs/types/JobExecutionPlanRequest.ts
+++ b/src/serialization/resources/jobs/types/JobExecutionPlanRequest.ts
@@ -7,5 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { FileId } from "../../commons/types/FileId";
-import { JobId } from "../../commons/types/JobId";
-import { JobExecutionPlan } from "./JobExecutionPlan";
 
@@ -16,11 +13,11 @@ export const JobExecutionPlanRequest: core.serialization.ObjectSchema<
     .object({
-        fileId: FileId,
-        jobId: JobId,
+        fileId: core.serialization.lazy(async () => (await import("../../..")).FileId),
+        jobId: core.serialization.lazy(async () => (await import("../../..")).JobId),
     })
-    .extend(JobExecutionPlan);
+    .extend(core.serialization.lazyObject(async () => (await import("../../..")).JobExecutionPlan));
 
 export declare namespace JobExecutionPlanRequest {
-    interface Raw extends JobExecutionPlan.Raw {
-        fileId: FileId.Raw;
-        jobId: JobId.Raw;
+    interface Raw extends serializers.JobExecutionPlan.Raw {
+        fileId: serializers.FileId.Raw;
+        jobId: serializers.JobId.Raw;
     }
diff --git a/src/serialization/resources/jobs/types/JobOutcome.ts b/src/serialization/resources/jobs/types/JobOutcome.ts
index f5fe6b9..fc3fd24 100644
--- a/src/serialization/resources/jobs/types/JobOutcome.ts
+++ b/src/serialization/resources/jobs/types/JobOutcome.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { JobOutcomeNext } from "./JobOutcomeNext";
 
@@ -13,3 +12,3 @@ export const JobOutcome: core.serialization.ObjectSchema<serializers.JobOutcome.
         buttonText: core.serialization.string().optional(),
-        next: JobOutcomeNext.optional(),
+        next: core.serialization.lazy(async () => (await import("../../..")).JobOutcomeNext).optional(),
         heading: core.serialization.string().optional(),
@@ -23,3 +22,3 @@ export declare namespace JobOutcome {
         buttonText?: string | null;
-        next?: JobOutcomeNext.Raw | null;
+        next?: serializers.JobOutcomeNext.Raw | null;
         heading?: string | null;
diff --git a/src/serialization/resources/jobs/types/JobOutcomeNext.ts b/src/serialization/resources/jobs/types/JobOutcomeNext.ts
index b7cddc0..fc2c959 100644
--- a/src/serialization/resources/jobs/types/JobOutcomeNext.ts
+++ b/src/serialization/resources/jobs/types/JobOutcomeNext.ts
@@ -7,8 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { JobOutcomeNextId } from "./JobOutcomeNextId";
-import { JobOutcomeNextUrl } from "./JobOutcomeNextUrl";
-import { JobOutcomeNextDownload } from "./JobOutcomeNextDownload";
-import { JobOutcomeNextWait } from "./JobOutcomeNextWait";
-import { JobOutcomeNextSnapshot } from "./JobOutcomeNextSnapshot";
-import { JobOutcomeNextRetry } from "./JobOutcomeNextRetry";
 
@@ -17,8 +11,8 @@ export const JobOutcomeNext: core.serialization.Schema<serializers.JobOutcomeNex
         .union("type", {
-            id: JobOutcomeNextId,
-            url: JobOutcomeNextUrl,
-            download: JobOutcomeNextDownload,
-            wait: JobOutcomeNextWait,
-            snapshot: JobOutcomeNextSnapshot,
-            retry: JobOutcomeNextRetry,
+            id: core.serialization.lazyObject(async () => (await import("../../..")).JobOutcomeNextId),
+            url: core.serialization.lazyObject(async () => (await import("../../..")).JobOutcomeNextUrl),
+            download: core.serialization.lazyObject(async () => (await import("../../..")).JobOutcomeNextDownload),
+            wait: core.serialization.lazyObject(async () => (await import("../../..")).JobOutcomeNextWait),
+            snapshot: core.serialization.lazyObject(async () => (await import("../../..")).JobOutcomeNextSnapshot),
+            retry: core.serialization.lazyObject(async () => (await import("../../..")).JobOutcomeNextRetry),
         })
@@ -38,3 +32,3 @@ export declare namespace JobOutcomeNext {
 
-    interface Id extends JobOutcomeNextId.Raw {
+    interface Id extends serializers.JobOutcomeNextId.Raw {
         type: "id";
@@ -42,3 +36,3 @@ export declare namespace JobOutcomeNext {
 
-    interface Url extends JobOutcomeNextUrl.Raw {
+    interface Url extends serializers.JobOutcomeNextUrl.Raw {
         type: "url";
@@ -46,3 +40,3 @@ export declare namespace JobOutcomeNext {
 
-    interface Download extends JobOutcomeNextDownload.Raw {
+    interface Download extends serializers.JobOutcomeNextDownload.Raw {
         type: "download";
@@ -50,3 +44,3 @@ export declare namespace JobOutcomeNext {
 
-    interface Wait extends JobOutcomeNextWait.Raw {
+    interface Wait extends serializers.JobOutcomeNextWait.Raw {
         type: "wait";
@@ -54,3 +48,3 @@ export declare namespace JobOutcomeNext {
 
-    interface Snapshot extends JobOutcomeNextSnapshot.Raw {
+    interface Snapshot extends serializers.JobOutcomeNextSnapshot.Raw {
         type: "snapshot";
@@ -58,3 +52,3 @@ export declare namespace JobOutcomeNext {
 
-    interface Retry extends JobOutcomeNextRetry.Raw {
+    interface Retry extends serializers.JobOutcomeNextRetry.Raw {
         type: "retry";
diff --git a/src/serialization/resources/jobs/types/JobParts.ts b/src/serialization/resources/jobs/types/JobParts.ts
index 3f6a1e8..87207e8 100644
--- a/src/serialization/resources/jobs/types/JobParts.ts
+++ b/src/serialization/resources/jobs/types/JobParts.ts
@@ -7,9 +7,11 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { JobPartsArray } from "./JobPartsArray";
 
 export const JobParts: core.serialization.Schema<serializers.JobParts.Raw, Flatfile.JobParts> =
-    core.serialization.undiscriminatedUnion([core.serialization.number(), JobPartsArray]);
+    core.serialization.undiscriminatedUnion([
+        core.serialization.number(),
+        core.serialization.lazy(async () => (await import("../../..")).JobPartsArray),
+    ]);
 
 export declare namespace JobParts {
-    type Raw = number | JobPartsArray.Raw;
+    type Raw = number | serializers.JobPartsArray.Raw;
 }
diff --git a/src/serialization/resources/jobs/types/JobPlan.ts b/src/serialization/resources/jobs/types/JobPlan.ts
index ceb95df..6f287d1 100644
--- a/src/serialization/resources/jobs/types/JobPlan.ts
+++ b/src/serialization/resources/jobs/types/JobPlan.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Job } from "./Job";
-import { JobExecutionPlan } from "./JobExecutionPlan";
 
@@ -12,4 +10,4 @@ export const JobPlan: core.serialization.ObjectSchema<serializers.JobPlan.Raw, F
     core.serialization.object({
-        job: Job,
-        plan: JobExecutionPlan,
+        job: core.serialization.lazyObject(async () => (await import("../../..")).Job),
+        plan: core.serialization.lazyObject(async () => (await import("../../..")).JobExecutionPlan),
     });
@@ -18,4 +16,4 @@ export declare namespace JobPlan {
     interface Raw {
-        job: Job.Raw;
-        plan: JobExecutionPlan.Raw;
+        job: serializers.Job.Raw;
+        plan: serializers.JobExecutionPlan.Raw;
     }
diff --git a/src/serialization/resources/jobs/types/JobPlanResponse.ts b/src/serialization/resources/jobs/types/JobPlanResponse.ts
index a12c053..f47c498 100644
--- a/src/serialization/resources/jobs/types/JobPlanResponse.ts
+++ b/src/serialization/resources/jobs/types/JobPlanResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { JobPlan } from "./JobPlan";
 
@@ -13,3 +12,3 @@ export const JobPlanResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: JobPlan,
+    data: core.serialization.lazyObject(async () => (await import("../../..")).JobPlan),
 });
@@ -18,3 +17,3 @@ export declare namespace JobPlanResponse {
     interface Raw {
-        data: JobPlan.Raw;
+        data: serializers.JobPlan.Raw;
     }
diff --git a/src/serialization/resources/jobs/types/JobResponse.ts b/src/serialization/resources/jobs/types/JobResponse.ts
index 6998886..02341d1 100644
--- a/src/serialization/resources/jobs/types/JobResponse.ts
+++ b/src/serialization/resources/jobs/types/JobResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Job } from "./Job";
 
@@ -11,3 +10,3 @@ export const JobResponse: core.serialization.ObjectSchema<serializers.JobRespons
     core.serialization.object({
-        data: Job,
+        data: core.serialization.lazyObject(async () => (await import("../../..")).Job),
     });
@@ -16,3 +15,3 @@ export declare namespace JobResponse {
     interface Raw {
-        data: Job.Raw;
+        data: serializers.Job.Raw;
     }
diff --git a/src/serialization/resources/jobs/types/JobSplitDetails.ts b/src/serialization/resources/jobs/types/JobSplitDetails.ts
index 647f3cb..4e6ef1c 100644
--- a/src/serialization/resources/jobs/types/JobSplitDetails.ts
+++ b/src/serialization/resources/jobs/types/JobSplitDetails.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { JobParts } from "./JobParts";
 
@@ -13,3 +12,3 @@ export const JobSplitDetails: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    parts: JobParts,
+    parts: core.serialization.lazy(async () => (await import("../../..")).JobParts),
     runInParallel: core.serialization.boolean().optional(),
@@ -19,3 +18,3 @@ export declare namespace JobSplitDetails {
     interface Raw {
-        parts: JobParts.Raw;
+        parts: serializers.JobParts.Raw;
         runInParallel?: boolean | null;
diff --git a/src/serialization/resources/jobs/types/JobSubject.ts b/src/serialization/resources/jobs/types/JobSubject.ts
index ea77ec2..9b40b0f 100644
--- a/src/serialization/resources/jobs/types/JobSubject.ts
+++ b/src/serialization/resources/jobs/types/JobSubject.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { ResourceJobSubject } from "./ResourceJobSubject";
-import { CollectionJobSubject } from "./CollectionJobSubject";
 
@@ -12,4 +10,4 @@ export const JobSubject: core.serialization.Schema<serializers.JobSubject.Raw, F
     .union("type", {
-        resource: ResourceJobSubject,
-        collection: CollectionJobSubject,
+        resource: core.serialization.lazyObject(async () => (await import("../../..")).ResourceJobSubject),
+        collection: core.serialization.lazyObject(async () => (await import("../../..")).CollectionJobSubject),
     })
@@ -23,3 +21,3 @@ export declare namespace JobSubject {
 
-    interface Resource extends ResourceJobSubject.Raw {
+    interface Resource extends serializers.ResourceJobSubject.Raw {
         type: "resource";
@@ -27,3 +25,3 @@ export declare namespace JobSubject {
 
-    interface Collection extends CollectionJobSubject.Raw {
+    interface Collection extends serializers.CollectionJobSubject.Raw {
         type: "collection";
diff --git a/src/serialization/resources/jobs/types/JobUpdate.ts b/src/serialization/resources/jobs/types/JobUpdate.ts
index 7b3c636..f4d6a2a 100644
--- a/src/serialization/resources/jobs/types/JobUpdate.ts
+++ b/src/serialization/resources/jobs/types/JobUpdate.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { JobUpdateConfig } from "./JobUpdateConfig";
-import { JobStatus } from "./JobStatus";
 
@@ -12,4 +10,4 @@ export const JobUpdate: core.serialization.ObjectSchema<serializers.JobUpdate.Ra
     core.serialization.object({
-        config: JobUpdateConfig.optional(),
-        status: JobStatus.optional(),
+        config: core.serialization.lazy(async () => (await import("../../..")).JobUpdateConfig).optional(),
+        status: core.serialization.lazy(async () => (await import("../../..")).JobStatus).optional(),
         progress: core.serialization.number().optional(),
@@ -21,4 +19,4 @@ export declare namespace JobUpdate {
     interface Raw {
-        config?: JobUpdateConfig.Raw | null;
-        status?: JobStatus.Raw | null;
+        config?: serializers.JobUpdateConfig.Raw | null;
+        status?: serializers.JobStatus.Raw | null;
         progress?: number | null;
diff --git a/src/serialization/resources/jobs/types/JobUpdateConfig.ts b/src/serialization/resources/jobs/types/JobUpdateConfig.ts
index 01fc721..fe4846d 100644
--- a/src/serialization/resources/jobs/types/JobUpdateConfig.ts
+++ b/src/serialization/resources/jobs/types/JobUpdateConfig.ts
@@ -7,10 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { DeleteRecordsJobConfig } from "./DeleteRecordsJobConfig";
-import { FileJobConfig } from "./FileJobConfig";
-import { PipelineJobConfig } from "./PipelineJobConfig";
-import { ExportJobConfig } from "./ExportJobConfig";
-import { MutateJobConfig } from "./MutateJobConfig";
-import { FindAndReplaceJobConfig } from "./FindAndReplaceJobConfig";
-import { MappingProgramJobConfig } from "./MappingProgramJobConfig";
-import { EmptyObject } from "./EmptyObject";
 
@@ -18,10 +10,10 @@ export const JobUpdateConfig: core.serialization.Schema<serializers.JobUpdateCon
     core.serialization.undiscriminatedUnion([
-        DeleteRecordsJobConfig,
-        FileJobConfig,
-        PipelineJobConfig,
-        ExportJobConfig,
-        MutateJobConfig,
-        FindAndReplaceJobConfig,
-        MappingProgramJobConfig,
-        EmptyObject,
+        core.serialization.lazyObject(async () => (await import("../../..")).DeleteRecordsJobConfig),
+        core.serialization.lazyObject(async () => (await import("../../..")).FileJobConfig),
+        core.serialization.lazyObject(async () => (await import("../../..")).PipelineJobConfig),
+        core.serialization.lazyObject(async () => (await import("../../..")).ExportJobConfig),
+        core.serialization.lazyObject(async () => (await import("../../..")).MutateJobConfig),
+        core.serialization.lazyObject(async () => (await import("../../..")).FindAndReplaceJobConfig),
+        core.serialization.lazyObject(async () => (await import("../../..")).MappingProgramJobConfig),
+        core.serialization.lazyObject(async () => (await import("../../..")).EmptyObject),
     ]);
@@ -30,10 +22,10 @@ export declare namespace JobUpdateConfig {
     type Raw =
-        | DeleteRecordsJobConfig.Raw
-        | FileJobConfig.Raw
-        | PipelineJobConfig.Raw
-        | ExportJobConfig.Raw
-        | MutateJobConfig.Raw
-        | FindAndReplaceJobConfig.Raw
-        | MappingProgramJobConfig.Raw
-        | EmptyObject.Raw;
+        | serializers.DeleteRecordsJobConfig.Raw
+        | serializers.FileJobConfig.Raw
+        | serializers.PipelineJobConfig.Raw
+        | serializers.ExportJobConfig.Raw
+        | serializers.MutateJobConfig.Raw
+        | serializers.FindAndReplaceJobConfig.Raw
+        | serializers.MappingProgramJobConfig.Raw
+        | serializers.EmptyObject.Raw;
 }
diff --git a/src/serialization/resources/jobs/types/ListJobsResponse.ts b/src/serialization/resources/jobs/types/ListJobsResponse.ts
index b5530f7..a6e41ec 100644
--- a/src/serialization/resources/jobs/types/ListJobsResponse.ts
+++ b/src/serialization/resources/jobs/types/ListJobsResponse.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Pagination } from "../../commons/types/Pagination";
-import { Job } from "./Job";
 
@@ -14,4 +12,4 @@ export const ListJobsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    pagination: Pagination.optional(),
-    data: core.serialization.list(Job),
+    pagination: core.serialization.lazyObject(async () => (await import("../../..")).Pagination).optional(),
+    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Job)),
 });
@@ -20,4 +18,4 @@ export declare namespace ListJobsResponse {
     interface Raw {
-        pagination?: Pagination.Raw | null;
-        data: Job.Raw[];
+        pagination?: serializers.Pagination.Raw | null;
+        data: serializers.Job.Raw[];
     }
diff --git a/src/serialization/resources/jobs/types/MappingProgramJobConfig.ts b/src/serialization/resources/jobs/types/MappingProgramJobConfig.ts
index 7544b66..69b786f 100644
--- a/src/serialization/resources/jobs/types/MappingProgramJobConfig.ts
+++ b/src/serialization/resources/jobs/types/MappingProgramJobConfig.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { SheetId } from "../../commons/types/SheetId";
 
@@ -13,4 +12,4 @@ export const MappingProgramJobConfig: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    sourceSheetId: SheetId,
-    destinationSheetId: SheetId,
+    sourceSheetId: core.serialization.lazy(async () => (await import("../../..")).SheetId),
+    destinationSheetId: core.serialization.lazy(async () => (await import("../../..")).SheetId),
     mappingRules: core.serialization.list(
@@ -22,4 +21,4 @@ export declare namespace MappingProgramJobConfig {
     interface Raw {
-        sourceSheetId: SheetId.Raw;
-        destinationSheetId: SheetId.Raw;
+        sourceSheetId: serializers.SheetId.Raw;
+        destinationSheetId: serializers.SheetId.Raw;
         mappingRules: Record<string, any>[];
diff --git a/src/serialization/resources/jobs/types/Metadata.ts b/src/serialization/resources/jobs/types/Metadata.ts
index 469d161..857c189 100644
--- a/src/serialization/resources/jobs/types/Metadata.ts
+++ b/src/serialization/resources/jobs/types/Metadata.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Certainty } from "./Certainty";
 
@@ -11,3 +10,3 @@ export const Metadata: core.serialization.ObjectSchema<serializers.Metadata.Raw,
     core.serialization.object({
-        certainty: Certainty.optional(),
+        certainty: core.serialization.lazy(async () => (await import("../../..")).Certainty).optional(),
         confidence: core.serialization.number().optional(),
@@ -18,3 +17,3 @@ export declare namespace Metadata {
     interface Raw {
-        certainty?: Certainty.Raw | null;
+        certainty?: serializers.Certainty.Raw | null;
         confidence?: number | null;
diff --git a/src/serialization/resources/jobs/types/MutateJobConfig.ts b/src/serialization/resources/jobs/types/MutateJobConfig.ts
index 6723d82..0693fed 100644
--- a/src/serialization/resources/jobs/types/MutateJobConfig.ts
+++ b/src/serialization/resources/jobs/types/MutateJobConfig.ts
@@ -7,8 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { SheetId } from "../../commons/types/SheetId";
-import { Filter } from "../../commons/types/Filter";
-import { FilterField } from "../../commons/types/FilterField";
-import { SearchValue } from "../../commons/types/SearchValue";
-import { SearchField } from "../../commons/types/SearchField";
-import { RecordId } from "../../commons/types/RecordId";
 
@@ -18,12 +12,11 @@ export const MutateJobConfig: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    sheetId: SheetId,
+    sheetId: core.serialization.lazy(async () => (await import("../../..")).SheetId),
     mutateRecord: core.serialization.string(),
     mutationId: core.serialization.string().optional(),
-    snapshotLabel: core.serialization.string().optional(),
-    filter: Filter.optional(),
-    filterField: FilterField.optional(),
-    searchValue: SearchValue.optional(),
-    searchField: SearchField.optional(),
+    filter: core.serialization.lazy(async () => (await import("../../..")).Filter).optional(),
+    filterField: core.serialization.lazy(async () => (await import("../../..")).FilterField).optional(),
+    searchValue: core.serialization.lazy(async () => (await import("../../..")).SearchValue).optional(),
+    searchField: core.serialization.lazy(async () => (await import("../../..")).SearchField).optional(),
     q: core.serialization.string().optional(),
-    ids: core.serialization.list(RecordId).optional(),
+    ids: core.serialization.list(core.serialization.lazy(async () => (await import("../../..")).RecordId)).optional(),
 });
@@ -32,12 +25,11 @@ export declare namespace MutateJobConfig {
     interface Raw {
-        sheetId: SheetId.Raw;
+        sheetId: serializers.SheetId.Raw;
         mutateRecord: string;
         mutationId?: string | null;
-        snapshotLabel?: string | null;
-        filter?: Filter.Raw | null;
-        filterField?: FilterField.Raw | null;
-        searchValue?: SearchValue.Raw | null;
-        searchField?: SearchField.Raw | null;
+        filter?: serializers.Filter.Raw | null;
+        filterField?: serializers.FilterField.Raw | null;
+        searchValue?: serializers.SearchValue.Raw | null;
+        searchField?: serializers.SearchField.Raw | null;
         q?: string | null;
-        ids?: RecordId.Raw[] | null;
+        ids?: serializers.RecordId.Raw[] | null;
     }
diff --git a/src/serialization/resources/jobs/types/PipelineJobConfig.ts b/src/serialization/resources/jobs/types/PipelineJobConfig.ts
index a100e02..bdfe772 100644
--- a/src/serialization/resources/jobs/types/PipelineJobConfig.ts
+++ b/src/serialization/resources/jobs/types/PipelineJobConfig.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { SheetId } from "../../commons/types/SheetId";
 
@@ -13,4 +12,4 @@ export const PipelineJobConfig: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    sourceSheetId: SheetId,
-    destinationSheetId: SheetId,
+    sourceSheetId: core.serialization.lazy(async () => (await import("../../..")).SheetId),
+    destinationSheetId: core.serialization.lazy(async () => (await import("../../..")).SheetId),
 });
@@ -19,4 +18,4 @@ export declare namespace PipelineJobConfig {
     interface Raw {
-        sourceSheetId: SheetId.Raw;
-        destinationSheetId: SheetId.Raw;
+        sourceSheetId: serializers.SheetId.Raw;
+        destinationSheetId: serializers.SheetId.Raw;
     }
diff --git a/src/serialization/resources/jobs/types/SourceField.ts b/src/serialization/resources/jobs/types/SourceField.ts
index a5010b2..4a4115f 100644
--- a/src/serialization/resources/jobs/types/SourceField.ts
+++ b/src/serialization/resources/jobs/types/SourceField.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Property } from "../../property/types/Property";
 
@@ -11,3 +10,3 @@ export const SourceField: core.serialization.ObjectSchema<serializers.SourceFiel
     core.serialization.object({
-        sourceField: Property,
+        sourceField: core.serialization.lazy(async () => (await import("../../..")).Property),
         preview: core.serialization.list(core.serialization.string()).optional(),
@@ -17,3 +16,3 @@ export declare namespace SourceField {
     interface Raw {
-        sourceField: Property.Raw;
+        sourceField: serializers.Property.Raw;
         preview?: string[] | null;
diff --git a/src/serialization/resources/mapping/types/CreateMappingRulesRequest.ts b/src/serialization/resources/mapping/types/CreateMappingRulesRequest.ts
index 56bc173..0164b1d 100644
--- a/src/serialization/resources/mapping/types/CreateMappingRulesRequest.ts
+++ b/src/serialization/resources/mapping/types/CreateMappingRulesRequest.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { MappingRuleConfig } from "./MappingRuleConfig";
 
@@ -12,6 +11,6 @@ export const CreateMappingRulesRequest: core.serialization.Schema<
     Flatfile.CreateMappingRulesRequest
-> = core.serialization.list(MappingRuleConfig);
+> = core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).MappingRuleConfig));
 
 export declare namespace CreateMappingRulesRequest {
-    type Raw = MappingRuleConfig.Raw[];
+    type Raw = serializers.MappingRuleConfig.Raw[];
 }
diff --git a/src/serialization/resources/mapping/types/MappingRule.ts b/src/serialization/resources/mapping/types/MappingRule.ts
index 9d60a2f..105b773 100644
--- a/src/serialization/resources/mapping/types/MappingRule.ts
+++ b/src/serialization/resources/mapping/types/MappingRule.ts
@@ -7,5 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { MappingId } from "../../commons/types/MappingId";
-import { UserId } from "../../commons/types/UserId";
-import { MappingRuleConfig } from "./MappingRuleConfig";
 
@@ -14,5 +11,5 @@ export const MappingRule: core.serialization.ObjectSchema<serializers.MappingRul
         .object({
-            id: MappingId,
+            id: core.serialization.lazy(async () => (await import("../../..")).MappingId),
             confidence: core.serialization.number().optional(),
-            createdBy: UserId.optional(),
+            createdBy: core.serialization.lazy(async () => (await import("../../..")).UserId).optional(),
             createdAt: core.serialization.date(),
@@ -21,9 +18,9 @@ export const MappingRule: core.serialization.ObjectSchema<serializers.MappingRul
         })
-        .extend(MappingRuleConfig);
+        .extend(core.serialization.lazyObject(async () => (await import("../../..")).MappingRuleConfig));
 
 export declare namespace MappingRule {
-    interface Raw extends MappingRuleConfig.Raw {
-        id: MappingId.Raw;
+    interface Raw extends serializers.MappingRuleConfig.Raw {
+        id: serializers.MappingId.Raw;
         confidence?: number | null;
-        createdBy?: UserId.Raw | null;
+        createdBy?: serializers.UserId.Raw | null;
         createdAt: string;
diff --git a/src/serialization/resources/mapping/types/MappingRuleConfig.ts b/src/serialization/resources/mapping/types/MappingRuleConfig.ts
index eafd8b3..a7bf3b8 100644
--- a/src/serialization/resources/mapping/types/MappingRuleConfig.ts
+++ b/src/serialization/resources/mapping/types/MappingRuleConfig.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { UserId } from "../../commons/types/UserId";
 
@@ -17,3 +16,3 @@ export const MappingRuleConfig: core.serialization.ObjectSchema<
     acceptedAt: core.serialization.date().optional(),
-    acceptedBy: UserId.optional(),
+    acceptedBy: core.serialization.lazy(async () => (await import("../../..")).UserId).optional(),
 });
@@ -26,3 +25,3 @@ export declare namespace MappingRuleConfig {
         acceptedAt?: string | null;
-        acceptedBy?: UserId.Raw | null;
+        acceptedBy?: serializers.UserId.Raw | null;
     }
diff --git a/src/serialization/resources/mapping/types/MappingRuleOrConfig.ts b/src/serialization/resources/mapping/types/MappingRuleOrConfig.ts
index feba62d..2a9f566 100644
--- a/src/serialization/resources/mapping/types/MappingRuleOrConfig.ts
+++ b/src/serialization/resources/mapping/types/MappingRuleOrConfig.ts
@@ -7,5 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { MappingId } from "../../commons/types/MappingId";
-import { UserId } from "../../commons/types/UserId";
-import { MappingRuleConfig } from "./MappingRuleConfig";
 
@@ -16,5 +13,5 @@ export const MappingRuleOrConfig: core.serialization.ObjectSchema<
     .object({
-        id: MappingId.optional(),
+        id: core.serialization.lazy(async () => (await import("../../..")).MappingId).optional(),
         confidence: core.serialization.number().optional(),
-        createdBy: UserId.optional(),
+        createdBy: core.serialization.lazy(async () => (await import("../../..")).UserId).optional(),
         createdAt: core.serialization.date().optional(),
@@ -23,9 +20,9 @@ export const MappingRuleOrConfig: core.serialization.ObjectSchema<
     })
-    .extend(MappingRuleConfig);
+    .extend(core.serialization.lazyObject(async () => (await import("../../..")).MappingRuleConfig));
 
 export declare namespace MappingRuleOrConfig {
-    interface Raw extends MappingRuleConfig.Raw {
-        id?: MappingId.Raw | null;
+    interface Raw extends serializers.MappingRuleConfig.Raw {
+        id?: serializers.MappingId.Raw | null;
         confidence?: number | null;
-        createdBy?: UserId.Raw | null;
+        createdBy?: serializers.UserId.Raw | null;
         createdAt?: string | null;
diff --git a/src/serialization/resources/mapping/types/MappingRuleResponse.ts b/src/serialization/resources/mapping/types/MappingRuleResponse.ts
index a8b193c..17af839 100644
--- a/src/serialization/resources/mapping/types/MappingRuleResponse.ts
+++ b/src/serialization/resources/mapping/types/MappingRuleResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { MappingRule } from "./MappingRule";
 
@@ -13,3 +12,3 @@ export const MappingRuleResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: MappingRule,
+    data: core.serialization.lazyObject(async () => (await import("../../..")).MappingRule),
 });
@@ -18,3 +17,3 @@ export declare namespace MappingRuleResponse {
     interface Raw {
-        data: MappingRule.Raw;
+        data: serializers.MappingRule.Raw;
     }
diff --git a/src/serialization/resources/mapping/types/MappingRulesResponse.ts b/src/serialization/resources/mapping/types/MappingRulesResponse.ts
index e4a3403..aee3dd3 100644
--- a/src/serialization/resources/mapping/types/MappingRulesResponse.ts
+++ b/src/serialization/resources/mapping/types/MappingRulesResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { MappingRule } from "./MappingRule";
 
@@ -13,3 +12,3 @@ export const MappingRulesResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(MappingRule),
+    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).MappingRule)),
 });
@@ -18,3 +17,3 @@ export declare namespace MappingRulesResponse {
     interface Raw {
-        data: MappingRule.Raw[];
+        data: serializers.MappingRule.Raw[];
     }
diff --git a/src/serialization/resources/mapping/types/Program.ts b/src/serialization/resources/mapping/types/Program.ts
index f582437..2355da9 100644
--- a/src/serialization/resources/mapping/types/Program.ts
+++ b/src/serialization/resources/mapping/types/Program.ts
@@ -7,6 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { MappingRuleOrConfig } from "./MappingRuleOrConfig";
-import { FamilyId } from "../../commons/types/FamilyId";
-import { UserId } from "../../commons/types/UserId";
-import { ProgramSummary } from "./ProgramSummary";
 
@@ -14,11 +10,13 @@ export const Program: core.serialization.ObjectSchema<serializers.Program.Raw, F
     core.serialization.object({
-        rules: core.serialization.list(MappingRuleOrConfig),
+        rules: core.serialization.list(
+            core.serialization.lazyObject(async () => (await import("../../..")).MappingRuleOrConfig)
+        ),
         id: core.serialization.string().optional(),
         namespace: core.serialization.string().optional(),
-        familyId: FamilyId.optional(),
+        familyId: core.serialization.lazy(async () => (await import("../../..")).FamilyId).optional(),
         createdAt: core.serialization.date().optional(),
-        createdBy: UserId.optional(),
+        createdBy: core.serialization.lazy(async () => (await import("../../..")).UserId).optional(),
         sourceKeys: core.serialization.list(core.serialization.string()),
         destinationKeys: core.serialization.list(core.serialization.string()),
-        summary: ProgramSummary.optional(),
+        summary: core.serialization.lazyObject(async () => (await import("../../..")).ProgramSummary).optional(),
         accessToken: core.serialization.string().optional(),
@@ -28,11 +26,11 @@ export declare namespace Program {
     interface Raw {
-        rules: MappingRuleOrConfig.Raw[];
+        rules: serializers.MappingRuleOrConfig.Raw[];
         id?: string | null;
         namespace?: string | null;
-        familyId?: FamilyId.Raw | null;
+        familyId?: serializers.FamilyId.Raw | null;
         createdAt?: string | null;
-        createdBy?: UserId.Raw | null;
+        createdBy?: serializers.UserId.Raw | null;
         sourceKeys: string[];
         destinationKeys: string[];
-        summary?: ProgramSummary.Raw | null;
+        summary?: serializers.ProgramSummary.Raw | null;
         accessToken?: string | null;
diff --git a/src/serialization/resources/mapping/types/ProgramConfig.ts b/src/serialization/resources/mapping/types/ProgramConfig.ts
index f9e3006..5526272 100644
--- a/src/serialization/resources/mapping/types/ProgramConfig.ts
+++ b/src/serialization/resources/mapping/types/ProgramConfig.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { SheetConfig } from "../../sheets/types/SheetConfig";
-import { FamilyId } from "../../commons/types/FamilyId";
 
@@ -12,5 +10,5 @@ export const ProgramConfig: core.serialization.ObjectSchema<serializers.ProgramC
     core.serialization.object({
-        source: SheetConfig,
-        destination: SheetConfig,
-        familyId: FamilyId.optional(),
+        source: core.serialization.lazyObject(async () => (await import("../../..")).SheetConfig),
+        destination: core.serialization.lazyObject(async () => (await import("../../..")).SheetConfig),
+        familyId: core.serialization.lazy(async () => (await import("../../..")).FamilyId).optional(),
         namespace: core.serialization.string().optional(),
@@ -21,5 +19,5 @@ export declare namespace ProgramConfig {
     interface Raw {
-        source: SheetConfig.Raw;
-        destination: SheetConfig.Raw;
-        familyId?: FamilyId.Raw | null;
+        source: serializers.SheetConfig.Raw;
+        destination: serializers.SheetConfig.Raw;
+        familyId?: serializers.FamilyId.Raw | null;
         namespace?: string | null;
diff --git a/src/serialization/resources/mapping/types/ProgramResponse.ts b/src/serialization/resources/mapping/types/ProgramResponse.ts
index 43b871a..57ee703 100644
--- a/src/serialization/resources/mapping/types/ProgramResponse.ts
+++ b/src/serialization/resources/mapping/types/ProgramResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Program } from "./Program";
 
@@ -13,3 +12,3 @@ export const ProgramResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: Program,
+    data: core.serialization.lazyObject(async () => (await import("../../..")).Program),
 });
@@ -18,3 +17,3 @@ export declare namespace ProgramResponse {
     interface Raw {
-        data: Program.Raw;
+        data: serializers.Program.Raw;
     }
diff --git a/src/serialization/resources/mapping/types/ProgramsResponse.ts b/src/serialization/resources/mapping/types/ProgramsResponse.ts
index ac31be9..ba4122f 100644
--- a/src/serialization/resources/mapping/types/ProgramsResponse.ts
+++ b/src/serialization/resources/mapping/types/ProgramsResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Program } from "./Program";
 
@@ -13,3 +12,3 @@ export const ProgramsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(Program),
+    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Program)),
 });
@@ -18,3 +17,3 @@ export declare namespace ProgramsResponse {
     interface Raw {
-        data: Program.Raw[];
+        data: serializers.Program.Raw[];
     }
diff --git a/src/serialization/resources/mapping/types/UpdateMappingRulesRequest.ts b/src/serialization/resources/mapping/types/UpdateMappingRulesRequest.ts
index 5065740..1096d42 100644
--- a/src/serialization/resources/mapping/types/UpdateMappingRulesRequest.ts
+++ b/src/serialization/resources/mapping/types/UpdateMappingRulesRequest.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { MappingRule } from "./MappingRule";
 
@@ -12,6 +11,6 @@ export const UpdateMappingRulesRequest: core.serialization.Schema<
     Flatfile.UpdateMappingRulesRequest
-> = core.serialization.list(MappingRule);
+> = core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).MappingRule));
 
 export declare namespace UpdateMappingRulesRequest {
-    type Raw = MappingRule.Raw[];
+    type Raw = serializers.MappingRule.Raw[];
 }
diff --git a/src/serialization/resources/property/types/BaseProperty.ts b/src/serialization/resources/property/types/BaseProperty.ts
index bd9968f..291fe34 100644
--- a/src/serialization/resources/property/types/BaseProperty.ts
+++ b/src/serialization/resources/property/types/BaseProperty.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Constraint } from "./Constraint";
 
@@ -14,3 +13,5 @@ export const BaseProperty: core.serialization.ObjectSchema<serializers.BasePrope
         description: core.serialization.string().optional(),
-        constraints: core.serialization.list(Constraint).optional(),
+        constraints: core.serialization
+            .list(core.serialization.lazy(async () => (await import("../../..")).Constraint))
+            .optional(),
         readonly: core.serialization.boolean().optional(),
@@ -26,3 +27,3 @@ export declare namespace BaseProperty {
         description?: string | null;
-        constraints?: Constraint.Raw[] | null;
+        constraints?: serializers.Constraint.Raw[] | null;
         readonly?: boolean | null;
diff --git a/src/serialization/resources/property/types/BooleanProperty.ts b/src/serialization/resources/property/types/BooleanProperty.ts
index e23277a..1166da4 100644
--- a/src/serialization/resources/property/types/BooleanProperty.ts
+++ b/src/serialization/resources/property/types/BooleanProperty.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { BooleanPropertyConfig } from "./BooleanPropertyConfig";
-import { BaseProperty } from "./BaseProperty";
 
@@ -15,9 +13,9 @@ export const BooleanProperty: core.serialization.ObjectSchema<
     .object({
-        config: BooleanPropertyConfig.optional(),
+        config: core.serialization.lazyObject(async () => (await import("../../..")).BooleanPropertyConfig).optional(),
     })
-    .extend(BaseProperty);
+    .extend(core.serialization.lazyObject(async () => (await import("../../..")).BaseProperty));
 
 export declare namespace BooleanProperty {
-    interface Raw extends BaseProperty.Raw {
-        config?: BooleanPropertyConfig.Raw | null;
+    interface Raw extends serializers.BaseProperty.Raw {
+        config?: serializers.BooleanPropertyConfig.Raw | null;
     }
diff --git a/src/serialization/resources/property/types/Constraint.ts b/src/serialization/resources/property/types/Constraint.ts
index cdea10f..ae3a4ce 100644
--- a/src/serialization/resources/property/types/Constraint.ts
+++ b/src/serialization/resources/property/types/Constraint.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { UniqueConstraint } from "./UniqueConstraint";
-import { ExternalConstraint } from "./ExternalConstraint";
 
@@ -13,5 +11,5 @@ export const Constraint: core.serialization.Schema<serializers.Constraint.Raw, F
         required: core.serialization.object({}),
-        unique: UniqueConstraint,
+        unique: core.serialization.lazyObject(async () => (await import("../../..")).UniqueConstraint),
         computed: core.serialization.object({}),
-        external: ExternalConstraint,
+        external: core.serialization.lazyObject(async () => (await import("../../..")).ExternalConstraint),
     })
@@ -29,3 +27,3 @@ export declare namespace Constraint {
 
-    interface Unique extends UniqueConstraint.Raw {
+    interface Unique extends serializers.UniqueConstraint.Raw {
         type: "unique";
@@ -37,3 +35,3 @@ export declare namespace Constraint {
 
-    interface External extends ExternalConstraint.Raw {
+    interface External extends serializers.ExternalConstraint.Raw {
         type: "external";
diff --git a/src/serialization/resources/property/types/DateProperty.ts b/src/serialization/resources/property/types/DateProperty.ts
index 49335f8..9a1f13b 100644
--- a/src/serialization/resources/property/types/DateProperty.ts
+++ b/src/serialization/resources/property/types/DateProperty.ts
@@ -7,9 +7,10 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { BaseProperty } from "./BaseProperty";
 
 export const DateProperty: core.serialization.ObjectSchema<serializers.DateProperty.Raw, Flatfile.DateProperty> =
-    core.serialization.object({}).extend(BaseProperty);
+    core.serialization
+        .object({})
+        .extend(core.serialization.lazyObject(async () => (await import("../../..")).BaseProperty));
 
 export declare namespace DateProperty {
-    interface Raw extends BaseProperty.Raw {}
+    interface Raw extends serializers.BaseProperty.Raw {}
 }
diff --git a/src/serialization/resources/property/types/EnumProperty.ts b/src/serialization/resources/property/types/EnumProperty.ts
index 9b50466..8758010 100644
--- a/src/serialization/resources/property/types/EnumProperty.ts
+++ b/src/serialization/resources/property/types/EnumProperty.ts
@@ -7,5 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { EnumPropertyConfig } from "./EnumPropertyConfig";
-import { BaseProperty } from "./BaseProperty";
-import { ArrayableProperty } from "./ArrayableProperty";
 
@@ -15,11 +12,11 @@ export const EnumProperty: core.serialization.ObjectSchema<serializers.EnumPrope
             multi: core.serialization.boolean().optional(),
-            config: EnumPropertyConfig,
+            config: core.serialization.lazyObject(async () => (await import("../../..")).EnumPropertyConfig),
         })
-        .extend(BaseProperty)
-        .extend(ArrayableProperty);
+        .extend(core.serialization.lazyObject(async () => (await import("../../..")).BaseProperty))
+        .extend(core.serialization.lazyObject(async () => (await import("../../..")).ArrayableProperty));
 
 export declare namespace EnumProperty {
-    interface Raw extends BaseProperty.Raw, ArrayableProperty.Raw {
+    interface Raw extends serializers.BaseProperty.Raw, serializers.ArrayableProperty.Raw {
         multi?: boolean | null;
-        config: EnumPropertyConfig.Raw;
+        config: serializers.EnumPropertyConfig.Raw;
     }
diff --git a/src/serialization/resources/property/types/EnumPropertyConfig.ts b/src/serialization/resources/property/types/EnumPropertyConfig.ts
index 5e83efb..5744a85 100644
--- a/src/serialization/resources/property/types/EnumPropertyConfig.ts
+++ b/src/serialization/resources/property/types/EnumPropertyConfig.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { EnumPropertyOption } from "./EnumPropertyOption";
 
@@ -14,3 +13,5 @@ export const EnumPropertyConfig: core.serialization.ObjectSchema<
     allowCustom: core.serialization.boolean().optional(),
-    options: core.serialization.list(EnumPropertyOption),
+    options: core.serialization.list(
+        core.serialization.lazyObject(async () => (await import("../../..")).EnumPropertyOption)
+    ),
 });
@@ -20,3 +21,3 @@ export declare namespace EnumPropertyConfig {
         allowCustom?: boolean | null;
-        options: EnumPropertyOption.Raw[];
+        options: serializers.EnumPropertyOption.Raw[];
     }
diff --git a/src/serialization/resources/property/types/NumberProperty.ts b/src/serialization/resources/property/types/NumberProperty.ts
index 5fe97d4..37ae4ac 100644
--- a/src/serialization/resources/property/types/NumberProperty.ts
+++ b/src/serialization/resources/property/types/NumberProperty.ts
@@ -7,5 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { NumberConfig } from "./NumberConfig";
-import { BaseProperty } from "./BaseProperty";
-import { ArrayableProperty } from "./ArrayableProperty";
 
@@ -14,10 +11,10 @@ export const NumberProperty: core.serialization.ObjectSchema<serializers.NumberP
         .object({
-            config: NumberConfig.optional(),
+            config: core.serialization.lazyObject(async () => (await import("../../..")).NumberConfig).optional(),
         })
-        .extend(BaseProperty)
-        .extend(ArrayableProperty);
+        .extend(core.serialization.lazyObject(async () => (await import("../../..")).BaseProperty))
+        .extend(core.serialization.lazyObject(async () => (await import("../../..")).ArrayableProperty));
 
 export declare namespace NumberProperty {
-    interface Raw extends BaseProperty.Raw, ArrayableProperty.Raw {
-        config?: NumberConfig.Raw | null;
+    interface Raw extends serializers.BaseProperty.Raw, serializers.ArrayableProperty.Raw {
+        config?: serializers.NumberConfig.Raw | null;
     }
diff --git a/src/serialization/resources/property/types/Property.ts b/src/serialization/resources/property/types/Property.ts
index fa7c2c0..daa50a1 100644
--- a/src/serialization/resources/property/types/Property.ts
+++ b/src/serialization/resources/property/types/Property.ts
@@ -7,8 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { StringProperty } from "./StringProperty";
-import { NumberProperty } from "./NumberProperty";
-import { BooleanProperty } from "./BooleanProperty";
-import { DateProperty } from "./DateProperty";
-import { EnumProperty } from "./EnumProperty";
-import { ReferenceProperty } from "./ReferenceProperty";
 
@@ -16,8 +10,8 @@ export const Property: core.serialization.Schema<serializers.Property.Raw, Flatf
     .union("type", {
-        string: StringProperty,
-        number: NumberProperty,
-        boolean: BooleanProperty,
-        date: DateProperty,
-        enum: EnumProperty,
-        reference: ReferenceProperty,
+        string: core.serialization.lazyObject(async () => (await import("../../..")).StringProperty),
+        number: core.serialization.lazyObject(async () => (await import("../../..")).NumberProperty),
+        boolean: core.serialization.lazyObject(async () => (await import("../../..")).BooleanProperty),
+        date: core.serialization.lazyObject(async () => (await import("../../..")).DateProperty),
+        enum: core.serialization.lazyObject(async () => (await import("../../..")).EnumProperty),
+        reference: core.serialization.lazyObject(async () => (await import("../../..")).ReferenceProperty),
     })
@@ -37,3 +31,3 @@ export declare namespace Property {
 
-    interface String extends StringProperty.Raw {
+    interface String extends serializers.StringProperty.Raw {
         type: "string";
@@ -41,3 +35,3 @@ export declare namespace Property {
 
-    interface Number extends NumberProperty.Raw {
+    interface Number extends serializers.NumberProperty.Raw {
         type: "number";
@@ -45,3 +39,3 @@ export declare namespace Property {
 
-    interface Boolean extends BooleanProperty.Raw {
+    interface Boolean extends serializers.BooleanProperty.Raw {
         type: "boolean";
@@ -49,3 +43,3 @@ export declare namespace Property {
 
-    interface Date extends DateProperty.Raw {
+    interface Date extends serializers.DateProperty.Raw {
         type: "date";
@@ -53,3 +47,3 @@ export declare namespace Property {
 
-    interface Enum extends EnumProperty.Raw {
+    interface Enum extends serializers.EnumProperty.Raw {
         type: "enum";
@@ -57,3 +51,3 @@ export declare namespace Property {
 
-    interface Reference extends ReferenceProperty.Raw {
+    interface Reference extends serializers.ReferenceProperty.Raw {
         type: "reference";
diff --git a/src/serialization/resources/property/types/ReferenceProperty.ts b/src/serialization/resources/property/types/ReferenceProperty.ts
index f0dd947..cbc00cb 100644
--- a/src/serialization/resources/property/types/ReferenceProperty.ts
+++ b/src/serialization/resources/property/types/ReferenceProperty.ts
@@ -7,5 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { ReferencePropertyConfig } from "./ReferencePropertyConfig";
-import { BaseProperty } from "./BaseProperty";
-import { ArrayableProperty } from "./ArrayableProperty";
 
@@ -16,10 +13,10 @@ export const ReferenceProperty: core.serialization.ObjectSchema<
     .object({
-        config: ReferencePropertyConfig,
+        config: core.serialization.lazyObject(async () => (await import("../../..")).ReferencePropertyConfig),
     })
-    .extend(BaseProperty)
-    .extend(ArrayableProperty);
+    .extend(core.serialization.lazyObject(async () => (await import("../../..")).BaseProperty))
+    .extend(core.serialization.lazyObject(async () => (await import("../../..")).ArrayableProperty));
 
 export declare namespace ReferenceProperty {
-    interface Raw extends BaseProperty.Raw, ArrayableProperty.Raw {
-        config: ReferencePropertyConfig.Raw;
+    interface Raw extends serializers.BaseProperty.Raw, serializers.ArrayableProperty.Raw {
+        config: serializers.ReferencePropertyConfig.Raw;
     }
diff --git a/src/serialization/resources/property/types/ReferencePropertyConfig.ts b/src/serialization/resources/property/types/ReferencePropertyConfig.ts
index ec3ee54..a1dee26 100644
--- a/src/serialization/resources/property/types/ReferencePropertyConfig.ts
+++ b/src/serialization/resources/property/types/ReferencePropertyConfig.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { ReferencePropertyRelationship } from "./ReferencePropertyRelationship";
 
@@ -15,3 +14,3 @@ export const ReferencePropertyConfig: core.serialization.ObjectSchema<
     key: core.serialization.string(),
-    relationship: ReferencePropertyRelationship,
+    relationship: core.serialization.lazy(async () => (await import("../../..")).ReferencePropertyRelationship),
 });
@@ -22,3 +21,3 @@ export declare namespace ReferencePropertyConfig {
         key: string;
-        relationship: ReferencePropertyRelationship.Raw;
+        relationship: serializers.ReferencePropertyRelationship.Raw;
     }
diff --git a/src/serialization/resources/property/types/StringConfig.ts b/src/serialization/resources/property/types/StringConfig.ts
index 1587c3b..4bf5123 100644
--- a/src/serialization/resources/property/types/StringConfig.ts
+++ b/src/serialization/resources/property/types/StringConfig.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { StringConfigOptions } from "./StringConfigOptions";
 
@@ -11,3 +10,3 @@ export const StringConfig: core.serialization.ObjectSchema<serializers.StringCon
     core.serialization.object({
-        size: StringConfigOptions,
+        size: core.serialization.lazy(async () => (await import("../../..")).StringConfigOptions),
     });
@@ -16,3 +15,3 @@ export declare namespace StringConfig {
     interface Raw {
-        size: StringConfigOptions.Raw;
+        size: serializers.StringConfigOptions.Raw;
     }
diff --git a/src/serialization/resources/property/types/StringProperty.ts b/src/serialization/resources/property/types/StringProperty.ts
index 2e49118..1f170d9 100644
--- a/src/serialization/resources/property/types/StringProperty.ts
+++ b/src/serialization/resources/property/types/StringProperty.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { StringConfig } from "./StringConfig";
-import { BaseProperty } from "./BaseProperty";
 
@@ -13,9 +11,9 @@ export const StringProperty: core.serialization.ObjectSchema<serializers.StringP
         .object({
-            config: StringConfig.optional(),
+            config: core.serialization.lazyObject(async () => (await import("../../..")).StringConfig).optional(),
         })
-        .extend(BaseProperty);
+        .extend(core.serialization.lazyObject(async () => (await import("../../..")).BaseProperty));
 
 export declare namespace StringProperty {
-    interface Raw extends BaseProperty.Raw {
-        config?: StringConfig.Raw | null;
+    interface Raw extends serializers.BaseProperty.Raw {
+        config?: serializers.StringConfig.Raw | null;
     }
diff --git a/src/serialization/resources/property/types/UniqueConstraint.ts b/src/serialization/resources/property/types/UniqueConstraint.ts
index 9406a3b..190596e 100644
--- a/src/serialization/resources/property/types/UniqueConstraint.ts
+++ b/src/serialization/resources/property/types/UniqueConstraint.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { UniqueConstraintConfig } from "./UniqueConstraintConfig";
 
@@ -13,3 +12,3 @@ export const UniqueConstraint: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    config: UniqueConstraintConfig.optional(),
+    config: core.serialization.lazyObject(async () => (await import("../../..")).UniqueConstraintConfig).optional(),
 });
@@ -18,3 +17,3 @@ export declare namespace UniqueConstraint {
     interface Raw {
-        config?: UniqueConstraintConfig.Raw | null;
+        config?: serializers.UniqueConstraintConfig.Raw | null;
     }
diff --git a/src/serialization/resources/records/client/insert.ts b/src/serialization/resources/records/client/insert.ts
index 2659f7b..4cdbdce 100644
--- a/src/serialization/resources/records/client/insert.ts
+++ b/src/serialization/resources/records/client/insert.ts
@@ -7,10 +7,8 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { RecordData } from "../types/RecordData";
-import { CellValue } from "../types/CellValue";
 
 export const Request: core.serialization.Schema<serializers.records.insert.Request.Raw, Flatfile.RecordData[]> =
-    core.serialization.list(RecordData);
+    core.serialization.list(core.serialization.lazy(async () => (await import("../../..")).RecordData));
 
 export declare namespace Request {
-    type Raw = RecordData.Raw[];
+    type Raw = serializers.RecordData.Raw[];
 }
diff --git a/src/serialization/resources/records/client/requests/FindAndReplaceRecordRequest.ts b/src/serialization/resources/records/client/requests/FindAndReplaceRecordRequest.ts
index 3fe65e8..21b0aaf 100644
--- a/src/serialization/resources/records/client/requests/FindAndReplaceRecordRequest.ts
+++ b/src/serialization/resources/records/client/requests/FindAndReplaceRecordRequest.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../../api";
 import * as core from "../../../../../core";
-import { CellValueUnion } from "../../types/CellValueUnion";
 
@@ -11,6 +10,6 @@ export const FindAndReplaceRecordRequest: core.serialization.Schema<
     serializers.FindAndReplaceRecordRequest.Raw,
-    Omit<Flatfile.FindAndReplaceRecordRequest, "filter" | "filterField" | "searchValue" | "searchField" | "ids" | "q">
+    Omit<Flatfile.FindAndReplaceRecordRequest, "filter" | "filterField" | "searchValue" | "searchField" | "ids">
 > = core.serialization.object({
-    find: CellValueUnion.optional(),
-    replace: CellValueUnion.optional(),
+    find: core.serialization.lazy(async () => (await import("../../../..")).CellValueUnion).optional(),
+    replace: core.serialization.lazy(async () => (await import("../../../..")).CellValueUnion).optional(),
     fieldKey: core.serialization.string(),
@@ -20,4 +19,4 @@ export declare namespace FindAndReplaceRecordRequest {
     interface Raw {
-        find?: CellValueUnion.Raw | null;
-        replace?: CellValueUnion.Raw | null;
+        find?: serializers.CellValueUnion.Raw | null;
+        replace?: serializers.CellValueUnion.Raw | null;
         fieldKey: string;
diff --git a/src/serialization/resources/records/types/CellValue.ts b/src/serialization/resources/records/types/CellValue.ts
index 7309dd9..e64ce52 100644
--- a/src/serialization/resources/records/types/CellValue.ts
+++ b/src/serialization/resources/records/types/CellValue.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { ValidationMessage } from "./ValidationMessage";
-import { CellValueUnion } from "./CellValueUnion";
 
@@ -13,5 +11,7 @@ export const CellValue: core.serialization.ObjectSchema<serializers.CellValue.Ra
         valid: core.serialization.boolean().optional(),
-        messages: core.serialization.list(ValidationMessage).optional(),
+        messages: core.serialization
+            .list(core.serialization.lazyObject(async () => (await import("../../..")).ValidationMessage))
+            .optional(),
         metadata: core.serialization.record(core.serialization.string(), core.serialization.any()).optional(),
-        value: CellValueUnion.optional(),
+        value: core.serialization.lazy(async () => (await import("../../..")).CellValueUnion).optional(),
         layer: core.serialization.string().optional(),
@@ -23,5 +23,5 @@ export declare namespace CellValue {
         valid?: boolean | null;
-        messages?: ValidationMessage.Raw[] | null;
+        messages?: serializers.ValidationMessage.Raw[] | null;
         metadata?: Record<string, any> | null;
-        value?: CellValueUnion.Raw | null;
+        value?: serializers.CellValueUnion.Raw | null;
         layer?: string | null;
diff --git a/src/serialization/resources/records/types/CellValueWithLinks.ts b/src/serialization/resources/records/types/CellValueWithLinks.ts
index 67ee5b5..da1a316 100644
--- a/src/serialization/resources/records/types/CellValueWithLinks.ts
+++ b/src/serialization/resources/records/types/CellValueWithLinks.ts
@@ -7,5 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Records } from "./Records";
-import { CellValue } from "./CellValue";
-import { Record_ } from "./Record_";
 
@@ -16,9 +13,9 @@ export const CellValueWithLinks: core.serialization.ObjectSchema<
     .object({
-        links: Records.optional(),
+        links: core.serialization.lazy(async () => (await import("../../..")).Records).optional(),
     })
-    .extend(CellValue);
+    .extend(core.serialization.lazyObject(async () => (await import("../../..")).CellValue));
 
 export declare namespace CellValueWithLinks {
-    interface Raw extends CellValue.Raw {
-        links?: Records.Raw | null;
+    interface Raw extends serializers.CellValue.Raw {
+        links?: serializers.Records.Raw | null;
     }
diff --git a/src/serialization/resources/records/types/DiffData.ts b/src/serialization/resources/records/types/DiffData.ts
index 40aee0d..0a582ef 100644
--- a/src/serialization/resources/records/types/DiffData.ts
+++ b/src/serialization/resources/records/types/DiffData.ts
@@ -7,9 +7,11 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { DiffValue } from "./DiffValue";
 
 export const DiffData: core.serialization.Schema<serializers.DiffData.Raw, Flatfile.DiffData> =
-    core.serialization.record(core.serialization.string(), DiffValue);
+    core.serialization.record(
+        core.serialization.string(),
+        core.serialization.lazyObject(async () => (await import("../../..")).DiffValue)
+    );
 
 export declare namespace DiffData {
-    type Raw = Record<string, DiffValue.Raw>;
+    type Raw = Record<string, serializers.DiffValue.Raw>;
 }
diff --git a/src/serialization/resources/records/types/DiffRecord.ts b/src/serialization/resources/records/types/DiffRecord.ts
index a7293a8..cd635ae 100644
--- a/src/serialization/resources/records/types/DiffRecord.ts
+++ b/src/serialization/resources/records/types/DiffRecord.ts
@@ -7,5 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { DiffData } from "./DiffData";
-import { RecordBase } from "./RecordBase";
-import { DiffValue } from "./DiffValue";
 
@@ -14,9 +11,9 @@ export const DiffRecord: core.serialization.ObjectSchema<serializers.DiffRecord.
         .object({
-            values: DiffData,
+            values: core.serialization.lazy(async () => (await import("../../..")).DiffData),
         })
-        .extend(RecordBase);
+        .extend(core.serialization.lazyObject(async () => (await import("../../..")).RecordBase));
 
 export declare namespace DiffRecord {
-    interface Raw extends RecordBase.Raw {
-        values: DiffData.Raw;
+    interface Raw extends serializers.RecordBase.Raw {
+        values: serializers.DiffData.Raw;
     }
diff --git a/src/serialization/resources/records/types/DiffRecords.ts b/src/serialization/resources/records/types/DiffRecords.ts
index 081f0cf..4dd3909 100644
--- a/src/serialization/resources/records/types/DiffRecords.ts
+++ b/src/serialization/resources/records/types/DiffRecords.ts
@@ -7,9 +7,8 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { DiffRecord } from "./DiffRecord";
 
 export const DiffRecords: core.serialization.Schema<serializers.DiffRecords.Raw, Flatfile.DiffRecords> =
-    core.serialization.list(DiffRecord);
+    core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).DiffRecord));
 
 export declare namespace DiffRecords {
-    type Raw = DiffRecord.Raw[];
+    type Raw = serializers.DiffRecord.Raw[];
 }
diff --git a/src/serialization/resources/records/types/DiffRecordsResponse.ts b/src/serialization/resources/records/types/DiffRecordsResponse.ts
index 0a3bc84..4c36098 100644
--- a/src/serialization/resources/records/types/DiffRecordsResponse.ts
+++ b/src/serialization/resources/records/types/DiffRecordsResponse.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { DiffRecords } from "./DiffRecords";
-import { DiffRecord } from "./DiffRecord";
 
@@ -14,3 +12,3 @@ export const DiffRecordsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: DiffRecords,
+    data: core.serialization.lazy(async () => (await import("../../..")).DiffRecords),
 });
@@ -19,3 +17,3 @@ export declare namespace DiffRecordsResponse {
     interface Raw {
-        data: DiffRecords.Raw;
+        data: serializers.DiffRecords.Raw;
     }
diff --git a/src/serialization/resources/records/types/DiffValue.ts b/src/serialization/resources/records/types/DiffValue.ts
index 1050c0a..5ac9d92 100644
--- a/src/serialization/resources/records/types/DiffValue.ts
+++ b/src/serialization/resources/records/types/DiffValue.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { CellValueUnion } from "./CellValueUnion";
-import { CellValue } from "./CellValue";
 
@@ -13,9 +11,9 @@ export const DiffValue: core.serialization.ObjectSchema<serializers.DiffValue.Ra
         .object({
-            snapshotValue: CellValueUnion.optional(),
+            snapshotValue: core.serialization.lazy(async () => (await import("../../..")).CellValueUnion).optional(),
         })
-        .extend(CellValue);
+        .extend(core.serialization.lazyObject(async () => (await import("../../..")).CellValue));
 
 export declare namespace DiffValue {
-    interface Raw extends CellValue.Raw {
-        snapshotValue?: CellValueUnion.Raw | null;
+    interface Raw extends serializers.CellValue.Raw {
+        snapshotValue?: serializers.CellValueUnion.Raw | null;
     }
diff --git a/src/serialization/resources/records/types/GetRecordsResponse.ts b/src/serialization/resources/records/types/GetRecordsResponse.ts
index d3b4762..330b238 100644
--- a/src/serialization/resources/records/types/GetRecordsResponse.ts
+++ b/src/serialization/resources/records/types/GetRecordsResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { GetRecordsResponseData } from "./GetRecordsResponseData";
 
@@ -13,3 +12,3 @@ export const GetRecordsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: GetRecordsResponseData,
+    data: core.serialization.lazyObject(async () => (await import("../../..")).GetRecordsResponseData),
 });
@@ -18,3 +17,3 @@ export declare namespace GetRecordsResponse {
     interface Raw {
-        data: GetRecordsResponseData.Raw;
+        data: serializers.GetRecordsResponseData.Raw;
     }
diff --git a/src/serialization/resources/records/types/GetRecordsResponseData.ts b/src/serialization/resources/records/types/GetRecordsResponseData.ts
index 1f6df5f..5b258c7 100644
--- a/src/serialization/resources/records/types/GetRecordsResponseData.ts
+++ b/src/serialization/resources/records/types/GetRecordsResponseData.ts
@@ -7,8 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { RecordsWithLinks } from "./RecordsWithLinks";
-import { RecordCounts } from "./RecordCounts";
-import { VersionId } from "../../commons/types/VersionId";
-import { CommitId } from "../../commons/types/CommitId";
-import { SuccessData } from "../../commons/types/SuccessData";
-import { RecordWithLinks } from "./RecordWithLinks";
 
@@ -19,15 +13,15 @@ export const GetRecordsResponseData: core.serialization.ObjectSchema<
     .object({
-        records: RecordsWithLinks,
-        counts: RecordCounts.optional(),
-        versionId: VersionId.optional(),
-        commitId: CommitId.optional(),
+        records: core.serialization.lazy(async () => (await import("../../..")).RecordsWithLinks),
+        counts: core.serialization.lazyObject(async () => (await import("../../..")).RecordCounts).optional(),
+        versionId: core.serialization.lazy(async () => (await import("../../..")).VersionId).optional(),
+        commitId: core.serialization.lazy(async () => (await import("../../..")).CommitId).optional(),
     })
-    .extend(SuccessData);
+    .extend(core.serialization.lazyObject(async () => (await import("../../..")).SuccessData));
 
 export declare namespace GetRecordsResponseData {
-    interface Raw extends SuccessData.Raw {
-        records: RecordsWithLinks.Raw;
-        counts?: RecordCounts.Raw | null;
-        versionId?: VersionId.Raw | null;
-        commitId?: CommitId.Raw | null;
+    interface Raw extends serializers.SuccessData.Raw {
+        records: serializers.RecordsWithLinks.Raw;
+        counts?: serializers.RecordCounts.Raw | null;
+        versionId?: serializers.VersionId.Raw | null;
+        commitId?: serializers.CommitId.Raw | null;
     }
diff --git a/src/serialization/resources/records/types/RecordBase.ts b/src/serialization/resources/records/types/RecordBase.ts
index 89a03f5..2632171 100644
--- a/src/serialization/resources/records/types/RecordBase.ts
+++ b/src/serialization/resources/records/types/RecordBase.ts
@@ -7,6 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { RecordId } from "../../commons/types/RecordId";
-import { VersionId } from "../../commons/types/VersionId";
-import { CommitId } from "../../commons/types/CommitId";
-import { ValidationMessage } from "./ValidationMessage";
 
@@ -14,7 +10,9 @@ export const RecordBase: core.serialization.ObjectSchema<serializers.RecordBase.
     core.serialization.object({
-        id: RecordId,
-        versionId: VersionId.optional(),
-        commitId: CommitId.optional(),
+        id: core.serialization.lazy(async () => (await import("../../..")).RecordId),
+        versionId: core.serialization.lazy(async () => (await import("../../..")).VersionId).optional(),
+        commitId: core.serialization.lazy(async () => (await import("../../..")).CommitId).optional(),
         valid: core.serialization.boolean().optional(),
-        messages: core.serialization.list(ValidationMessage).optional(),
+        messages: core.serialization
+            .list(core.serialization.lazyObject(async () => (await import("../../..")).ValidationMessage))
+            .optional(),
         metadata: core.serialization.record(core.serialization.string(), core.serialization.any()).optional(),
@@ -24,7 +22,7 @@ export declare namespace RecordBase {
     interface Raw {
-        id: RecordId.Raw;
-        versionId?: VersionId.Raw | null;
-        commitId?: CommitId.Raw | null;
+        id: serializers.RecordId.Raw;
+        versionId?: serializers.VersionId.Raw | null;
+        commitId?: serializers.CommitId.Raw | null;
         valid?: boolean | null;
-        messages?: ValidationMessage.Raw[] | null;
+        messages?: serializers.ValidationMessage.Raw[] | null;
         metadata?: Record<string, any> | null;
diff --git a/src/serialization/resources/records/types/RecordCounts.ts b/src/serialization/resources/records/types/RecordCounts.ts
index 8522483..0ab7c36 100644
--- a/src/serialization/resources/records/types/RecordCounts.ts
+++ b/src/serialization/resources/records/types/RecordCounts.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { FieldRecordCounts } from "./FieldRecordCounts";
 
@@ -15,3 +14,8 @@ export const RecordCounts: core.serialization.ObjectSchema<serializers.RecordCou
         errorsByField: core.serialization.record(core.serialization.string(), core.serialization.number()).optional(),
-        byField: core.serialization.record(core.serialization.string(), FieldRecordCounts).optional(),
+        byField: core.serialization
+            .record(
+                core.serialization.string(),
+                core.serialization.lazyObject(async () => (await import("../../..")).FieldRecordCounts)
+            )
+            .optional(),
     });
@@ -24,3 +28,3 @@ export declare namespace RecordCounts {
         errorsByField?: Record<string, number> | null;
-        byField?: Record<string, FieldRecordCounts.Raw> | null;
+        byField?: Record<string, serializers.FieldRecordCounts.Raw> | null;
     }
diff --git a/src/serialization/resources/records/types/RecordData.ts b/src/serialization/resources/records/types/RecordData.ts
index d1f50a0..6cc2b65 100644
--- a/src/serialization/resources/records/types/RecordData.ts
+++ b/src/serialization/resources/records/types/RecordData.ts
@@ -7,9 +7,11 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { CellValue } from "./CellValue";
 
 export const RecordData: core.serialization.Schema<serializers.RecordData.Raw, Flatfile.RecordData> =
-    core.serialization.record(core.serialization.string(), CellValue);
+    core.serialization.record(
+        core.serialization.string(),
+        core.serialization.lazyObject(async () => (await import("../../..")).CellValue)
+    );
 
 export declare namespace RecordData {
-    type Raw = Record<string, CellValue.Raw>;
+    type Raw = Record<string, serializers.CellValue.Raw>;
 }
diff --git a/src/serialization/resources/records/types/RecordDataWithLinks.ts b/src/serialization/resources/records/types/RecordDataWithLinks.ts
index 47aedbb..84354e5 100644
--- a/src/serialization/resources/records/types/RecordDataWithLinks.ts
+++ b/src/serialization/resources/records/types/RecordDataWithLinks.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { CellValueWithLinks } from "./CellValueWithLinks";
 
@@ -12,6 +11,9 @@ export const RecordDataWithLinks: core.serialization.Schema<
     Flatfile.RecordDataWithLinks
-> = core.serialization.record(core.serialization.string(), CellValueWithLinks);
+> = core.serialization.record(
+    core.serialization.string(),
+    core.serialization.lazyObject(async () => (await import("../../..")).CellValueWithLinks)
+);
 
 export declare namespace RecordDataWithLinks {
-    type Raw = Record<string, CellValueWithLinks.Raw>;
+    type Raw = Record<string, serializers.CellValueWithLinks.Raw>;
 }
diff --git a/src/serialization/resources/records/types/RecordWithLinks.ts b/src/serialization/resources/records/types/RecordWithLinks.ts
index 40002b9..7a03350 100644
--- a/src/serialization/resources/records/types/RecordWithLinks.ts
+++ b/src/serialization/resources/records/types/RecordWithLinks.ts
@@ -7,6 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { RecordId } from "../../commons/types/RecordId";
-import { RecordDataWithLinks } from "./RecordDataWithLinks";
-import { ValidationMessage } from "./ValidationMessage";
-import { CellValueWithLinks } from "./CellValueWithLinks";
 
@@ -16,6 +12,8 @@ export const RecordWithLinks: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    id: RecordId,
-    values: RecordDataWithLinks,
+    id: core.serialization.lazy(async () => (await import("../../..")).RecordId),
+    values: core.serialization.lazy(async () => (await import("../../..")).RecordDataWithLinks),
     valid: core.serialization.boolean().optional(),
-    messages: core.serialization.list(ValidationMessage).optional(),
+    messages: core.serialization
+        .list(core.serialization.lazyObject(async () => (await import("../../..")).ValidationMessage))
+        .optional(),
     metadata: core.serialization.record(core.serialization.string(), core.serialization.any()).optional(),
@@ -25,6 +23,6 @@ export declare namespace RecordWithLinks {
     interface Raw {
-        id: RecordId.Raw;
-        values: RecordDataWithLinks.Raw;
+        id: serializers.RecordId.Raw;
+        values: serializers.RecordDataWithLinks.Raw;
         valid?: boolean | null;
-        messages?: ValidationMessage.Raw[] | null;
+        messages?: serializers.ValidationMessage.Raw[] | null;
         metadata?: Record<string, any> | null;
diff --git a/src/serialization/resources/records/types/Record_.ts b/src/serialization/resources/records/types/Record_.ts
index ac41762..ed545bc 100644
--- a/src/serialization/resources/records/types/Record_.ts
+++ b/src/serialization/resources/records/types/Record_.ts
@@ -7,5 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { RecordData } from "./RecordData";
-import { RecordBase } from "./RecordBase";
-import { CellValue } from "./CellValue";
 
@@ -13,9 +10,9 @@ export const Record_: core.serialization.ObjectSchema<serializers.Record_.Raw, F
     .object({
-        values: RecordData,
+        values: core.serialization.lazy(async () => (await import("../../..")).RecordData),
     })
-    .extend(RecordBase);
+    .extend(core.serialization.lazyObject(async () => (await import("../../..")).RecordBase));
 
 export declare namespace Record_ {
-    interface Raw extends RecordBase.Raw {
-        values: RecordData.Raw;
+    interface Raw extends serializers.RecordBase.Raw {
+        values: serializers.RecordData.Raw;
     }
diff --git a/src/serialization/resources/records/types/Records.ts b/src/serialization/resources/records/types/Records.ts
index 5396531..3d4b638 100644
--- a/src/serialization/resources/records/types/Records.ts
+++ b/src/serialization/resources/records/types/Records.ts
@@ -7,9 +7,9 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Record_ } from "./Record_";
 
-export const Records: core.serialization.Schema<serializers.Records.Raw, Flatfile.Records> =
-    core.serialization.list(Record_);
+export const Records: core.serialization.Schema<serializers.Records.Raw, Flatfile.Records> = core.serialization.list(
+    core.serialization.lazyObject(async () => (await import("../../..")).Record_)
+);
 
 export declare namespace Records {
-    type Raw = Record_.Raw[];
+    type Raw = serializers.Record_.Raw[];
 }
diff --git a/src/serialization/resources/records/types/RecordsResponse.ts b/src/serialization/resources/records/types/RecordsResponse.ts
index ceefccf..1984d89 100644
--- a/src/serialization/resources/records/types/RecordsResponse.ts
+++ b/src/serialization/resources/records/types/RecordsResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { RecordsResponseData } from "./RecordsResponseData";
 
@@ -13,3 +12,3 @@ export const RecordsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: RecordsResponseData,
+    data: core.serialization.lazyObject(async () => (await import("../../..")).RecordsResponseData),
 });
@@ -18,3 +17,3 @@ export declare namespace RecordsResponse {
     interface Raw {
-        data: RecordsResponseData.Raw;
+        data: serializers.RecordsResponseData.Raw;
     }
diff --git a/src/serialization/resources/records/types/RecordsResponseData.ts b/src/serialization/resources/records/types/RecordsResponseData.ts
index 9644a9a..916cf54 100644
--- a/src/serialization/resources/records/types/RecordsResponseData.ts
+++ b/src/serialization/resources/records/types/RecordsResponseData.ts
@@ -7,8 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { RecordsWithLinks } from "./RecordsWithLinks";
-import { RecordCounts } from "./RecordCounts";
-import { VersionId } from "../../commons/types/VersionId";
-import { CommitId } from "../../commons/types/CommitId";
-import { SuccessData } from "../../commons/types/SuccessData";
-import { RecordWithLinks } from "./RecordWithLinks";
 
@@ -19,15 +13,15 @@ export const RecordsResponseData: core.serialization.ObjectSchema<
     .object({
-        records: RecordsWithLinks.optional(),
-        counts: RecordCounts.optional(),
-        versionId: VersionId.optional(),
-        commitId: CommitId.optional(),
+        records: core.serialization.lazy(async () => (await import("../../..")).RecordsWithLinks).optional(),
+        counts: core.serialization.lazyObject(async () => (await import("../../..")).RecordCounts).optional(),
+        versionId: core.serialization.lazy(async () => (await import("../../..")).VersionId).optional(),
+        commitId: core.serialization.lazy(async () => (await import("../../..")).CommitId).optional(),
     })
-    .extend(SuccessData);
+    .extend(core.serialization.lazyObject(async () => (await import("../../..")).SuccessData));
 
 export declare namespace RecordsResponseData {
-    interface Raw extends SuccessData.Raw {
-        records?: RecordsWithLinks.Raw | null;
-        counts?: RecordCounts.Raw | null;
-        versionId?: VersionId.Raw | null;
-        commitId?: CommitId.Raw | null;
+    interface Raw extends serializers.SuccessData.Raw {
+        records?: serializers.RecordsWithLinks.Raw | null;
+        counts?: serializers.RecordCounts.Raw | null;
+        versionId?: serializers.VersionId.Raw | null;
+        commitId?: serializers.CommitId.Raw | null;
     }
diff --git a/src/serialization/resources/records/types/RecordsWithLinks.ts b/src/serialization/resources/records/types/RecordsWithLinks.ts
index b28d744..e038b8b 100644
--- a/src/serialization/resources/records/types/RecordsWithLinks.ts
+++ b/src/serialization/resources/records/types/RecordsWithLinks.ts
@@ -7,9 +7,8 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { RecordWithLinks } from "./RecordWithLinks";
 
 export const RecordsWithLinks: core.serialization.Schema<serializers.RecordsWithLinks.Raw, Flatfile.RecordsWithLinks> =
-    core.serialization.list(RecordWithLinks);
+    core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).RecordWithLinks));
 
 export declare namespace RecordsWithLinks {
-    type Raw = RecordWithLinks.Raw[];
+    type Raw = serializers.RecordWithLinks.Raw[];
 }
diff --git a/src/serialization/resources/records/types/ValidationMessage.ts b/src/serialization/resources/records/types/ValidationMessage.ts
index 7a34f9f..c8d5ade 100644
--- a/src/serialization/resources/records/types/ValidationMessage.ts
+++ b/src/serialization/resources/records/types/ValidationMessage.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { ValidationType } from "./ValidationType";
-import { ValidationSource } from "./ValidationSource";
 
@@ -14,4 +12,4 @@ export const ValidationMessage: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    type: ValidationType.optional(),
-    source: ValidationSource.optional(),
+    type: core.serialization.lazy(async () => (await import("../../..")).ValidationType).optional(),
+    source: core.serialization.lazy(async () => (await import("../../..")).ValidationSource).optional(),
     message: core.serialization.string().optional(),
@@ -21,4 +19,4 @@ export declare namespace ValidationMessage {
     interface Raw {
-        type?: ValidationType.Raw | null;
-        source?: ValidationSource.Raw | null;
+        type?: serializers.ValidationType.Raw | null;
+        source?: serializers.ValidationSource.Raw | null;
         message?: string | null;
diff --git a/src/serialization/resources/roles/types/ActorIdUnion.ts b/src/serialization/resources/roles/types/ActorIdUnion.ts
index c36a440..f1dfdbd 100644
--- a/src/serialization/resources/roles/types/ActorIdUnion.ts
+++ b/src/serialization/resources/roles/types/ActorIdUnion.ts
@@ -7,11 +7,12 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { UserId } from "../../commons/types/UserId";
-import { AgentId } from "../../commons/types/AgentId";
-import { GuestId } from "../../commons/types/GuestId";
 
 export const ActorIdUnion: core.serialization.Schema<serializers.ActorIdUnion.Raw, Flatfile.ActorIdUnion> =
-    core.serialization.undiscriminatedUnion([UserId, AgentId, GuestId]);
+    core.serialization.undiscriminatedUnion([
+        core.serialization.lazy(async () => (await import("../../..")).UserId),
+        core.serialization.lazy(async () => (await import("../../..")).AgentId),
+        core.serialization.lazy(async () => (await import("../../..")).GuestId),
+    ]);
 
 export declare namespace ActorIdUnion {
-    type Raw = UserId.Raw | AgentId.Raw | GuestId.Raw;
+    type Raw = serializers.UserId.Raw | serializers.AgentId.Raw | serializers.GuestId.Raw;
 }
diff --git a/src/serialization/resources/roles/types/ActorRoleResponse.ts b/src/serialization/resources/roles/types/ActorRoleResponse.ts
index 30cf630..0027449 100644
--- a/src/serialization/resources/roles/types/ActorRoleResponse.ts
+++ b/src/serialization/resources/roles/types/ActorRoleResponse.ts
@@ -7,6 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { ActorRoleId } from "../../commons/types/ActorRoleId";
-import { RoleId } from "../../commons/types/RoleId";
-import { ActorIdUnion } from "./ActorIdUnion";
-import { ResourceIdUnion } from "./ResourceIdUnion";
 
@@ -16,6 +12,6 @@ export const ActorRoleResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    id: ActorRoleId,
-    roleId: RoleId,
-    actorId: ActorIdUnion,
-    resourceId: ResourceIdUnion,
+    id: core.serialization.lazy(async () => (await import("../../..")).ActorRoleId),
+    roleId: core.serialization.lazy(async () => (await import("../../..")).RoleId),
+    actorId: core.serialization.lazy(async () => (await import("../../..")).ActorIdUnion),
+    resourceId: core.serialization.lazy(async () => (await import("../../..")).ResourceIdUnion),
     createdAt: core.serialization.date(),
@@ -26,6 +22,6 @@ export declare namespace ActorRoleResponse {
     interface Raw {
-        id: ActorRoleId.Raw;
-        roleId: RoleId.Raw;
-        actorId: ActorIdUnion.Raw;
-        resourceId: ResourceIdUnion.Raw;
+        id: serializers.ActorRoleId.Raw;
+        roleId: serializers.RoleId.Raw;
+        actorId: serializers.ActorIdUnion.Raw;
+        resourceId: serializers.ResourceIdUnion.Raw;
         createdAt: string;
diff --git a/src/serialization/resources/roles/types/AssignActorRoleRequest.ts b/src/serialization/resources/roles/types/AssignActorRoleRequest.ts
index 9450608..fad27ea 100644
--- a/src/serialization/resources/roles/types/AssignActorRoleRequest.ts
+++ b/src/serialization/resources/roles/types/AssignActorRoleRequest.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { RoleId } from "../../commons/types/RoleId";
-import { ResourceIdUnion } from "./ResourceIdUnion";
 
@@ -14,4 +12,4 @@ export const AssignActorRoleRequest: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    roleId: RoleId,
-    resourceId: ResourceIdUnion,
+    roleId: core.serialization.lazy(async () => (await import("../../..")).RoleId),
+    resourceId: core.serialization.lazy(async () => (await import("../../..")).ResourceIdUnion),
 });
@@ -20,4 +18,4 @@ export declare namespace AssignActorRoleRequest {
     interface Raw {
-        roleId: RoleId.Raw;
-        resourceId: ResourceIdUnion.Raw;
+        roleId: serializers.RoleId.Raw;
+        resourceId: serializers.ResourceIdUnion.Raw;
     }
diff --git a/src/serialization/resources/roles/types/AssignRoleResponse.ts b/src/serialization/resources/roles/types/AssignRoleResponse.ts
index e54cbd7..f868ddc 100644
--- a/src/serialization/resources/roles/types/AssignRoleResponse.ts
+++ b/src/serialization/resources/roles/types/AssignRoleResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { AssignRoleResponseData } from "./AssignRoleResponseData";
 
@@ -13,3 +12,3 @@ export const AssignRoleResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: AssignRoleResponseData,
+    data: core.serialization.lazyObject(async () => (await import("../../..")).AssignRoleResponseData),
 });
@@ -18,3 +17,3 @@ export declare namespace AssignRoleResponse {
     interface Raw {
-        data: AssignRoleResponseData.Raw;
+        data: serializers.AssignRoleResponseData.Raw;
     }
diff --git a/src/serialization/resources/roles/types/AssignRoleResponseData.ts b/src/serialization/resources/roles/types/AssignRoleResponseData.ts
index 94ae119..6cd2a5a 100644
--- a/src/serialization/resources/roles/types/AssignRoleResponseData.ts
+++ b/src/serialization/resources/roles/types/AssignRoleResponseData.ts
@@ -7,6 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { ActorRoleId } from "../../commons/types/ActorRoleId";
-import { RoleId } from "../../commons/types/RoleId";
-import { ActorIdUnion } from "./ActorIdUnion";
-import { ResourceIdUnion } from "./ResourceIdUnion";
 
@@ -16,6 +12,6 @@ export const AssignRoleResponseData: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    id: ActorRoleId,
-    roleId: RoleId,
-    actorId: ActorIdUnion,
-    resourceId: ResourceIdUnion,
+    id: core.serialization.lazy(async () => (await import("../../..")).ActorRoleId),
+    roleId: core.serialization.lazy(async () => (await import("../../..")).RoleId),
+    actorId: core.serialization.lazy(async () => (await import("../../..")).ActorIdUnion),
+    resourceId: core.serialization.lazy(async () => (await import("../../..")).ResourceIdUnion),
     createdAt: core.serialization.date(),
@@ -26,6 +22,6 @@ export declare namespace AssignRoleResponseData {
     interface Raw {
-        id: ActorRoleId.Raw;
-        roleId: RoleId.Raw;
-        actorId: ActorIdUnion.Raw;
-        resourceId: ResourceIdUnion.Raw;
+        id: serializers.ActorRoleId.Raw;
+        roleId: serializers.RoleId.Raw;
+        actorId: serializers.ActorIdUnion.Raw;
+        resourceId: serializers.ResourceIdUnion.Raw;
         createdAt: string;
diff --git a/src/serialization/resources/roles/types/ListActorRolesResponse.ts b/src/serialization/resources/roles/types/ListActorRolesResponse.ts
index b79c703..21b0571 100644
--- a/src/serialization/resources/roles/types/ListActorRolesResponse.ts
+++ b/src/serialization/resources/roles/types/ListActorRolesResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { ActorRoleResponse } from "./ActorRoleResponse";
 
@@ -13,3 +12,5 @@ export const ListActorRolesResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(ActorRoleResponse),
+    data: core.serialization.list(
+        core.serialization.lazyObject(async () => (await import("../../..")).ActorRoleResponse)
+    ),
 });
@@ -18,3 +19,3 @@ export declare namespace ListActorRolesResponse {
     interface Raw {
-        data: ActorRoleResponse.Raw[];
+        data: serializers.ActorRoleResponse.Raw[];
     }
diff --git a/src/serialization/resources/roles/types/ListRolesResponse.ts b/src/serialization/resources/roles/types/ListRolesResponse.ts
index 6176a87..988fc50 100644
--- a/src/serialization/resources/roles/types/ListRolesResponse.ts
+++ b/src/serialization/resources/roles/types/ListRolesResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { RoleResponse } from "./RoleResponse";
 
@@ -13,3 +12,3 @@ export const ListRolesResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(RoleResponse),
+    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).RoleResponse)),
 });
@@ -18,3 +17,3 @@ export declare namespace ListRolesResponse {
     interface Raw {
-        data: RoleResponse.Raw[];
+        data: serializers.RoleResponse.Raw[];
     }
diff --git a/src/serialization/resources/roles/types/ResourceIdUnion.ts b/src/serialization/resources/roles/types/ResourceIdUnion.ts
index 9632bdc..3ad9a46 100644
--- a/src/serialization/resources/roles/types/ResourceIdUnion.ts
+++ b/src/serialization/resources/roles/types/ResourceIdUnion.ts
@@ -7,11 +7,12 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { AccountId } from "../../commons/types/AccountId";
-import { EnvironmentId } from "../../commons/types/EnvironmentId";
-import { SpaceId } from "../../commons/types/SpaceId";
 
 export const ResourceIdUnion: core.serialization.Schema<serializers.ResourceIdUnion.Raw, Flatfile.ResourceIdUnion> =
-    core.serialization.undiscriminatedUnion([AccountId, EnvironmentId, SpaceId]);
+    core.serialization.undiscriminatedUnion([
+        core.serialization.lazy(async () => (await import("../../..")).AccountId),
+        core.serialization.lazy(async () => (await import("../../..")).EnvironmentId),
+        core.serialization.lazy(async () => (await import("../../..")).SpaceId),
+    ]);
 
 export declare namespace ResourceIdUnion {
-    type Raw = AccountId.Raw | EnvironmentId.Raw | SpaceId.Raw;
+    type Raw = serializers.AccountId.Raw | serializers.EnvironmentId.Raw | serializers.SpaceId.Raw;
 }
diff --git a/src/serialization/resources/roles/types/RoleResponse.ts b/src/serialization/resources/roles/types/RoleResponse.ts
index b7391e8..a96138a 100644
--- a/src/serialization/resources/roles/types/RoleResponse.ts
+++ b/src/serialization/resources/roles/types/RoleResponse.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { RoleId } from "../../commons/types/RoleId";
-import { AccountId } from "../../commons/types/AccountId";
 
@@ -12,5 +10,5 @@ export const RoleResponse: core.serialization.ObjectSchema<serializers.RoleRespo
     core.serialization.object({
-        id: RoleId,
+        id: core.serialization.lazy(async () => (await import("../../..")).RoleId),
         name: core.serialization.string(),
-        accountId: AccountId,
+        accountId: core.serialization.lazy(async () => (await import("../../..")).AccountId),
         createdAt: core.serialization.date(),
@@ -21,5 +19,5 @@ export declare namespace RoleResponse {
     interface Raw {
-        id: RoleId.Raw;
+        id: serializers.RoleId.Raw;
         name: string;
-        accountId: AccountId.Raw;
+        accountId: serializers.AccountId.Raw;
         createdAt: string;
diff --git a/src/serialization/resources/secrets/types/Secret.ts b/src/serialization/resources/secrets/types/Secret.ts
index a261623..8ee44ca 100644
--- a/src/serialization/resources/secrets/types/Secret.ts
+++ b/src/serialization/resources/secrets/types/Secret.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { SecretId } from "../../commons/types/SecretId";
-import { WriteSecret } from "./WriteSecret";
 
@@ -12,9 +10,9 @@ export const Secret: core.serialization.ObjectSchema<serializers.Secret.Raw, Fla
     .object({
-        id: SecretId,
+        id: core.serialization.lazy(async () => (await import("../../..")).SecretId),
     })
-    .extend(WriteSecret);
+    .extend(core.serialization.lazyObject(async () => (await import("../../..")).WriteSecret));
 
 export declare namespace Secret {
-    interface Raw extends WriteSecret.Raw {
-        id: SecretId.Raw;
+    interface Raw extends serializers.WriteSecret.Raw {
+        id: serializers.SecretId.Raw;
     }
diff --git a/src/serialization/resources/secrets/types/SecretsResponse.ts b/src/serialization/resources/secrets/types/SecretsResponse.ts
index 93cdea3..ae2a03e 100644
--- a/src/serialization/resources/secrets/types/SecretsResponse.ts
+++ b/src/serialization/resources/secrets/types/SecretsResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Secret } from "./Secret";
 
@@ -13,3 +12,3 @@ export const SecretsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(Secret),
+    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Secret)),
 });
@@ -18,3 +17,3 @@ export declare namespace SecretsResponse {
     interface Raw {
-        data: Secret.Raw[];
+        data: serializers.Secret.Raw[];
     }
diff --git a/src/serialization/resources/secrets/types/WriteSecret.ts b/src/serialization/resources/secrets/types/WriteSecret.ts
index ed67737..31c1232 100644
--- a/src/serialization/resources/secrets/types/WriteSecret.ts
+++ b/src/serialization/resources/secrets/types/WriteSecret.ts
@@ -7,6 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { SecretName } from "./SecretName";
-import { SecretValue } from "./SecretValue";
-import { EnvironmentId } from "../../commons/types/EnvironmentId";
-import { SpaceId } from "../../commons/types/SpaceId";
 
@@ -14,6 +10,6 @@ export const WriteSecret: core.serialization.ObjectSchema<serializers.WriteSecre
     core.serialization.object({
-        name: SecretName,
-        value: SecretValue,
-        environmentId: EnvironmentId.optional(),
-        spaceId: SpaceId.optional(),
+        name: core.serialization.lazy(async () => (await import("../../..")).SecretName),
+        value: core.serialization.lazy(async () => (await import("../../..")).SecretValue),
+        environmentId: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId).optional(),
+        spaceId: core.serialization.lazy(async () => (await import("../../..")).SpaceId).optional(),
     });
@@ -22,6 +18,6 @@ export declare namespace WriteSecret {
     interface Raw {
-        name: SecretName.Raw;
-        value: SecretValue.Raw;
-        environmentId?: EnvironmentId.Raw | null;
-        spaceId?: SpaceId.Raw | null;
+        name: serializers.SecretName.Raw;
+        value: serializers.SecretValue.Raw;
+        environmentId?: serializers.EnvironmentId.Raw | null;
+        spaceId?: serializers.SpaceId.Raw | null;
     }
diff --git a/src/serialization/resources/sheets/types/CellValueWithCounts.ts b/src/serialization/resources/sheets/types/CellValueWithCounts.ts
index 22aef0f..9b1b709 100644
--- a/src/serialization/resources/sheets/types/CellValueWithCounts.ts
+++ b/src/serialization/resources/sheets/types/CellValueWithCounts.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { RecordCounts } from "../../records/types/RecordCounts";
-import { CellValue } from "../../records/types/CellValue";
 
@@ -15,9 +13,9 @@ export const CellValueWithCounts: core.serialization.ObjectSchema<
     .object({
-        counts: RecordCounts.optional(),
+        counts: core.serialization.lazyObject(async () => (await import("../../..")).RecordCounts).optional(),
     })
-    .extend(CellValue);
+    .extend(core.serialization.lazyObject(async () => (await import("../../..")).CellValue));
 
 export declare namespace CellValueWithCounts {
-    interface Raw extends CellValue.Raw {
-        counts?: RecordCounts.Raw | null;
+    interface Raw extends serializers.CellValue.Raw {
+        counts?: serializers.RecordCounts.Raw | null;
     }
diff --git a/src/serialization/resources/sheets/types/CellsResponse.ts b/src/serialization/resources/sheets/types/CellsResponse.ts
index aa0db90..6aaba6c 100644
--- a/src/serialization/resources/sheets/types/CellsResponse.ts
+++ b/src/serialization/resources/sheets/types/CellsResponse.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { CellsResponseData } from "./CellsResponseData";
-import { CellValueWithCounts } from "./CellValueWithCounts";
 
@@ -12,3 +10,3 @@ export const CellsResponse: core.serialization.ObjectSchema<serializers.CellsRes
     core.serialization.object({
-        data: CellsResponseData,
+        data: core.serialization.lazy(async () => (await import("../../..")).CellsResponseData),
     });
@@ -17,3 +15,3 @@ export declare namespace CellsResponse {
     interface Raw {
-        data: CellsResponseData.Raw;
+        data: serializers.CellsResponseData.Raw;
     }
diff --git a/src/serialization/resources/sheets/types/CellsResponseData.ts b/src/serialization/resources/sheets/types/CellsResponseData.ts
index 35c4377..eaf3dc8 100644
--- a/src/serialization/resources/sheets/types/CellsResponseData.ts
+++ b/src/serialization/resources/sheets/types/CellsResponseData.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { CellValueWithCounts } from "./CellValueWithCounts";
 
@@ -12,6 +11,9 @@ export const CellsResponseData: core.serialization.Schema<
     Flatfile.CellsResponseData
-> = core.serialization.record(core.serialization.string(), core.serialization.list(CellValueWithCounts));
+> = core.serialization.record(
+    core.serialization.string(),
+    core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).CellValueWithCounts))
+);
 
 export declare namespace CellsResponseData {
-    type Raw = Record<string, CellValueWithCounts.Raw[]>;
+    type Raw = Record<string, serializers.CellValueWithCounts.Raw[]>;
 }
diff --git a/src/serialization/resources/sheets/types/CompositeUniqueConstraint.ts b/src/serialization/resources/sheets/types/CompositeUniqueConstraint.ts
index d859c8d..8d299e9 100644
--- a/src/serialization/resources/sheets/types/CompositeUniqueConstraint.ts
+++ b/src/serialization/resources/sheets/types/CompositeUniqueConstraint.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { CompositeUniqueConstraintStrategy } from "./CompositeUniqueConstraintStrategy";
 
@@ -15,3 +14,3 @@ export const CompositeUniqueConstraint: core.serialization.ObjectSchema<
     fields: core.serialization.list(core.serialization.string()),
-    strategy: CompositeUniqueConstraintStrategy,
+    strategy: core.serialization.lazy(async () => (await import("../../..")).CompositeUniqueConstraintStrategy),
 });
@@ -22,3 +21,3 @@ export declare namespace CompositeUniqueConstraint {
         fields: string[];
-        strategy: CompositeUniqueConstraintStrategy.Raw;
+        strategy: serializers.CompositeUniqueConstraintStrategy.Raw;
     }
diff --git a/src/serialization/resources/sheets/types/FieldConfigResponse.ts b/src/serialization/resources/sheets/types/FieldConfigResponse.ts
index 90bc380..a4c7cc8 100644
--- a/src/serialization/resources/sheets/types/FieldConfigResponse.ts
+++ b/src/serialization/resources/sheets/types/FieldConfigResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Property } from "../../property/types/Property";
 
@@ -13,3 +12,3 @@ export const FieldConfigResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: Property,
+    data: core.serialization.lazy(async () => (await import("../../..")).Property),
 });
@@ -18,3 +17,3 @@ export declare namespace FieldConfigResponse {
     interface Raw {
-        data: Property.Raw;
+        data: serializers.Property.Raw;
     }
diff --git a/src/serialization/resources/sheets/types/ListSheetsResponse.ts b/src/serialization/resources/sheets/types/ListSheetsResponse.ts
index 8620c5c..de34c0c 100644
--- a/src/serialization/resources/sheets/types/ListSheetsResponse.ts
+++ b/src/serialization/resources/sheets/types/ListSheetsResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Sheet } from "./Sheet";
 
@@ -13,3 +12,3 @@ export const ListSheetsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(Sheet),
+    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Sheet)),
 });
@@ -18,3 +17,3 @@ export declare namespace ListSheetsResponse {
     interface Raw {
-        data: Sheet.Raw[];
+        data: serializers.Sheet.Raw[];
     }
diff --git a/src/serialization/resources/sheets/types/RecordCountsResponse.ts b/src/serialization/resources/sheets/types/RecordCountsResponse.ts
index c4e7334..cdebc31 100644
--- a/src/serialization/resources/sheets/types/RecordCountsResponse.ts
+++ b/src/serialization/resources/sheets/types/RecordCountsResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { RecordCountsResponseData } from "./RecordCountsResponseData";
 
@@ -13,3 +12,3 @@ export const RecordCountsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: RecordCountsResponseData,
+    data: core.serialization.lazyObject(async () => (await import("../../..")).RecordCountsResponseData),
 });
@@ -18,3 +17,3 @@ export declare namespace RecordCountsResponse {
     interface Raw {
-        data: RecordCountsResponseData.Raw;
+        data: serializers.RecordCountsResponseData.Raw;
     }
diff --git a/src/serialization/resources/sheets/types/RecordCountsResponseData.ts b/src/serialization/resources/sheets/types/RecordCountsResponseData.ts
index 29afd10..3bb978e 100644
--- a/src/serialization/resources/sheets/types/RecordCountsResponseData.ts
+++ b/src/serialization/resources/sheets/types/RecordCountsResponseData.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { RecordCounts } from "../../records/types/RecordCounts";
 
@@ -13,3 +12,3 @@ export const RecordCountsResponseData: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    counts: RecordCounts,
+    counts: core.serialization.lazyObject(async () => (await import("../../..")).RecordCounts),
     success: core.serialization.boolean(),
@@ -19,3 +18,3 @@ export declare namespace RecordCountsResponseData {
     interface Raw {
-        counts: RecordCounts.Raw;
+        counts: serializers.RecordCounts.Raw;
         success: boolean;
diff --git a/src/serialization/resources/sheets/types/Sheet.ts b/src/serialization/resources/sheets/types/Sheet.ts
index 46580fc..4e3c704 100644
--- a/src/serialization/resources/sheets/types/Sheet.ts
+++ b/src/serialization/resources/sheets/types/Sheet.ts
@@ -7,13 +7,10 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { SheetId } from "../../commons/types/SheetId";
-import { WorkbookId } from "../../commons/types/WorkbookId";
-import { SheetConfig } from "./SheetConfig";
-import { RecordCounts } from "../../records/types/RecordCounts";
 
 export const Sheet: core.serialization.ObjectSchema<serializers.Sheet.Raw, Flatfile.Sheet> = core.serialization.object({
-    id: SheetId,
-    workbookId: WorkbookId,
+    id: core.serialization.lazy(async () => (await import("../../..")).SheetId),
+    workbookId: core.serialization.lazy(async () => (await import("../../..")).WorkbookId),
     name: core.serialization.string(),
     slug: core.serialization.string(),
-    config: SheetConfig,
+    config: core.serialization.lazyObject(async () => (await import("../../..")).SheetConfig),
+    countRecords: core.serialization.lazyObject(async () => (await import("../../..")).RecordCounts).optional(),
     namespace: core.serialization.string().optional(),
@@ -23,3 +20,2 @@ export const Sheet: core.serialization.ObjectSchema<serializers.Sheet.Raw, Flatf
     lockedAt: core.serialization.date().optional(),
-    recordCounts: RecordCounts.optional(),
 });
@@ -28,7 +24,8 @@ export declare namespace Sheet {
     interface Raw {
-        id: SheetId.Raw;
-        workbookId: WorkbookId.Raw;
+        id: serializers.SheetId.Raw;
+        workbookId: serializers.WorkbookId.Raw;
         name: string;
         slug: string;
-        config: SheetConfig.Raw;
+        config: serializers.SheetConfig.Raw;
+        countRecords?: serializers.RecordCounts.Raw | null;
         namespace?: string | null;
@@ -38,3 +35,2 @@ export declare namespace Sheet {
         lockedAt?: string | null;
-        recordCounts?: RecordCounts.Raw | null;
     }
diff --git a/src/serialization/resources/sheets/types/SheetConfig.ts b/src/serialization/resources/sheets/types/SheetConfig.ts
index 503beb6..fc648da 100644
--- a/src/serialization/resources/sheets/types/SheetConfig.ts
+++ b/src/serialization/resources/sheets/types/SheetConfig.ts
@@ -7,6 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { SheetAccess } from "./SheetAccess";
-import { Property } from "../../property/types/Property";
-import { Action } from "../../commons/types/Action";
-import { SheetConstraint } from "./SheetConstraint";
 
@@ -20,7 +16,13 @@ export const SheetConfig: core.serialization.ObjectSchema<serializers.SheetConfi
         mappingConfidenceThreshold: core.serialization.number().optional(),
-        access: core.serialization.list(SheetAccess).optional(),
-        fields: core.serialization.list(Property),
-        actions: core.serialization.list(Action).optional(),
+        access: core.serialization
+            .list(core.serialization.lazy(async () => (await import("../../..")).SheetAccess))
+            .optional(),
+        fields: core.serialization.list(core.serialization.lazy(async () => (await import("../../..")).Property)),
+        actions: core.serialization
+            .list(core.serialization.lazyObject(async () => (await import("../../..")).Action))
+            .optional(),
         metadata: core.serialization.any().optional(),
-        constraints: core.serialization.list(SheetConstraint).optional(),
+        constraints: core.serialization
+            .list(core.serialization.lazy(async () => (await import("../../..")).SheetConstraint))
+            .optional(),
     });
@@ -35,7 +37,7 @@ export declare namespace SheetConfig {
         mappingConfidenceThreshold?: number | null;
-        access?: SheetAccess.Raw[] | null;
-        fields: Property.Raw[];
-        actions?: Action.Raw[] | null;
+        access?: serializers.SheetAccess.Raw[] | null;
+        fields: serializers.Property.Raw[];
+        actions?: serializers.Action.Raw[] | null;
         metadata?: any | null;
-        constraints?: SheetConstraint.Raw[] | null;
+        constraints?: serializers.SheetConstraint.Raw[] | null;
     }
diff --git a/src/serialization/resources/sheets/types/SheetConfigOrUpdate.ts b/src/serialization/resources/sheets/types/SheetConfigOrUpdate.ts
index ccb3007..a58ab72 100644
--- a/src/serialization/resources/sheets/types/SheetConfigOrUpdate.ts
+++ b/src/serialization/resources/sheets/types/SheetConfigOrUpdate.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { SheetConfigUpdate } from "./SheetConfigUpdate";
-import { SheetUpdate } from "./SheetUpdate";
 
@@ -13,6 +11,9 @@ export const SheetConfigOrUpdate: core.serialization.ObjectSchema<
     Flatfile.SheetConfigOrUpdate
-> = core.serialization.object({}).extend(SheetConfigUpdate).extend(SheetUpdate);
+> = core.serialization
+    .object({})
+    .extend(core.serialization.lazyObject(async () => (await import("../../..")).SheetConfigUpdate))
+    .extend(core.serialization.lazyObject(async () => (await import("../../..")).SheetUpdate));
 
 export declare namespace SheetConfigOrUpdate {
-    interface Raw extends SheetConfigUpdate.Raw, SheetUpdate.Raw {}
+    interface Raw extends serializers.SheetConfigUpdate.Raw, serializers.SheetUpdate.Raw {}
 }
diff --git a/src/serialization/resources/sheets/types/SheetConfigUpdate.ts b/src/serialization/resources/sheets/types/SheetConfigUpdate.ts
index 8b7fba9..4cc00b3 100644
--- a/src/serialization/resources/sheets/types/SheetConfigUpdate.ts
+++ b/src/serialization/resources/sheets/types/SheetConfigUpdate.ts
@@ -7,5 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { SheetAccess } from "./SheetAccess";
-import { Property } from "../../property/types/Property";
-import { Action } from "../../commons/types/Action";
 
@@ -21,5 +18,11 @@ export const SheetConfigUpdate: core.serialization.ObjectSchema<
     mappingConfidenceThreshold: core.serialization.number().optional(),
-    access: core.serialization.list(SheetAccess).optional(),
-    fields: core.serialization.list(Property).optional(),
-    actions: core.serialization.list(Action).optional(),
+    access: core.serialization
+        .list(core.serialization.lazy(async () => (await import("../../..")).SheetAccess))
+        .optional(),
+    fields: core.serialization
+        .list(core.serialization.lazy(async () => (await import("../../..")).Property))
+        .optional(),
+    actions: core.serialization
+        .list(core.serialization.lazyObject(async () => (await import("../../..")).Action))
+        .optional(),
 });
@@ -34,5 +37,5 @@ export declare namespace SheetConfigUpdate {
         mappingConfidenceThreshold?: number | null;
-        access?: SheetAccess.Raw[] | null;
-        fields?: Property.Raw[] | null;
-        actions?: Action.Raw[] | null;
+        access?: serializers.SheetAccess.Raw[] | null;
+        fields?: serializers.Property.Raw[] | null;
+        actions?: serializers.Action.Raw[] | null;
     }
diff --git a/src/serialization/resources/sheets/types/SheetConstraint.ts b/src/serialization/resources/sheets/types/SheetConstraint.ts
index cb4d9ee..a55e17d 100644
--- a/src/serialization/resources/sheets/types/SheetConstraint.ts
+++ b/src/serialization/resources/sheets/types/SheetConstraint.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { CompositeUniqueConstraint } from "./CompositeUniqueConstraint";
-import { ExternalSheetConstraint } from "./ExternalSheetConstraint";
 
@@ -13,4 +11,4 @@ export const SheetConstraint: core.serialization.Schema<serializers.SheetConstra
         .union("type", {
-            unique: CompositeUniqueConstraint,
-            external: ExternalSheetConstraint,
+            unique: core.serialization.lazyObject(async () => (await import("../../..")).CompositeUniqueConstraint),
+            external: core.serialization.lazyObject(async () => (await import("../../..")).ExternalSheetConstraint),
         })
@@ -24,3 +22,3 @@ export declare namespace SheetConstraint {
 
-    interface Unique extends CompositeUniqueConstraint.Raw {
+    interface Unique extends serializers.CompositeUniqueConstraint.Raw {
         type: "unique";
@@ -28,3 +26,3 @@ export declare namespace SheetConstraint {
 
-    interface External extends ExternalSheetConstraint.Raw {
+    interface External extends serializers.ExternalSheetConstraint.Raw {
         type: "external";
diff --git a/src/serialization/resources/sheets/types/SheetResponse.ts b/src/serialization/resources/sheets/types/SheetResponse.ts
index 97811d1..084f567 100644
--- a/src/serialization/resources/sheets/types/SheetResponse.ts
+++ b/src/serialization/resources/sheets/types/SheetResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Sheet } from "./Sheet";
 
@@ -11,3 +10,3 @@ export const SheetResponse: core.serialization.ObjectSchema<serializers.SheetRes
     core.serialization.object({
-        data: Sheet,
+        data: core.serialization.lazyObject(async () => (await import("../../..")).Sheet),
     });
@@ -16,3 +15,3 @@ export declare namespace SheetResponse {
     interface Raw {
-        data: Sheet.Raw;
+        data: serializers.Sheet.Raw;
     }
diff --git a/src/serialization/resources/sheets/types/SheetUpdate.ts b/src/serialization/resources/sheets/types/SheetUpdate.ts
index f3e3b7c..2ee2953 100644
--- a/src/serialization/resources/sheets/types/SheetUpdate.ts
+++ b/src/serialization/resources/sheets/types/SheetUpdate.ts
@@ -7,5 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { SheetId } from "../../commons/types/SheetId";
-import { WorkbookId } from "../../commons/types/WorkbookId";
-import { SheetConfig } from "./SheetConfig";
 
@@ -13,5 +10,6 @@ export const SheetUpdate: core.serialization.ObjectSchema<serializers.SheetUpdat
     core.serialization.object({
-        id: SheetId.optional(),
-        workbookId: WorkbookId.optional(),
-        config: SheetConfig.optional(),
+        id: core.serialization.lazy(async () => (await import("../../..")).SheetId).optional(),
+        workbookId: core.serialization.lazy(async () => (await import("../../..")).WorkbookId).optional(),
+        config: core.serialization.lazyObject(async () => (await import("../../..")).SheetConfig).optional(),
+        countRecords: core.serialization.lazyObject(async () => (await import("../../..")).RecordCounts).optional(),
         namespace: core.serialization.string().optional(),
@@ -23,5 +21,6 @@ export declare namespace SheetUpdate {
     interface Raw {
-        id?: SheetId.Raw | null;
-        workbookId?: WorkbookId.Raw | null;
-        config?: SheetConfig.Raw | null;
+        id?: serializers.SheetId.Raw | null;
+        workbookId?: serializers.WorkbookId.Raw | null;
+        config?: serializers.SheetConfig.Raw | null;
+        countRecords?: serializers.RecordCounts.Raw | null;
         namespace?: string | null;
diff --git a/src/serialization/resources/snapshots/client/requests/CreateSnapshotRequest.ts b/src/serialization/resources/snapshots/client/requests/CreateSnapshotRequest.ts
index 661681c..9aa9754 100644
--- a/src/serialization/resources/snapshots/client/requests/CreateSnapshotRequest.ts
+++ b/src/serialization/resources/snapshots/client/requests/CreateSnapshotRequest.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../../api";
 import * as core from "../../../../../core";
-import { SheetId } from "../../../commons/types/SheetId";
 
@@ -13,3 +12,3 @@ export const CreateSnapshotRequest: core.serialization.Schema<
 > = core.serialization.object({
-    sheetId: SheetId,
+    sheetId: core.serialization.lazy(async () => (await import("../../../..")).SheetId),
     label: core.serialization.string().optional(),
@@ -19,3 +18,3 @@ export declare namespace CreateSnapshotRequest {
     interface Raw {
-        sheetId: SheetId.Raw;
+        sheetId: serializers.SheetId.Raw;
         label?: string | null;
diff --git a/src/serialization/resources/snapshots/client/restoreSnapshot.ts b/src/serialization/resources/snapshots/client/restoreSnapshot.ts
index 1122a48..ee59bc1 100644
--- a/src/serialization/resources/snapshots/client/restoreSnapshot.ts
+++ b/src/serialization/resources/snapshots/client/restoreSnapshot.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { RestoreOptions } from "../types/RestoreOptions";
 
@@ -12,6 +11,6 @@ export const Request: core.serialization.Schema<
     Flatfile.RestoreOptions | undefined
-> = RestoreOptions.optional();
+> = core.serialization.lazyObject(async () => (await import("../../..")).RestoreOptions).optional();
 
 export declare namespace Request {
-    type Raw = RestoreOptions.Raw | null | undefined;
+    type Raw = serializers.RestoreOptions.Raw | null | undefined;
 }
diff --git a/src/serialization/resources/snapshots/types/Snapshot.ts b/src/serialization/resources/snapshots/types/Snapshot.ts
index 941fdb8..eea6003 100644
--- a/src/serialization/resources/snapshots/types/Snapshot.ts
+++ b/src/serialization/resources/snapshots/types/Snapshot.ts
@@ -7,6 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { SnapshotId } from "../../commons/types/SnapshotId";
-import { SheetId } from "../../commons/types/SheetId";
-import { SnapshotSummary } from "./SnapshotSummary";
-import { UserId } from "../../commons/types/UserId";
 
@@ -14,8 +10,8 @@ export const Snapshot: core.serialization.ObjectSchema<serializers.Snapshot.Raw,
     core.serialization.object({
-        id: SnapshotId,
-        sheetId: SheetId,
+        id: core.serialization.lazy(async () => (await import("../../..")).SnapshotId),
+        sheetId: core.serialization.lazy(async () => (await import("../../..")).SheetId),
         label: core.serialization.string().optional(),
-        summary: SnapshotSummary.optional(),
+        summary: core.serialization.lazyObject(async () => (await import("../../..")).SnapshotSummary).optional(),
         createdAt: core.serialization.date(),
-        createdBy: UserId,
+        createdBy: core.serialization.lazy(async () => (await import("../../..")).UserId),
     });
@@ -24,8 +20,8 @@ export declare namespace Snapshot {
     interface Raw {
-        id: SnapshotId.Raw;
-        sheetId: SheetId.Raw;
+        id: serializers.SnapshotId.Raw;
+        sheetId: serializers.SheetId.Raw;
         label?: string | null;
-        summary?: SnapshotSummary.Raw | null;
+        summary?: serializers.SnapshotSummary.Raw | null;
         createdAt: string;
-        createdBy: UserId.Raw;
+        createdBy: serializers.UserId.Raw;
     }
diff --git a/src/serialization/resources/snapshots/types/SnapshotResponse.ts b/src/serialization/resources/snapshots/types/SnapshotResponse.ts
index 03f623d..2c7b5b1 100644
--- a/src/serialization/resources/snapshots/types/SnapshotResponse.ts
+++ b/src/serialization/resources/snapshots/types/SnapshotResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Snapshot } from "./Snapshot";
 
@@ -13,3 +12,3 @@ export const SnapshotResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: Snapshot,
+    data: core.serialization.lazyObject(async () => (await import("../../..")).Snapshot),
 });
@@ -18,3 +17,3 @@ export declare namespace SnapshotResponse {
     interface Raw {
-        data: Snapshot.Raw;
+        data: serializers.Snapshot.Raw;
     }
diff --git a/src/serialization/resources/snapshots/types/SnapshotSummary.ts b/src/serialization/resources/snapshots/types/SnapshotSummary.ts
index 9fc80cf..ddbc6f5 100644
--- a/src/serialization/resources/snapshots/types/SnapshotSummary.ts
+++ b/src/serialization/resources/snapshots/types/SnapshotSummary.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { SummarySection } from "./SummarySection";
 
@@ -13,5 +12,5 @@ export const SnapshotSummary: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    createdSince: SummarySection,
-    updatedSince: SummarySection,
-    deletedSince: SummarySection,
+    createdSince: core.serialization.lazyObject(async () => (await import("../../..")).SummarySection),
+    updatedSince: core.serialization.lazyObject(async () => (await import("../../..")).SummarySection),
+    deletedSince: core.serialization.lazyObject(async () => (await import("../../..")).SummarySection),
 });
@@ -20,5 +19,5 @@ export declare namespace SnapshotSummary {
     interface Raw {
-        createdSince: SummarySection.Raw;
-        updatedSince: SummarySection.Raw;
-        deletedSince: SummarySection.Raw;
+        createdSince: serializers.SummarySection.Raw;
+        updatedSince: serializers.SummarySection.Raw;
+        deletedSince: serializers.SummarySection.Raw;
     }
diff --git a/src/serialization/resources/snapshots/types/SnapshotsResponse.ts b/src/serialization/resources/snapshots/types/SnapshotsResponse.ts
index bc7e92e..614f775 100644
--- a/src/serialization/resources/snapshots/types/SnapshotsResponse.ts
+++ b/src/serialization/resources/snapshots/types/SnapshotsResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Snapshot } from "./Snapshot";
 
@@ -13,3 +12,3 @@ export const SnapshotsResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(Snapshot),
+    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Snapshot)),
 });
@@ -18,3 +17,3 @@ export declare namespace SnapshotsResponse {
     interface Raw {
-        data: Snapshot.Raw[];
+        data: serializers.Snapshot.Raw[];
     }
diff --git a/src/serialization/resources/spaces/types/EventToken.ts b/src/serialization/resources/spaces/types/EventToken.ts
index 72df747..522af9d 100644
--- a/src/serialization/resources/spaces/types/EventToken.ts
+++ b/src/serialization/resources/spaces/types/EventToken.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { AccountId } from "../../commons/types/AccountId";
 
@@ -11,3 +10,3 @@ export const EventToken: core.serialization.ObjectSchema<serializers.EventToken.
     core.serialization.object({
-        accountId: AccountId.optional(),
+        accountId: core.serialization.lazy(async () => (await import("../../..")).AccountId).optional(),
         subscribeKey: core.serialization.string().optional(),
@@ -19,3 +18,3 @@ export declare namespace EventToken {
     interface Raw {
-        accountId?: AccountId.Raw | null;
+        accountId?: serializers.AccountId.Raw | null;
         subscribeKey?: string | null;
diff --git a/src/serialization/resources/spaces/types/EventTokenResponse.ts b/src/serialization/resources/spaces/types/EventTokenResponse.ts
index 71d4e1e..7cd78f1 100644
--- a/src/serialization/resources/spaces/types/EventTokenResponse.ts
+++ b/src/serialization/resources/spaces/types/EventTokenResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { EventToken } from "./EventToken";
 
@@ -13,3 +12,3 @@ export const EventTokenResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: EventToken,
+    data: core.serialization.lazyObject(async () => (await import("../../..")).EventToken),
 });
@@ -18,3 +17,3 @@ export declare namespace EventTokenResponse {
     interface Raw {
-        data: EventToken.Raw;
+        data: serializers.EventToken.Raw;
     }
diff --git a/src/serialization/resources/spaces/types/InternalSpaceConfigBase.ts b/src/serialization/resources/spaces/types/InternalSpaceConfigBase.ts
index 594936e..f742f4f 100644
--- a/src/serialization/resources/spaces/types/InternalSpaceConfigBase.ts
+++ b/src/serialization/resources/spaces/types/InternalSpaceConfigBase.ts
@@ -7,8 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { SpaceConfigId } from "../../commons/types/SpaceConfigId";
-import { EnvironmentId } from "../../commons/types/EnvironmentId";
-import { WorkbookId } from "../../commons/types/WorkbookId";
-import { Action } from "../../commons/types/Action";
-import { SpaceAccess } from "./SpaceAccess";
-import { AppId } from "../../commons/types/AppId";
 
@@ -18,8 +12,12 @@ export const InternalSpaceConfigBase: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    spaceConfigId: SpaceConfigId.optional(),
-    environmentId: EnvironmentId.optional(),
-    primaryWorkbookId: WorkbookId.optional(),
+    spaceConfigId: core.serialization.lazy(async () => (await import("../../..")).SpaceConfigId).optional(),
+    environmentId: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId).optional(),
+    primaryWorkbookId: core.serialization.lazy(async () => (await import("../../..")).WorkbookId).optional(),
     metadata: core.serialization.any().optional(),
-    actions: core.serialization.list(Action).optional(),
-    access: core.serialization.list(SpaceAccess).optional(),
+    actions: core.serialization
+        .list(core.serialization.lazyObject(async () => (await import("../../..")).Action))
+        .optional(),
+    access: core.serialization
+        .list(core.serialization.lazy(async () => (await import("../../..")).SpaceAccess))
+        .optional(),
     autoConfigure: core.serialization.boolean().optional(),
@@ -30,3 +28,2 @@ export const InternalSpaceConfigBase: core.serialization.ObjectSchema<
     archivedAt: core.serialization.date().optional(),
-    appId: AppId.optional(),
 });
@@ -35,8 +32,8 @@ export declare namespace InternalSpaceConfigBase {
     interface Raw {
-        spaceConfigId?: SpaceConfigId.Raw | null;
-        environmentId?: EnvironmentId.Raw | null;
-        primaryWorkbookId?: WorkbookId.Raw | null;
+        spaceConfigId?: serializers.SpaceConfigId.Raw | null;
+        environmentId?: serializers.EnvironmentId.Raw | null;
+        primaryWorkbookId?: serializers.WorkbookId.Raw | null;
         metadata?: any | null;
-        actions?: Action.Raw[] | null;
-        access?: SpaceAccess.Raw[] | null;
+        actions?: serializers.Action.Raw[] | null;
+        access?: serializers.SpaceAccess.Raw[] | null;
         autoConfigure?: boolean | null;
@@ -47,3 +44,2 @@ export declare namespace InternalSpaceConfigBase {
         archivedAt?: string | null;
-        appId?: AppId.Raw | null;
     }
diff --git a/src/serialization/resources/spaces/types/ListSpacesResponse.ts b/src/serialization/resources/spaces/types/ListSpacesResponse.ts
index c502cf4..918c6f3 100644
--- a/src/serialization/resources/spaces/types/ListSpacesResponse.ts
+++ b/src/serialization/resources/spaces/types/ListSpacesResponse.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Pagination } from "../../commons/types/Pagination";
-import { Space } from "./Space";
 
@@ -14,4 +12,4 @@ export const ListSpacesResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    pagination: Pagination.optional(),
-    data: core.serialization.list(Space),
+    pagination: core.serialization.lazyObject(async () => (await import("../../..")).Pagination).optional(),
+    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Space)),
 });
@@ -20,4 +18,4 @@ export declare namespace ListSpacesResponse {
     interface Raw {
-        pagination?: Pagination.Raw | null;
-        data: Space.Raw[];
+        pagination?: serializers.Pagination.Raw | null;
+        data: serializers.Space.Raw[];
     }
diff --git a/src/serialization/resources/spaces/types/Space.ts b/src/serialization/resources/spaces/types/Space.ts
index 3dd7321..dd38a6f 100644
--- a/src/serialization/resources/spaces/types/Space.ts
+++ b/src/serialization/resources/spaces/types/Space.ts
@@ -7,7 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { SpaceId } from "../../commons/types/SpaceId";
-import { UserId } from "../../commons/types/UserId";
-import { SpaceSize } from "./SpaceSize";
-import { GuestAuthenticationEnum } from "../../environments/types/GuestAuthenticationEnum";
-import { InternalSpaceConfigBase } from "./InternalSpaceConfigBase";
 
@@ -15,6 +10,6 @@ export const Space: core.serialization.ObjectSchema<serializers.Space.Raw, Flatf
     .object({
-        id: SpaceId,
+        id: core.serialization.lazy(async () => (await import("../../..")).SpaceId),
         workbooksCount: core.serialization.number().optional(),
         filesCount: core.serialization.number().optional(),
-        createdByUserId: UserId.optional(),
+        createdByUserId: core.serialization.lazy(async () => (await import("../../..")).UserId).optional(),
         createdByUserName: core.serialization.string().optional(),
@@ -29,14 +24,16 @@ export const Space: core.serialization.ObjectSchema<serializers.Space.Raw, Flatf
         isCollaborative: core.serialization.boolean().optional(),
-        size: SpaceSize.optional(),
+        size: core.serialization.lazyObject(async () => (await import("../../..")).SpaceSize).optional(),
         upgradedAt: core.serialization.date().optional(),
-        guestAuthentication: core.serialization.list(GuestAuthenticationEnum),
+        guestAuthentication: core.serialization.list(
+            core.serialization.lazy(async () => (await import("../../..")).GuestAuthenticationEnum)
+        ),
     })
-    .extend(InternalSpaceConfigBase);
+    .extend(core.serialization.lazyObject(async () => (await import("../../..")).InternalSpaceConfigBase));
 
 export declare namespace Space {
-    interface Raw extends InternalSpaceConfigBase.Raw {
-        id: SpaceId.Raw;
+    interface Raw extends serializers.InternalSpaceConfigBase.Raw {
+        id: serializers.SpaceId.Raw;
         workbooksCount?: number | null;
         filesCount?: number | null;
-        createdByUserId?: UserId.Raw | null;
+        createdByUserId?: serializers.UserId.Raw | null;
         createdByUserName?: string | null;
@@ -51,5 +48,5 @@ export declare namespace Space {
         isCollaborative?: boolean | null;
-        size?: SpaceSize.Raw | null;
+        size?: serializers.SpaceSize.Raw | null;
         upgradedAt?: string | null;
-        guestAuthentication: GuestAuthenticationEnum.Raw[];
+        guestAuthentication: serializers.GuestAuthenticationEnum.Raw[];
     }
diff --git a/src/serialization/resources/spaces/types/SpaceConfig.ts b/src/serialization/resources/spaces/types/SpaceConfig.ts
index 4cb89e9..00a252d 100644
--- a/src/serialization/resources/spaces/types/SpaceConfig.ts
+++ b/src/serialization/resources/spaces/types/SpaceConfig.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { GuestAuthenticationEnum } from "../../environments/types/GuestAuthenticationEnum";
-import { InternalSpaceConfigBase } from "./InternalSpaceConfigBase";
 
@@ -15,11 +13,13 @@ export const SpaceConfig: core.serialization.ObjectSchema<serializers.SpaceConfi
             displayOrder: core.serialization.number().optional(),
-            guestAuthentication: core.serialization.list(GuestAuthenticationEnum).optional(),
+            guestAuthentication: core.serialization
+                .list(core.serialization.lazy(async () => (await import("../../..")).GuestAuthenticationEnum))
+                .optional(),
         })
-        .extend(InternalSpaceConfigBase);
+        .extend(core.serialization.lazyObject(async () => (await import("../../..")).InternalSpaceConfigBase));
 
 export declare namespace SpaceConfig {
-    interface Raw extends InternalSpaceConfigBase.Raw {
+    interface Raw extends serializers.InternalSpaceConfigBase.Raw {
         name?: string | null;
         displayOrder?: number | null;
-        guestAuthentication?: GuestAuthenticationEnum.Raw[] | null;
+        guestAuthentication?: serializers.GuestAuthenticationEnum.Raw[] | null;
     }
diff --git a/src/serialization/resources/spaces/types/SpaceResponse.ts b/src/serialization/resources/spaces/types/SpaceResponse.ts
index d2b0a68..abe2d0b 100644
--- a/src/serialization/resources/spaces/types/SpaceResponse.ts
+++ b/src/serialization/resources/spaces/types/SpaceResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Space } from "./Space";
 
@@ -11,3 +10,3 @@ export const SpaceResponse: core.serialization.ObjectSchema<serializers.SpaceRes
     core.serialization.object({
-        data: Space,
+        data: core.serialization.lazyObject(async () => (await import("../../..")).Space),
     });
@@ -16,3 +15,3 @@ export declare namespace SpaceResponse {
     interface Raw {
-        data: Space.Raw;
+        data: serializers.Space.Raw;
     }
diff --git a/src/serialization/resources/spaces/types/UpgradeSpaceConfig.ts b/src/serialization/resources/spaces/types/UpgradeSpaceConfig.ts
deleted file mode 100644
index c3e615a..0000000
--- a/src/serialization/resources/spaces/types/UpgradeSpaceConfig.ts
+++ /dev/null
@@ -1,20 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as serializers from "../../..";
-import * as Flatfile from "../../../../api";
-import * as core from "../../../../core";
-
-export const UpgradeSpaceConfig: core.serialization.ObjectSchema<
-    serializers.UpgradeSpaceConfig.Raw,
-    Flatfile.UpgradeSpaceConfig
-> = core.serialization.object({
-    id: core.serialization.string(),
-});
-
-export declare namespace UpgradeSpaceConfig {
-    interface Raw {
-        id: string;
-    }
-}
diff --git a/src/serialization/resources/spaces/types/index.ts b/src/serialization/resources/spaces/types/index.ts
index 8669369..338c7d4 100644
--- a/src/serialization/resources/spaces/types/index.ts
+++ b/src/serialization/resources/spaces/types/index.ts
@@ -6,3 +6,2 @@ export * from "./SpaceConfig";
 export * from "./InternalSpaceConfigBase";
-export * from "./UpgradeSpaceConfig";
 export * from "./EventTokenResponse";
diff --git a/src/serialization/resources/users/client/requests/UpdateUserRequest.ts b/src/serialization/resources/users/client/requests/UpdateUserRequest.ts
deleted file mode 100644
index 8b56009..0000000
--- a/src/serialization/resources/users/client/requests/UpdateUserRequest.ts
+++ /dev/null
@@ -1,22 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as serializers from "../../../..";
-import * as Flatfile from "../../../../../api";
-import * as core from "../../../../../core";
-
-export const UpdateUserRequest: core.serialization.Schema<
-    serializers.UpdateUserRequest.Raw,
-    Flatfile.UpdateUserRequest
-> = core.serialization.object({
-    name: core.serialization.string().optional(),
-    dashboard: core.serialization.number().optional(),
-});
-
-export declare namespace UpdateUserRequest {
-    interface Raw {
-        name?: string | null;
-        dashboard?: number | null;
-    }
-}
diff --git a/src/serialization/resources/users/client/requests/index.ts b/src/serialization/resources/users/client/requests/index.ts
index b8e6ca1..96fc6d1 100644
--- a/src/serialization/resources/users/client/requests/index.ts
+++ b/src/serialization/resources/users/client/requests/index.ts
@@ -1,2 +1 @@
-export { UpdateUserRequest } from "./UpdateUserRequest";
 export { ExchangeTokenRequest } from "./ExchangeTokenRequest";
diff --git a/src/serialization/resources/users/types/ApiTokenResponse.ts b/src/serialization/resources/users/types/ApiTokenResponse.ts
index 2111eae..de1758e 100644
--- a/src/serialization/resources/users/types/ApiTokenResponse.ts
+++ b/src/serialization/resources/users/types/ApiTokenResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { ApiToken } from "./ApiToken";
 
@@ -13,3 +12,3 @@ export const ApiTokenResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: ApiToken,
+    data: core.serialization.lazyObject(async () => (await import("../../..")).ApiToken),
 });
@@ -18,3 +17,3 @@ export declare namespace ApiTokenResponse {
     interface Raw {
-        data: ApiToken.Raw;
+        data: serializers.ApiToken.Raw;
     }
diff --git a/src/serialization/resources/users/types/ExchangeTokenResponse.ts b/src/serialization/resources/users/types/ExchangeTokenResponse.ts
index 49ca270..d5842a7 100644
--- a/src/serialization/resources/users/types/ExchangeTokenResponse.ts
+++ b/src/serialization/resources/users/types/ExchangeTokenResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { ExchangeTokenData } from "./ExchangeTokenData";
 
@@ -13,3 +12,3 @@ export const ExchangeTokenResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: ExchangeTokenData,
+    data: core.serialization.lazyObject(async () => (await import("../../..")).ExchangeTokenData),
 });
@@ -18,3 +17,3 @@ export declare namespace ExchangeTokenResponse {
     interface Raw {
-        data: ExchangeTokenData.Raw;
+        data: serializers.ExchangeTokenData.Raw;
     }
diff --git a/src/serialization/resources/users/types/ListApiTokensResponse.ts b/src/serialization/resources/users/types/ListApiTokensResponse.ts
index dff6334..87245dd 100644
--- a/src/serialization/resources/users/types/ListApiTokensResponse.ts
+++ b/src/serialization/resources/users/types/ListApiTokensResponse.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Pagination } from "../../commons/types/Pagination";
-import { ApiToken } from "./ApiToken";
 
@@ -14,4 +12,4 @@ export const ListApiTokensResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    pagination: Pagination.optional(),
-    data: core.serialization.list(ApiToken),
+    pagination: core.serialization.lazyObject(async () => (await import("../../..")).Pagination).optional(),
+    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).ApiToken)),
 });
@@ -20,4 +18,4 @@ export declare namespace ListApiTokensResponse {
     interface Raw {
-        pagination?: Pagination.Raw | null;
-        data: ApiToken.Raw[];
+        pagination?: serializers.Pagination.Raw | null;
+        data: serializers.ApiToken.Raw[];
     }
diff --git a/src/serialization/resources/users/types/ListUsersResponse.ts b/src/serialization/resources/users/types/ListUsersResponse.ts
index 957794f..75b7207 100644
--- a/src/serialization/resources/users/types/ListUsersResponse.ts
+++ b/src/serialization/resources/users/types/ListUsersResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { User } from "./User";
 
@@ -13,3 +12,3 @@ export const ListUsersResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(User),
+    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).User)),
 });
@@ -18,3 +17,3 @@ export declare namespace ListUsersResponse {
     interface Raw {
-        data: User.Raw[];
+        data: serializers.User.Raw[];
     }
diff --git a/src/serialization/resources/users/types/User.ts b/src/serialization/resources/users/types/User.ts
index 9446627..26fa357 100644
--- a/src/serialization/resources/users/types/User.ts
+++ b/src/serialization/resources/users/types/User.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { UserId } from "../../commons/types/UserId";
-import { UserConfig } from "./UserConfig";
 
@@ -12,3 +10,3 @@ export const User: core.serialization.ObjectSchema<serializers.User.Raw, Flatfil
     .object({
-        id: UserId,
+        id: core.serialization.lazy(async () => (await import("../../..")).UserId),
         idp: core.serialization.string(),
@@ -18,10 +16,8 @@ export const User: core.serialization.ObjectSchema<serializers.User.Raw, Flatfil
         updatedAt: core.serialization.date(),
-        lastSeenAt: core.serialization.date().optional(),
-        dashboard: core.serialization.number().optional(),
     })
-    .extend(UserConfig);
+    .extend(core.serialization.lazyObject(async () => (await import("../../..")).UserConfig));
 
 export declare namespace User {
-    interface Raw extends UserConfig.Raw {
-        id: UserId.Raw;
+    interface Raw extends serializers.UserConfig.Raw {
+        id: serializers.UserId.Raw;
         idp: string;
@@ -31,4 +27,2 @@ export declare namespace User {
         updatedAt: string;
-        lastSeenAt?: string | null;
-        dashboard?: number | null;
     }
diff --git a/src/serialization/resources/users/types/UserConfig.ts b/src/serialization/resources/users/types/UserConfig.ts
index 79df346..551cf49 100644
--- a/src/serialization/resources/users/types/UserConfig.ts
+++ b/src/serialization/resources/users/types/UserConfig.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { AccountId } from "../../commons/types/AccountId";
 
@@ -13,3 +12,3 @@ export const UserConfig: core.serialization.ObjectSchema<serializers.UserConfig.
         name: core.serialization.string(),
-        accountId: AccountId,
+        accountId: core.serialization.lazy(async () => (await import("../../..")).AccountId),
     });
@@ -20,3 +19,3 @@ export declare namespace UserConfig {
         name: string;
-        accountId: AccountId.Raw;
+        accountId: serializers.AccountId.Raw;
     }
diff --git a/src/serialization/resources/users/types/UserCreateAndInviteRequest.ts b/src/serialization/resources/users/types/UserCreateAndInviteRequest.ts
deleted file mode 100644
index 47488da..0000000
--- a/src/serialization/resources/users/types/UserCreateAndInviteRequest.ts
+++ /dev/null
@@ -1,25 +0,0 @@
-/**
- * This file was auto-generated by Fern from our API Definition.
- */
-
-import * as serializers from "../../..";
-import * as Flatfile from "../../../../api";
-import * as core from "../../../../core";
-import { AssignActorRoleRequest } from "../../roles/types/AssignActorRoleRequest";
-
-export const UserCreateAndInviteRequest: core.serialization.ObjectSchema<
-    serializers.UserCreateAndInviteRequest.Raw,
-    Flatfile.UserCreateAndInviteRequest
-> = core.serialization.object({
-    email: core.serialization.string(),
-    name: core.serialization.string(),
-    actorRoles: core.serialization.list(AssignActorRoleRequest),
-});
-
-export declare namespace UserCreateAndInviteRequest {
-    interface Raw {
-        email: string;
-        name: string;
-        actorRoles: AssignActorRoleRequest.Raw[];
-    }
-}
diff --git a/src/serialization/resources/users/types/UserResponse.ts b/src/serialization/resources/users/types/UserResponse.ts
index 210a54a..a954c5b 100644
--- a/src/serialization/resources/users/types/UserResponse.ts
+++ b/src/serialization/resources/users/types/UserResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { User } from "./User";
 
@@ -11,3 +10,3 @@ export const UserResponse: core.serialization.ObjectSchema<serializers.UserRespo
     core.serialization.object({
-        data: User,
+        data: core.serialization.lazyObject(async () => (await import("../../..")).User),
     });
@@ -16,3 +15,3 @@ export declare namespace UserResponse {
     interface Raw {
-        data: User.Raw;
+        data: serializers.User.Raw;
     }
diff --git a/src/serialization/resources/users/types/index.ts b/src/serialization/resources/users/types/index.ts
index bae3706..7bd7d69 100644
--- a/src/serialization/resources/users/types/index.ts
+++ b/src/serialization/resources/users/types/index.ts
@@ -4,3 +4,2 @@ export * from "./User";
 export * from "./UserConfig";
-export * from "./UserCreateAndInviteRequest";
 export * from "./ListApiTokensResponse";
diff --git a/src/serialization/resources/versions/client/requests/VersionsPostRequestBody.ts b/src/serialization/resources/versions/client/requests/VersionsPostRequestBody.ts
index 1af762b..a657e9b 100644
--- a/src/serialization/resources/versions/client/requests/VersionsPostRequestBody.ts
+++ b/src/serialization/resources/versions/client/requests/VersionsPostRequestBody.ts
@@ -7,4 +7,2 @@ import * as Flatfile from "../../../../../api";
 import * as core from "../../../../../core";
-import { SheetId } from "../../../commons/types/SheetId";
-import { VersionId } from "../../../commons/types/VersionId";
 
@@ -14,4 +12,4 @@ export const VersionsPostRequestBody: core.serialization.Schema<
 > = core.serialization.object({
-    sheetId: SheetId.optional(),
-    parentVersionId: VersionId.optional(),
+    sheetId: core.serialization.lazy(async () => (await import("../../../..")).SheetId).optional(),
+    parentVersionId: core.serialization.lazy(async () => (await import("../../../..")).VersionId).optional(),
 });
@@ -20,4 +18,4 @@ export declare namespace VersionsPostRequestBody {
     interface Raw {
-        sheetId?: SheetId.Raw | null;
-        parentVersionId?: VersionId.Raw | null;
+        sheetId?: serializers.SheetId.Raw | null;
+        parentVersionId?: serializers.VersionId.Raw | null;
     }
diff --git a/src/serialization/resources/versions/types/Version.ts b/src/serialization/resources/versions/types/Version.ts
index 2d33165..e604c40 100644
--- a/src/serialization/resources/versions/types/Version.ts
+++ b/src/serialization/resources/versions/types/Version.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { VersionId } from "../../commons/types/VersionId";
 
@@ -11,3 +10,3 @@ export const Version: core.serialization.ObjectSchema<serializers.Version.Raw, F
     core.serialization.object({
-        versionId: VersionId,
+        versionId: core.serialization.lazy(async () => (await import("../../..")).VersionId),
     });
@@ -16,3 +15,3 @@ export declare namespace Version {
     interface Raw {
-        versionId: VersionId.Raw;
+        versionId: serializers.VersionId.Raw;
     }
diff --git a/src/serialization/resources/versions/types/VersionResponse.ts b/src/serialization/resources/versions/types/VersionResponse.ts
index ac24471..f5c4675 100644
--- a/src/serialization/resources/versions/types/VersionResponse.ts
+++ b/src/serialization/resources/versions/types/VersionResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Version } from "./Version";
 
@@ -13,3 +12,3 @@ export const VersionResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: Version,
+    data: core.serialization.lazyObject(async () => (await import("../../..")).Version),
 });
@@ -18,3 +17,3 @@ export declare namespace VersionResponse {
     interface Raw {
-        data: Version.Raw;
+        data: serializers.Version.Raw;
     }
diff --git a/src/serialization/resources/workbooks/types/CreateWorkbookConfig.ts b/src/serialization/resources/workbooks/types/CreateWorkbookConfig.ts
index dff62c1..10acd18 100644
--- a/src/serialization/resources/workbooks/types/CreateWorkbookConfig.ts
+++ b/src/serialization/resources/workbooks/types/CreateWorkbookConfig.ts
@@ -7,7 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { SpaceId } from "../../commons/types/SpaceId";
-import { EnvironmentId } from "../../commons/types/EnvironmentId";
-import { SheetConfig } from "../../sheets/types/SheetConfig";
-import { Action } from "../../commons/types/Action";
-import { WorkbookConfigSettings } from "./WorkbookConfigSettings";
 
@@ -19,8 +14,12 @@ export const CreateWorkbookConfig: core.serialization.ObjectSchema<
     labels: core.serialization.list(core.serialization.string()).optional(),
-    spaceId: SpaceId.optional(),
-    environmentId: EnvironmentId.optional(),
+    spaceId: core.serialization.lazy(async () => (await import("../../..")).SpaceId).optional(),
+    environmentId: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId).optional(),
     namespace: core.serialization.string().optional(),
-    sheets: core.serialization.list(SheetConfig).optional(),
-    actions: core.serialization.list(Action).optional(),
-    settings: WorkbookConfigSettings.optional(),
+    sheets: core.serialization
+        .list(core.serialization.lazyObject(async () => (await import("../../..")).SheetConfig))
+        .optional(),
+    actions: core.serialization
+        .list(core.serialization.lazyObject(async () => (await import("../../..")).Action))
+        .optional(),
+    settings: core.serialization.lazyObject(async () => (await import("../../..")).WorkbookConfigSettings).optional(),
     metadata: core.serialization.any().optional(),
@@ -32,8 +31,8 @@ export declare namespace CreateWorkbookConfig {
         labels?: string[] | null;
-        spaceId?: SpaceId.Raw | null;
-        environmentId?: EnvironmentId.Raw | null;
+        spaceId?: serializers.SpaceId.Raw | null;
+        environmentId?: serializers.EnvironmentId.Raw | null;
         namespace?: string | null;
-        sheets?: SheetConfig.Raw[] | null;
-        actions?: Action.Raw[] | null;
-        settings?: WorkbookConfigSettings.Raw | null;
+        sheets?: serializers.SheetConfig.Raw[] | null;
+        actions?: serializers.Action.Raw[] | null;
+        settings?: serializers.WorkbookConfigSettings.Raw | null;
         metadata?: any | null;
diff --git a/src/serialization/resources/workbooks/types/ListWorkbooksResponse.ts b/src/serialization/resources/workbooks/types/ListWorkbooksResponse.ts
index 93e5dfd..dc1e71d 100644
--- a/src/serialization/resources/workbooks/types/ListWorkbooksResponse.ts
+++ b/src/serialization/resources/workbooks/types/ListWorkbooksResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Workbook } from "./Workbook";
 
@@ -13,3 +12,3 @@ export const ListWorkbooksResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: core.serialization.list(Workbook),
+    data: core.serialization.list(core.serialization.lazyObject(async () => (await import("../../..")).Workbook)),
 });
@@ -18,3 +17,3 @@ export declare namespace ListWorkbooksResponse {
     interface Raw {
-        data: Workbook.Raw[];
+        data: serializers.Workbook.Raw[];
     }
diff --git a/src/serialization/resources/workbooks/types/Workbook.ts b/src/serialization/resources/workbooks/types/Workbook.ts
index 1d72635..27fa380 100644
--- a/src/serialization/resources/workbooks/types/Workbook.ts
+++ b/src/serialization/resources/workbooks/types/Workbook.ts
@@ -7,8 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { WorkbookId } from "../../commons/types/WorkbookId";
-import { SpaceId } from "../../commons/types/SpaceId";
-import { EnvironmentId } from "../../commons/types/EnvironmentId";
-import { Sheet } from "../../sheets/types/Sheet";
-import { Action } from "../../commons/types/Action";
-import { WorkbookConfigSettings } from "./WorkbookConfigSettings";
 
@@ -16,10 +10,16 @@ export const Workbook: core.serialization.ObjectSchema<serializers.Workbook.Raw,
     core.serialization.object({
-        id: WorkbookId,
+        id: core.serialization.lazy(async () => (await import("../../..")).WorkbookId),
         name: core.serialization.string().optional(),
-        spaceId: SpaceId,
-        environmentId: EnvironmentId,
-        sheets: core.serialization.list(Sheet).optional(),
+        spaceId: core.serialization.lazy(async () => (await import("../../..")).SpaceId),
+        environmentId: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId),
+        sheets: core.serialization
+            .list(core.serialization.lazyObject(async () => (await import("../../..")).Sheet))
+            .optional(),
         labels: core.serialization.list(core.serialization.string()).optional(),
-        actions: core.serialization.list(Action).optional(),
-        settings: WorkbookConfigSettings.optional(),
+        actions: core.serialization
+            .list(core.serialization.lazyObject(async () => (await import("../../..")).Action))
+            .optional(),
+        settings: core.serialization
+            .lazyObject(async () => (await import("../../..")).WorkbookConfigSettings)
+            .optional(),
         metadata: core.serialization.any().optional(),
@@ -33,10 +33,10 @@ export declare namespace Workbook {
     interface Raw {
-        id: WorkbookId.Raw;
+        id: serializers.WorkbookId.Raw;
         name?: string | null;
-        spaceId: SpaceId.Raw;
-        environmentId: EnvironmentId.Raw;
-        sheets?: Sheet.Raw[] | null;
+        spaceId: serializers.SpaceId.Raw;
+        environmentId: serializers.EnvironmentId.Raw;
+        sheets?: serializers.Sheet.Raw[] | null;
         labels?: string[] | null;
-        actions?: Action.Raw[] | null;
-        settings?: WorkbookConfigSettings.Raw | null;
+        actions?: serializers.Action.Raw[] | null;
+        settings?: serializers.WorkbookConfigSettings.Raw | null;
         metadata?: any | null;
diff --git a/src/serialization/resources/workbooks/types/WorkbookResponse.ts b/src/serialization/resources/workbooks/types/WorkbookResponse.ts
index dbc8edb..73df47c 100644
--- a/src/serialization/resources/workbooks/types/WorkbookResponse.ts
+++ b/src/serialization/resources/workbooks/types/WorkbookResponse.ts
@@ -7,3 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { Workbook } from "./Workbook";
 
@@ -13,3 +12,3 @@ export const WorkbookResponse: core.serialization.ObjectSchema<
 > = core.serialization.object({
-    data: Workbook,
+    data: core.serialization.lazyObject(async () => (await import("../../..")).Workbook),
 });
@@ -18,3 +17,3 @@ export declare namespace WorkbookResponse {
     interface Raw {
-        data: Workbook.Raw;
+        data: serializers.Workbook.Raw;
     }
diff --git a/src/serialization/resources/workbooks/types/WorkbookUpdate.ts b/src/serialization/resources/workbooks/types/WorkbookUpdate.ts
index f1f9562..3daf5d1 100644
--- a/src/serialization/resources/workbooks/types/WorkbookUpdate.ts
+++ b/src/serialization/resources/workbooks/types/WorkbookUpdate.ts
@@ -7,6 +7,2 @@ import * as Flatfile from "../../../../api";
 import * as core from "../../../../core";
-import { SpaceId } from "../../commons/types/SpaceId";
-import { EnvironmentId } from "../../commons/types/EnvironmentId";
-import { SheetConfigOrUpdate } from "../../sheets/types/SheetConfigOrUpdate";
-import { Action } from "../../commons/types/Action";
 
@@ -16,7 +12,11 @@ export const WorkbookUpdate: core.serialization.ObjectSchema<serializers.Workboo
         labels: core.serialization.list(core.serialization.string()).optional(),
-        spaceId: SpaceId.optional(),
-        environmentId: EnvironmentId.optional(),
+        spaceId: core.serialization.lazy(async () => (await import("../../..")).SpaceId).optional(),
+        environmentId: core.serialization.lazy(async () => (await import("../../..")).EnvironmentId).optional(),
         namespace: core.serialization.string().optional(),
-        sheets: core.serialization.list(SheetConfigOrUpdate).optional(),
-        actions: core.serialization.list(Action).optional(),
+        sheets: core.serialization
+            .list(core.serialization.lazyObject(async () => (await import("../../..")).SheetConfigOrUpdate))
+            .optional(),
+        actions: core.serialization
+            .list(core.serialization.lazyObject(async () => (await import("../../..")).Action))
+            .optional(),
         metadata: core.serialization.any().optional(),
@@ -28,7 +28,7 @@ export declare namespace WorkbookUpdate {
         labels?: string[] | null;
-        spaceId?: SpaceId.Raw | null;
-        environmentId?: EnvironmentId.Raw | null;
+        spaceId?: serializers.SpaceId.Raw | null;
+        environmentId?: serializers.EnvironmentId.Raw | null;
         namespace?: string | null;
-        sheets?: SheetConfigOrUpdate.Raw[] | null;
-        actions?: Action.Raw[] | null;
+        sheets?: serializers.SheetConfigOrUpdate.Raw[] | null;
+        actions?: serializers.Action.Raw[] | null;
         metadata?: any | null;
diff --git a/tests/client.test.ts b/tests/client.test.ts
deleted file mode 100644
index 62b373b..0000000
--- a/tests/client.test.ts
+++ /dev/null
@@ -1,11 +0,0 @@
-/**
-* This is a test file for the SDK.
-* 
-* Add any tests here and make sure to mark this file
-* in `.fernignore`. 
-*/
-describe("test", () => {
-    it("default", () => {
-        expect(true).toBe(true);
-    });
-});
\ No newline at end of file
diff --git a/tsconfig.json b/tsconfig.json
index 5a306b2..e65fa53 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -10,2 +10,3 @@
         "declaration": true,
+        "noUnusedParameters": true,
         "outDir": "dist",

/**
 * This file was auto-generated by Fern from our API Definition.
 */

import urlJoin from "url-join";
import * as environments from "./environments";
import * as core from "./core";
import { Agents } from "./api/resources/agents/client/Client";
import { Documents } from "./api/resources/documents/client/Client";
import { Environments } from "./api/resources/environments/client/Client";
import { Events } from "./api/resources/events/client/Client";
import { Files } from "./api/resources/files/client/Client";
import { Guests } from "./api/resources/guests/client/Client";
import { Jobs } from "./api/resources/jobs/client/Client";
import { Sheets } from "./api/resources/sheets/client/Client";
import { Spaces } from "./api/resources/spaces/client/Client";
import { Users } from "./api/resources/users/client/Client";
import { Workbooks } from "./api/resources/workbooks/client/Client";

export declare namespace FlatfileClient {
    interface Options {
        environment?: environments.FlatfileEnvironment | string;
        clientId?: core.Supplier<string>;
        clientSecret?: core.Supplier<string>;
    }
}

export class FlatfileClient {
    private token: string | undefined;
    private options: { environment?: string; token: () => Promise<string | undefined> };

    constructor(options: FlatfileClient.Options) {
        this.options = {
            environment: options.environment,
            token: async () => {
                if (this.token == null && options.clientId != null && options.clientSecret != null) {
                    const response = await core.fetcher({
                        url: urlJoin(
                            this.options.environment ?? environments.FlatfileEnvironment.Production,
                            "/auth/access-token"
                        ),
                        method: "POST",
                        body: {
                            clientId: options.clientId,
                            secret: options.clientSecret,
                        },
                    });
                    if (response.ok) {
                        this.token = (response.body as any)?.data?.accessToken;
                    }
                }
                return this.token;
            },
        };
    }

    private _agents: Agents | undefined;

    public get agents(): Agents {
        return (this._agents ??= new Agents(this.options));
    }

    private _documents: Documents | undefined;

    public get documents(): Documents {
        return (this._documents ??= new Documents(this.options));
    }

    private _environments: Environments | undefined;

    public get environments(): Environments {
        return (this._environments ??= new Environments(this.options));
    }

    private _events: Events | undefined;

    public get events(): Events {
        return (this._events ??= new Events(this.options));
    }

    private _files: Files | undefined;

    public get files(): Files {
        return (this._files ??= new Files(this.options));
    }

    private _guests: Guests | undefined;

    public get guests(): Guests {
        return (this._guests ??= new Guests(this.options));
    }

    private _jobs: Jobs | undefined;

    public get jobs(): Jobs {
        return (this._jobs ??= new Jobs(this.options));
    }

    private _sheets: Sheets | undefined;

    public get sheets(): Sheets {
        return (this._sheets ??= new Sheets(this.options));
    }

    private _spaces: Spaces | undefined;

    public get spaces(): Spaces {
        return (this._spaces ??= new Spaces(this.options));
    }

    private _users: Users | undefined;

    public get users(): Users {
        return (this._users ??= new Users(this.options));
    }

    private _workbooks: Workbooks | undefined;

    public get workbooks(): Workbooks {
        return (this._workbooks ??= new Workbooks(this.options));
    }
}

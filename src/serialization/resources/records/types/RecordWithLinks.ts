/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Flatfile from "../../../../api";
import * as core from "../../../../core";
import { RecordId } from "../../commons/types/RecordId";
import { RecordDataWithLinks } from "./RecordDataWithLinks";
import { ValidationMessage } from "./ValidationMessage";
import { RecordConfig } from "./RecordConfig";
import { CellValueWithLinks } from "./CellValueWithLinks";

export const RecordWithLinks: core.serialization.ObjectSchema<
    serializers.RecordWithLinks.Raw,
    Flatfile.RecordWithLinks
> = core.serialization.object({
    id: RecordId,
    values: RecordDataWithLinks,
    valid: core.serialization.boolean().optional(),
    messages: core.serialization.list(ValidationMessage).optional(),
    metadata: core.serialization.record(core.serialization.string(), core.serialization.any()).optional(),
    config: RecordConfig.optional(),
});

export declare namespace RecordWithLinks {
    interface Raw {
        id: RecordId.Raw;
        values: RecordDataWithLinks.Raw;
        valid?: boolean | null;
        messages?: ValidationMessage.Raw[] | null;
        metadata?: Record<string, any> | null;
        config?: RecordConfig.Raw | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../..";
import { Flatfile } from "@flatfile/api";
import * as core from "../../../../../core";

export const FindAndReplaceRecordRequest: core.serialization.Schema<
    serializers.FindAndReplaceRecordRequest.Raw,
    Omit<Flatfile.FindAndReplaceRecordRequest, "filter" | "filterField" | "searchValue" | "searchField" | "ids">
> = core.serialization.object({
    find: core.serialization.lazy(async () => (await import("../../../..")).CellValueUnion).optional(),
    replace: core.serialization.lazy(async () => (await import("../../../..")).CellValueUnion).optional(),
    fieldKey: core.serialization.string(),
});

export declare namespace FindAndReplaceRecordRequest {
    interface Raw {
        find?: serializers.CellValueUnion.Raw | null;
        replace?: serializers.CellValueUnion.Raw | null;
        fieldKey: string;
    }
}

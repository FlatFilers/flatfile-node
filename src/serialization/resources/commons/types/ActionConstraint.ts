/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Flatfile from "../../../../api/index";
import * as core from "../../../../core";
import { ActionConstraintHasAllValid } from "./ActionConstraintHasAllValid";
import { ActionConstraintHasSelection } from "./ActionConstraintHasSelection";
import { ActionConstraintHasData } from "./ActionConstraintHasData";
import { ActionConstraintHasColumnEnabled } from "./ActionConstraintHasColumnEnabled";

export const ActionConstraint: core.serialization.Schema<serializers.ActionConstraint.Raw, Flatfile.ActionConstraint> =
    core.serialization
        .union("type", {
            hasAllValid: ActionConstraintHasAllValid,
            hasSelection: ActionConstraintHasSelection,
            hasData: ActionConstraintHasData,
            hasColumnEnabled: ActionConstraintHasColumnEnabled,
        })
        .transform<Flatfile.ActionConstraint>({
            transform: (value) => value,
            untransform: (value) => value,
        });

export declare namespace ActionConstraint {
    export type Raw =
        | ActionConstraint.HasAllValid
        | ActionConstraint.HasSelection
        | ActionConstraint.HasData
        | ActionConstraint.HasColumnEnabled;

    export interface HasAllValid extends ActionConstraintHasAllValid.Raw {
        type: "hasAllValid";
    }

    export interface HasSelection extends ActionConstraintHasSelection.Raw {
        type: "hasSelection";
    }

    export interface HasData extends ActionConstraintHasData.Raw {
        type: "hasData";
    }

    export interface HasColumnEnabled extends ActionConstraintHasColumnEnabled.Raw {
        type: "hasColumnEnabled";
    }
}

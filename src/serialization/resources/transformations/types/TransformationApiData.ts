/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Flatfile from "../../../../api/index";
import * as core from "../../../../core";
import { TransformationId } from "../../commons/types/TransformationId";
import { AccountId } from "../../commons/types/AccountId";
import { EnvironmentId } from "../../commons/types/EnvironmentId";
import { SpaceId } from "../../commons/types/SpaceId";
import { AppId } from "../../commons/types/AppId";
import { ProgramId } from "../../commons/types/ProgramId";

export const TransformationApiData: core.serialization.ObjectSchema<
    serializers.TransformationApiData.Raw,
    Flatfile.TransformationApiData
> = core.serialization.object({
    id: TransformationId,
    accountId: AccountId,
    environmentId: EnvironmentId,
    spaceId: SpaceId,
    appId: AppId,
    programId: ProgramId,
    keys: core.serialization.list(core.serialization.string()),
    sourceKeys: core.serialization.list(core.serialization.string()),
    destinationKeys: core.serialization.list(core.serialization.string()),
    transformationFunction: core.serialization.string(),
    mutationCommand: core.serialization.string(),
    errorMessage: core.serialization.string().optional(),
    genesisValidationError: core.serialization.string().optional(),
    solvedErrorMessages: core.serialization.list(core.serialization.string()),
    createdAt: core.serialization.date(),
    updatedAt: core.serialization.date(),
    lastExecuted: core.serialization.date().optional(),
    usageCount: core.serialization.number(),
});

export declare namespace TransformationApiData {
    export interface Raw {
        id: TransformationId.Raw;
        accountId: AccountId.Raw;
        environmentId: EnvironmentId.Raw;
        spaceId: SpaceId.Raw;
        appId: AppId.Raw;
        programId: ProgramId.Raw;
        keys: string[];
        sourceKeys: string[];
        destinationKeys: string[];
        transformationFunction: string;
        mutationCommand: string;
        errorMessage?: string | null;
        genesisValidationError?: string | null;
        solvedErrorMessages: string[];
        createdAt: string;
        updatedAt: string;
        lastExecuted?: string | null;
        usageCount: number;
    }
}

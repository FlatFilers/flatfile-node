/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Flatfile from "../../../../api";
import * as core from "../../../../core";
import { CompositeUniqueConstraint } from "./CompositeUniqueConstraint";
import { ExternalSheetConstraint } from "./ExternalSheetConstraint";

export const SheetConstraint: core.serialization.Schema<serializers.SheetConstraint.Raw, Flatfile.SheetConstraint> =
    core.serialization
        .union("type", {
            unique: CompositeUniqueConstraint,
            external: ExternalSheetConstraint,
        })
        .transform<Flatfile.SheetConstraint>({
            transform: (value) => value,
            untransform: (value) => value,
        });

export declare namespace SheetConstraint {
    type Raw = SheetConstraint.Unique | SheetConstraint.External;

    interface Unique extends CompositeUniqueConstraint.Raw {
        type: "unique";
    }

    interface External extends ExternalSheetConstraint.Raw {
        type: "external";
    }
}

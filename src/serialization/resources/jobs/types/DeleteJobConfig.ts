/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Flatfile from "../../../../api";
import * as core from "../../../../core";

export const DeleteJobConfig: core.serialization.ObjectSchema<
    serializers.DeleteJobConfig.Raw,
    Flatfile.DeleteJobConfig
> = core.serialization.object({
    filter: core.serialization.lazy(async () => (await import("../../..")).Filter).optional(),
    filterField: core.serialization.lazy(async () => (await import("../../..")).FilterField).optional(),
    searchValue: core.serialization.lazy(async () => (await import("../../..")).SearchValue).optional(),
    searchField: core.serialization.lazy(async () => (await import("../../..")).SearchField).optional(),
    q: core.serialization.string().optional(),
    sheet: core.serialization.lazy(async () => (await import("../../..")).SheetId),
    exceptions: core.serialization
        .list(core.serialization.lazy(async () => (await import("../../..")).RecordId))
        .optional(),
});

export declare namespace DeleteJobConfig {
    interface Raw {
        filter?: serializers.Filter.Raw | null;
        filterField?: serializers.FilterField.Raw | null;
        searchValue?: serializers.SearchValue.Raw | null;
        searchField?: serializers.SearchField.Raw | null;
        q?: string | null;
        sheet: serializers.SheetId.Raw;
        exceptions?: serializers.RecordId.Raw[] | null;
    }
}

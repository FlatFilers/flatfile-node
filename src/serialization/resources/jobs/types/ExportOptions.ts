/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Flatfile from "../../../../api";
import * as core from "../../../../core";
import { VersionId } from "../../commons/types/VersionId";
import { CommitId } from "../../commons/types/CommitId";
import { SortField } from "../../commons/types/SortField";
import { SortDirection } from "../../commons/types/SortDirection";
import { Filter } from "../../commons/types/Filter";
import { FilterField } from "../../commons/types/FilterField";
import { SearchValue } from "../../commons/types/SearchValue";
import { SearchField } from "../../commons/types/SearchField";
import { RecordId } from "../../commons/types/RecordId";

export const ExportOptions: core.serialization.ObjectSchema<serializers.ExportOptions.Raw, Flatfile.ExportOptions> =
    core.serialization.object({
        versionId: VersionId.optional(),
        commitId: CommitId.optional(),
        sortField: SortField.optional(),
        sortDirection: SortDirection.optional(),
        filter: Filter.optional(),
        filterField: FilterField.optional(),
        searchValue: SearchValue.optional(),
        searchField: SearchField.optional(),
        q: core.serialization.string().optional(),
        ids: core.serialization.list(RecordId).optional(),
    });

export declare namespace ExportOptions {
    interface Raw {
        versionId?: VersionId.Raw | null;
        commitId?: CommitId.Raw | null;
        sortField?: SortField.Raw | null;
        sortDirection?: SortDirection.Raw | null;
        filter?: Filter.Raw | null;
        filterField?: FilterField.Raw | null;
        searchValue?: SearchValue.Raw | null;
        searchField?: SearchField.Raw | null;
        q?: string | null;
        ids?: RecordId.Raw[] | null;
    }
}

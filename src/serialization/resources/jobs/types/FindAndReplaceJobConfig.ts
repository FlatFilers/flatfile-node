/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Flatfile from "../../../../api";
import * as core from "../../../../core";
import { Filter } from "../../commons/types/Filter";
import { FilterField } from "../../commons/types/FilterField";
import { SearchValue } from "../../commons/types/SearchValue";
import { SearchField } from "../../commons/types/SearchField";
import { RecordId } from "../../commons/types/RecordId";
import { CellValueUnion } from "../../records/types/CellValueUnion";

export const FindAndReplaceJobConfig: core.serialization.ObjectSchema<
    serializers.FindAndReplaceJobConfig.Raw,
    Flatfile.FindAndReplaceJobConfig
> = core.serialization.object({
    filter: Filter.optional(),
    filterField: FilterField.optional(),
    searchValue: SearchValue.optional(),
    searchField: SearchField.optional(),
    q: core.serialization.string().optional(),
    ids: core.serialization.list(RecordId).optional(),
    find: CellValueUnion.optional(),
    replace: CellValueUnion.optional(),
    fieldKey: core.serialization.string(),
});

export declare namespace FindAndReplaceJobConfig {
    interface Raw {
        filter?: Filter.Raw | null;
        filterField?: FilterField.Raw | null;
        searchValue?: SearchValue.Raw | null;
        searchField?: SearchField.Raw | null;
        q?: string | null;
        ids?: RecordId.Raw[] | null;
        find?: CellValueUnion.Raw | null;
        replace?: CellValueUnion.Raw | null;
        fieldKey: string;
    }
}

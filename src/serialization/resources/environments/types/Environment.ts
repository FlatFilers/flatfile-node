/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Flatfile from "../../../../api";
import * as core from "../../../../core";
import { EnvironmentId } from "../../commons/types/EnvironmentId";
import { AccountId } from "../../commons/types/AccountId";
import { GuestAuthenticationEnum } from "./GuestAuthenticationEnum";

export const Environment: core.serialization.ObjectSchema<serializers.Environment.Raw, Flatfile.Environment> =
    core.serialization.object({
        id: EnvironmentId,
        accountId: AccountId,
        name: core.serialization.string(),
        isProd: core.serialization.boolean(),
        guestAuthentication: core.serialization.list(GuestAuthenticationEnum),
        features: core.serialization.record(core.serialization.string(), core.serialization.any()),
        metadata: core.serialization.record(core.serialization.string(), core.serialization.any()),
        translationsPath: core.serialization.string().optional(),
        namespaces: core.serialization.list(core.serialization.string()).optional(),
        languageOverride: core.serialization.string().optional(),
    });

export declare namespace Environment {
    interface Raw {
        id: EnvironmentId.Raw;
        accountId: AccountId.Raw;
        name: string;
        isProd: boolean;
        guestAuthentication: GuestAuthenticationEnum.Raw[];
        features: Record<string, any>;
        metadata: Record<string, any>;
        translationsPath?: string | null;
        namespaces?: string[] | null;
        languageOverride?: string | null;
    }
}

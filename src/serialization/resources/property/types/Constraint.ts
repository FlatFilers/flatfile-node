/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import { Flatfile } from "@fern-api/flatfile";
import * as core from "../../../../core";

export const Constraint: core.serialization.Schema<serializers.Constraint.Raw, Flatfile.Constraint> = core.serialization
    .union("type", {
        required: core.serialization.object({}),
        unique: core.serialization.lazyObject(async () => (await import("../../..")).UniqueConstraint),
        computed: core.serialization.object({}),
    })
    .transform<Flatfile.Constraint>({
        transform: (value) => {
            switch (value.type) {
                case "required":
                    return Flatfile.Constraint.required();
                case "unique":
                    return Flatfile.Constraint.unique(value);
                case "computed":
                    return Flatfile.Constraint.computed();
                default:
                    return Flatfile.Constraint._unknown(value);
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace Constraint {
    type Raw = Constraint.Required | Constraint.Unique | Constraint.Computed;

    interface Required {
        type: "required";
    }

    interface Unique extends serializers.UniqueConstraint.Raw {
        type: "unique";
    }

    interface Computed {
        type: "computed";
    }
}

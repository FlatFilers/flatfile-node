/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Flatfile from "../../../../api";
import * as core from "../../../../core";
import { StringProperty } from "./StringProperty";
import { NumberProperty } from "./NumberProperty";
import { BooleanProperty } from "./BooleanProperty";
import { DateProperty } from "./DateProperty";
import { EnumProperty } from "./EnumProperty";
import { ReferenceProperty } from "./ReferenceProperty";

export const Property: core.serialization.Schema<serializers.Property.Raw, Flatfile.Property> = core.serialization
    .union("type", {
        string: StringProperty,
        number: NumberProperty,
        boolean: BooleanProperty,
        date: DateProperty,
        enum: EnumProperty,
        reference: ReferenceProperty,
    })
    .transform<Flatfile.Property>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace Property {
    type Raw =
        | Property.String
        | Property.Number
        | Property.Boolean
        | Property.Date
        | Property.Enum
        | Property.Reference;

    interface String extends StringProperty.Raw {
        type: "string";
    }

    interface Number extends NumberProperty.Raw {
        type: "number";
    }

    interface Boolean extends BooleanProperty.Raw {
        type: "boolean";
    }

    interface Date extends DateProperty.Raw {
        type: "date";
    }

    interface Enum extends EnumProperty.Raw {
        type: "enum";
    }

    interface Reference extends ReferenceProperty.Raw {
        type: "reference";
    }
}

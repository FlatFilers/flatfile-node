/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Flatfile from "../../../../api/index";
import * as core from "../../../../core";
import { MessageRole } from "./MessageRole";
import { ThreadId } from "../../commons/types/ThreadId";

export const MessageApiUpdateData: core.serialization.ObjectSchema<
    serializers.MessageApiUpdateData.Raw,
    Flatfile.MessageApiUpdateData
> = core.serialization.object({
    messageId: core.serialization.string().optional(),
    content: core.serialization.record(core.serialization.string(), core.serialization.any()).optional(),
    parts: core.serialization
        .list(core.serialization.record(core.serialization.string(), core.serialization.any()))
        .optional(),
    annotations: core.serialization
        .list(core.serialization.record(core.serialization.string(), core.serialization.any()))
        .optional(),
    role: MessageRole.optional(),
    state: core.serialization.record(core.serialization.string(), core.serialization.any()).optional(),
    metadata: core.serialization.record(core.serialization.string(), core.serialization.any()).optional(),
    threadId: ThreadId.optional(),
});

export declare namespace MessageApiUpdateData {
    export interface Raw {
        messageId?: string | null;
        content?: Record<string, any> | null;
        parts?: Record<string, any>[] | null;
        annotations?: Record<string, any>[] | null;
        role?: MessageRole.Raw | null;
        state?: Record<string, any> | null;
        metadata?: Record<string, any> | null;
        threadId?: ThreadId.Raw | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Flatfile from "../../../../api/index";
import * as core from "../../../../core";
import { MessageId } from "../../commons/types/MessageId";
import { ThreadId } from "../../commons/types/ThreadId";
import { MessageRole } from "./MessageRole";

export const MessageModel: core.serialization.ObjectSchema<serializers.MessageModel.Raw, Flatfile.MessageModel> =
    core.serialization.object({
        id: MessageId,
        threadId: ThreadId,
        content: core.serialization.record(core.serialization.string(), core.serialization.any()),
        createdAt: core.serialization.date(),
        updatedAt: core.serialization.date(),
        role: MessageRole,
        state: core.serialization.record(core.serialization.string(), core.serialization.any()).optional(),
        metadata: core.serialization.record(core.serialization.string(), core.serialization.any()).optional(),
    });

export declare namespace MessageModel {
    export interface Raw {
        id: MessageId.Raw;
        threadId: ThreadId.Raw;
        content: Record<string, any>;
        createdAt: string;
        updatedAt: string;
        role: MessageRole.Raw;
        state?: Record<string, any> | null;
        metadata?: Record<string, any> | null;
    }
}

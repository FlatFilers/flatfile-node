/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../../index";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";
import * as stream from "stream";

export declare namespace Sheets {
    export interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-Disable-Hooks header */
        xDisableHooks?: "true";
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Disable-Hooks header */
        xDisableHooks?: "true";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Sheets {
    constructor(protected readonly _options: Sheets.Options = {}) {}

    /**
     * Returns sheets in a workbook
     *
     * @param {Flatfile.ListSheetsRequest} request
     * @param {Sheets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.sheets.list({
     *         workbookId: "us_wb_YOUR_ID"
     *     })
     */
    public list(
        request: Flatfile.ListSheetsRequest,
        requestOptions?: Sheets.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.ListSheetsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Flatfile.ListSheetsRequest,
        requestOptions?: Sheets.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.ListSheetsResponse>> {
        const { workbookId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["workbookId"] = workbookId;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                "/sheets",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.22.0",
                "User-Agent": "@flatfile/api/1.22.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ListSheetsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError("Timeout exceeded when calling GET /sheets.");
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns a sheet in a workbook
     *
     * @param {Flatfile.SheetId} sheetId - ID of sheet
     * @param {Sheets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.sheets.get("us_sh_YOUR_ID")
     */
    public get(
        sheetId: Flatfile.SheetId,
        requestOptions?: Sheets.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.SheetResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(sheetId, requestOptions));
    }

    private async __get(
        sheetId: Flatfile.SheetId,
        requestOptions?: Sheets.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.SheetResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/sheets/${encodeURIComponent(serializers.SheetId.jsonOrThrow(sheetId))}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.22.0",
                "User-Agent": "@flatfile/api/1.22.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.SheetResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError("Timeout exceeded when calling GET /sheets/{sheetId}.");
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes a specific sheet from a workbook
     *
     * @param {Flatfile.SheetId} sheetId - ID of sheet
     * @param {Sheets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await client.sheets.delete("us_sh_YOUR_ID")
     */
    public delete(
        sheetId: Flatfile.SheetId,
        requestOptions?: Sheets.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.Success> {
        return core.HttpResponsePromise.fromPromise(this.__delete(sheetId, requestOptions));
    }

    private async __delete(
        sheetId: Flatfile.SheetId,
        requestOptions?: Sheets.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.Success>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/sheets/${encodeURIComponent(serializers.SheetId.jsonOrThrow(sheetId))}`,
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.22.0",
                "User-Agent": "@flatfile/api/1.22.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.Success.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Flatfile.BadRequestError(
                        serializers.Errors.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case 404:
                    throw new Flatfile.NotFoundError(
                        serializers.Errors.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError("Timeout exceeded when calling DELETE /sheets/{sheetId}.");
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Creates a copy of a sheet including all its data within the same workbook
     *
     * @param {Flatfile.SheetId} sheetId - ID of sheet to duplicate
     * @param {Flatfile.DuplicateSheetRequest} request
     * @param {Sheets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await client.sheets.duplicateSheet("us_sh_YOUR_ID", {
     *         name: "Copy of Contacts",
     *         slug: "contacts-copy"
     *     })
     */
    public duplicateSheet(
        sheetId: Flatfile.SheetId,
        request: Flatfile.DuplicateSheetRequest = {},
        requestOptions?: Sheets.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.SheetResponse> {
        return core.HttpResponsePromise.fromPromise(this.__duplicateSheet(sheetId, request, requestOptions));
    }

    private async __duplicateSheet(
        sheetId: Flatfile.SheetId,
        request: Flatfile.DuplicateSheetRequest = {},
        requestOptions?: Sheets.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.SheetResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/sheets/${encodeURIComponent(serializers.SheetId.jsonOrThrow(sheetId))}/duplicate`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.22.0",
                "User-Agent": "@flatfile/api/1.22.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.DuplicateSheetRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.SheetResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Flatfile.BadRequestError(
                        serializers.Errors.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case 404:
                    throw new Flatfile.NotFoundError(
                        serializers.Errors.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError(
                    "Timeout exceeded when calling POST /sheets/{sheetId}/duplicate.",
                );
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Trigger data hooks and validation to run on a sheet
     *
     * @param {Flatfile.SheetId} sheetId - ID of sheet
     * @param {Sheets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await client.sheets.validate("us_sh_YOUR_ID")
     */
    public validate(
        sheetId: Flatfile.SheetId,
        requestOptions?: Sheets.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.Success> {
        return core.HttpResponsePromise.fromPromise(this.__validate(sheetId, requestOptions));
    }

    private async __validate(
        sheetId: Flatfile.SheetId,
        requestOptions?: Sheets.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.Success>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/sheets/${encodeURIComponent(serializers.SheetId.jsonOrThrow(sheetId))}/validate`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.22.0",
                "User-Agent": "@flatfile/api/1.22.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.Success.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Flatfile.BadRequestError(
                        serializers.Errors.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case 404:
                    throw new Flatfile.NotFoundError(
                        serializers.Errors.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError("Timeout exceeded when calling POST /sheets/{sheetId}/validate.");
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns records from a sheet in a workbook as a csv file
     */
    public getRecordsAsCsv(
        sheetId: Flatfile.SheetId,
        request: Flatfile.GetRecordsCsvRequest = {},
        requestOptions?: Sheets.RequestOptions,
    ): core.HttpResponsePromise<stream.Readable> {
        return core.HttpResponsePromise.fromPromise(this.__getRecordsAsCsv(sheetId, request, requestOptions));
    }

    private async __getRecordsAsCsv(
        sheetId: Flatfile.SheetId,
        request: Flatfile.GetRecordsCsvRequest = {},
        requestOptions?: Sheets.RequestOptions,
    ): Promise<core.WithRawResponse<stream.Readable>> {
        const {
            versionId,
            commitId,
            sinceVersionId,
            sinceCommitId,
            sortField,
            sortDirection,
            filter,
            filterField,
            searchValue,
            searchField,
            ids,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (versionId != null) {
            _queryParams["versionId"] = versionId;
        }

        if (commitId != null) {
            _queryParams["commitId"] = commitId;
        }

        if (sinceVersionId != null) {
            _queryParams["sinceVersionId"] = sinceVersionId;
        }

        if (sinceCommitId != null) {
            _queryParams["sinceCommitId"] = sinceCommitId;
        }

        if (sortField != null) {
            _queryParams["sortField"] = sortField;
        }

        if (sortDirection != null) {
            _queryParams["sortDirection"] = serializers.SortDirection.jsonOrThrow(sortDirection, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (filter != null) {
            _queryParams["filter"] = serializers.Filter.jsonOrThrow(filter, { unrecognizedObjectKeys: "strip" });
        }

        if (filterField != null) {
            _queryParams["filterField"] = filterField;
        }

        if (searchValue != null) {
            _queryParams["searchValue"] = searchValue;
        }

        if (searchField != null) {
            _queryParams["searchField"] = searchField;
        }

        if (ids != null) {
            if (Array.isArray(ids)) {
                _queryParams["ids"] = ids.map((item) =>
                    serializers.RecordId.jsonOrThrow(item, { unrecognizedObjectKeys: "strip" }),
                );
            } else {
                _queryParams["ids"] = ids;
            }
        }

        const _response = await (this._options.fetcher ?? core.fetcher)<stream.Readable>({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/sheets/${encodeURIComponent(serializers.SheetId.jsonOrThrow(sheetId))}/download`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.22.0",
                "User-Agent": "@flatfile/api/1.22.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            responseType: "streaming",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError("Timeout exceeded when calling GET /sheets/{sheetId}/download.");
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns counts of records from a sheet
     *
     * @param {Flatfile.SheetId} sheetId - ID of sheet
     * @param {Flatfile.GetRecordCountsRequest} request
     * @param {Sheets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.sheets.getRecordCounts("us_sh_YOUR_ID", {
     *         versionId: "us_vr_YOUR_ID"
     *     })
     */
    public getRecordCounts(
        sheetId: Flatfile.SheetId,
        request: Flatfile.GetRecordCountsRequest = {},
        requestOptions?: Sheets.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.RecordCountsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getRecordCounts(sheetId, request, requestOptions));
    }

    private async __getRecordCounts(
        sheetId: Flatfile.SheetId,
        request: Flatfile.GetRecordCountsRequest = {},
        requestOptions?: Sheets.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.RecordCountsResponse>> {
        const {
            versionId,
            sinceVersionId,
            commitId,
            sinceCommitId,
            filter,
            filterField,
            searchValue,
            searchField,
            byField,
            q,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (versionId != null) {
            _queryParams["versionId"] = versionId;
        }

        if (sinceVersionId != null) {
            _queryParams["sinceVersionId"] = sinceVersionId;
        }

        if (commitId != null) {
            _queryParams["commitId"] = commitId;
        }

        if (sinceCommitId != null) {
            _queryParams["sinceCommitId"] = sinceCommitId;
        }

        if (filter != null) {
            _queryParams["filter"] = serializers.Filter.jsonOrThrow(filter, { unrecognizedObjectKeys: "strip" });
        }

        if (filterField != null) {
            _queryParams["filterField"] = filterField;
        }

        if (searchValue != null) {
            _queryParams["searchValue"] = searchValue;
        }

        if (searchField != null) {
            _queryParams["searchField"] = searchField;
        }

        if (byField != null) {
            _queryParams["byField"] = byField.toString();
        }

        if (q != null) {
            _queryParams["q"] = q;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/sheets/${encodeURIComponent(serializers.SheetId.jsonOrThrow(sheetId))}/counts`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.22.0",
                "User-Agent": "@flatfile/api/1.22.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.RecordCountsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError("Timeout exceeded when calling GET /sheets/{sheetId}/counts.");
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns all calculations for a sheet
     *
     * @param {Flatfile.SheetId} sheetId - ID of sheet
     * @param {Flatfile.GetCalculationsRequest} request
     * @param {Sheets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await client.sheets.getCalculations("sheetId")
     */
    public getCalculations(
        sheetId: Flatfile.SheetId,
        request: Flatfile.GetCalculationsRequest = {},
        requestOptions?: Sheets.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.ListCalculationsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getCalculations(sheetId, request, requestOptions));
    }

    private async __getCalculations(
        sheetId: Flatfile.SheetId,
        request: Flatfile.GetCalculationsRequest = {},
        requestOptions?: Sheets.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.ListCalculationsResponse>> {
        const {
            versionId,
            sinceVersionId,
            commitId,
            sinceCommitId,
            filter,
            filterField,
            searchValue,
            searchField,
            byField,
            q,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (versionId != null) {
            _queryParams["versionId"] = versionId;
        }

        if (sinceVersionId != null) {
            _queryParams["sinceVersionId"] = sinceVersionId;
        }

        if (commitId != null) {
            _queryParams["commitId"] = commitId;
        }

        if (sinceCommitId != null) {
            _queryParams["sinceCommitId"] = sinceCommitId;
        }

        if (filter != null) {
            _queryParams["filter"] = serializers.Filter.jsonOrThrow(filter, { unrecognizedObjectKeys: "strip" });
        }

        if (filterField != null) {
            _queryParams["filterField"] = filterField;
        }

        if (searchValue != null) {
            _queryParams["searchValue"] = searchValue;
        }

        if (searchField != null) {
            _queryParams["searchField"] = searchField;
        }

        if (byField != null) {
            _queryParams["byField"] = byField.toString();
        }

        if (q != null) {
            _queryParams["q"] = q;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/sheets/${encodeURIComponent(serializers.SheetId.jsonOrThrow(sheetId))}/calculations`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.22.0",
                "User-Agent": "@flatfile/api/1.22.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ListCalculationsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Flatfile.NotFoundError(
                        serializers.Errors.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError(
                    "Timeout exceeded when calling GET /sheets/{sheetId}/calculations.",
                );
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Adds a new field to a sheet
     *
     * @param {Flatfile.SheetId} sheetId - ID of sheet
     * @param {Flatfile.CreateFieldRequest} request
     * @param {Sheets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await client.sheets.addField("sheetId", {
     *         body: {
     *             type: "string",
     *             key: "key"
     *         }
     *     })
     */
    public addField(
        sheetId: Flatfile.SheetId,
        request: Flatfile.CreateFieldRequest,
        requestOptions?: Sheets.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.FieldConfigResponse> {
        return core.HttpResponsePromise.fromPromise(this.__addField(sheetId, request, requestOptions));
    }

    private async __addField(
        sheetId: Flatfile.SheetId,
        request: Flatfile.CreateFieldRequest,
        requestOptions?: Sheets.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.FieldConfigResponse>> {
        const { insertAtIndex, body: _body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (insertAtIndex != null) {
            _queryParams["insertAtIndex"] = insertAtIndex.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/sheets/${encodeURIComponent(serializers.SheetId.jsonOrThrow(sheetId))}/fields`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.22.0",
                "User-Agent": "@flatfile/api/1.22.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            body: serializers.Property.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.FieldConfigResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Flatfile.BadRequestError(
                        serializers.Errors.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case 404:
                    throw new Flatfile.NotFoundError(
                        serializers.Errors.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError("Timeout exceeded when calling POST /sheets/{sheetId}/fields.");
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Removes field from a sheet
     *
     * @param {Flatfile.SheetId} sheetId - ID of sheet
     * @param {string} fieldKey - Unique field key
     * @param {Sheets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await client.sheets.removeField("sheetId", "fieldKey")
     */
    public removeField(
        sheetId: Flatfile.SheetId,
        fieldKey: string,
        requestOptions?: Sheets.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.Success> {
        return core.HttpResponsePromise.fromPromise(this.__removeField(sheetId, fieldKey, requestOptions));
    }

    private async __removeField(
        sheetId: Flatfile.SheetId,
        fieldKey: string,
        requestOptions?: Sheets.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.Success>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/sheets/${encodeURIComponent(serializers.SheetId.jsonOrThrow(sheetId))}/fields/${encodeURIComponent(fieldKey)}`,
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.22.0",
                "User-Agent": "@flatfile/api/1.22.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.Success.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Flatfile.BadRequestError(
                        serializers.Errors.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case 404:
                    throw new Flatfile.NotFoundError(
                        serializers.Errors.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError(
                    "Timeout exceeded when calling DELETE /sheets/{sheetId}/fields/{fieldKey}.",
                );
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns the commit versions for a sheet
     *
     * @param {Flatfile.SheetId} sheetId - ID of sheet
     * @param {Flatfile.ListSheetCommitsRequest} request
     * @param {Sheets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.sheets.getSheetCommits("us_sh_YOUR_ID")
     */
    public getSheetCommits(
        sheetId: Flatfile.SheetId,
        request: Flatfile.ListSheetCommitsRequest = {},
        requestOptions?: Sheets.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.ListCommitsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getSheetCommits(sheetId, request, requestOptions));
    }

    private async __getSheetCommits(
        sheetId: Flatfile.SheetId,
        request: Flatfile.ListSheetCommitsRequest = {},
        requestOptions?: Sheets.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.ListCommitsResponse>> {
        const { completed } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (completed != null) {
            _queryParams["completed"] = completed.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/sheets/${encodeURIComponent(serializers.SheetId.jsonOrThrow(sheetId))}/commits`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.22.0",
                "User-Agent": "@flatfile/api/1.22.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ListCommitsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError("Timeout exceeded when calling GET /sheets/{sheetId}/commits.");
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Locks a sheet
     *
     * @param {Flatfile.SheetId} sheetId - ID of sheet
     * @param {Sheets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await client.sheets.lockSheet("us_sh_YOUR_ID")
     */
    public lockSheet(
        sheetId: Flatfile.SheetId,
        requestOptions?: Sheets.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.Success> {
        return core.HttpResponsePromise.fromPromise(this.__lockSheet(sheetId, requestOptions));
    }

    private async __lockSheet(
        sheetId: Flatfile.SheetId,
        requestOptions?: Sheets.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.Success>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/sheets/${encodeURIComponent(serializers.SheetId.jsonOrThrow(sheetId))}/lock`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.22.0",
                "User-Agent": "@flatfile/api/1.22.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.Success.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Flatfile.BadRequestError(
                        serializers.Errors.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case 404:
                    throw new Flatfile.NotFoundError(
                        serializers.Errors.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError("Timeout exceeded when calling POST /sheets/{sheetId}/lock.");
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Removes a lock from a sheet
     *
     * @param {Flatfile.SheetId} sheetId - ID of sheet
     * @param {Sheets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await client.sheets.unlockSheet("us_sh_YOUR_ID")
     */
    public unlockSheet(
        sheetId: Flatfile.SheetId,
        requestOptions?: Sheets.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.Success> {
        return core.HttpResponsePromise.fromPromise(this.__unlockSheet(sheetId, requestOptions));
    }

    private async __unlockSheet(
        sheetId: Flatfile.SheetId,
        requestOptions?: Sheets.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.Success>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/sheets/${encodeURIComponent(serializers.SheetId.jsonOrThrow(sheetId))}/unlock`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.22.0",
                "User-Agent": "@flatfile/api/1.22.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.Success.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Flatfile.BadRequestError(
                        serializers.Errors.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case 404:
                    throw new Flatfile.NotFoundError(
                        serializers.Errors.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError("Timeout exceeded when calling POST /sheets/{sheetId}/unlock.");
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns record cell values grouped by all fields in the sheet
     *
     * @param {Flatfile.SheetId} sheetId - ID of sheet
     * @param {Flatfile.GetFieldValuesRequest} request
     * @param {Sheets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.sheets.getCellValues("us_sh_YOUR_ID", {
     *         distinct: true,
     *         fieldKey: "firstName",
     *         sortField: "firstName",
     *         sortDirection: "asc",
     *         filter: "valid"
     *     })
     */
    public getCellValues(
        sheetId: Flatfile.SheetId,
        request: Flatfile.GetFieldValuesRequest,
        requestOptions?: Sheets.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.CellsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getCellValues(sheetId, request, requestOptions));
    }

    private async __getCellValues(
        sheetId: Flatfile.SheetId,
        request: Flatfile.GetFieldValuesRequest,
        requestOptions?: Sheets.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.CellsResponse>> {
        const {
            fieldKey,
            sortField,
            sortDirection,
            filter,
            filterField,
            pageSize,
            pageNumber,
            distinct,
            includeCounts,
            searchValue,
            q,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (fieldKey != null) {
            _queryParams["fieldKey"] = fieldKey;
        }

        if (sortField != null) {
            _queryParams["sortField"] = sortField;
        }

        if (sortDirection != null) {
            _queryParams["sortDirection"] = serializers.SortDirection.jsonOrThrow(sortDirection, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (filter != null) {
            _queryParams["filter"] = serializers.Filter.jsonOrThrow(filter, { unrecognizedObjectKeys: "strip" });
        }

        if (filterField != null) {
            _queryParams["filterField"] = filterField;
        }

        if (pageSize != null) {
            _queryParams["pageSize"] = pageSize.toString();
        }

        if (pageNumber != null) {
            _queryParams["pageNumber"] = pageNumber.toString();
        }

        _queryParams["distinct"] = distinct.toString();
        if (includeCounts != null) {
            _queryParams["includeCounts"] = includeCounts.toString();
        }

        if (searchValue != null) {
            _queryParams["searchValue"] = searchValue;
        }

        if (q != null) {
            _queryParams["q"] = q;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/sheets/${encodeURIComponent(serializers.SheetId.jsonOrThrow(sheetId))}/cells`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.22.0",
                "User-Agent": "@flatfile/api/1.22.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.CellsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError("Timeout exceeded when calling GET /sheets/{sheetId}/cells.");
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates Sheet
     *
     * @param {Flatfile.SheetId} sheetId - ID of sheet
     * @param {Flatfile.SheetUpdateRequest} request
     * @param {Sheets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Flatfile.BadRequestError}
     * @throws {@link Flatfile.NotFoundError}
     *
     * @example
     *     await client.sheets.updateSheet("us_sh_YOUR_ID", {
     *         name: "New Sheet Name",
     *         metadata: {
     *             "rowHeaders": [
     *                 6
     *             ]
     *         }
     *     })
     */
    public updateSheet(
        sheetId: Flatfile.SheetId,
        request: Flatfile.SheetUpdateRequest,
        requestOptions?: Sheets.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.SheetResponse> {
        return core.HttpResponsePromise.fromPromise(this.__updateSheet(sheetId, request, requestOptions));
    }

    private async __updateSheet(
        sheetId: Flatfile.SheetId,
        request: Flatfile.SheetUpdateRequest,
        requestOptions?: Sheets.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.SheetResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/sheets/${encodeURIComponent(serializers.SheetId.jsonOrThrow(sheetId))}`,
            ),
            method: "PATCH",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.22.0",
                "User-Agent": "@flatfile/api/1.22.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.SheetUpdateRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.SheetResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Flatfile.BadRequestError(
                        serializers.Errors.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case 404:
                    throw new Flatfile.NotFoundError(
                        serializers.Errors.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.FlatfileError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError("Timeout exceeded when calling PATCH /sheets/{sheetId}.");
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}

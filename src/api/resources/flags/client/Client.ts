/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Flags {
    export interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-Disable-Hooks header */
        xDisableHooks?: "true";
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Disable-Hooks header */
        xDisableHooks?: "true";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Flags {
    constructor(protected readonly _options: Flags.Options = {}) {}

    /**
     * Creates a new flag for the workbook
     *
     * @param {Flatfile.WorkbookId} workbookId - The workbook ID to manage flags for
     * @param {Flatfile.CreateFlagRequest} request
     * @param {Flags.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.flags.create("us_wb_YOUR_ID", {
     *         slug: "important",
     *         label: "Important",
     *         colorHex: "#0090FF"
     *     })
     */
    public create(
        workbookId: Flatfile.WorkbookId,
        request: Flatfile.CreateFlagRequest,
        requestOptions?: Flags.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.FlagResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(workbookId, request, requestOptions));
    }

    private async __create(
        workbookId: Flatfile.WorkbookId,
        request: Flatfile.CreateFlagRequest,
        requestOptions?: Flags.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.FlagResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/v1/workbooks/${encodeURIComponent(serializers.WorkbookId.jsonOrThrow(workbookId))}/flags`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.22.0",
                "User-Agent": "@flatfile/api/1.22.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.CreateFlagRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.FlagResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError(
                    "Timeout exceeded when calling POST /v1/workbooks/{workbookId}/flags.",
                );
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Gets all flags for the workbook
     *
     * @param {Flatfile.WorkbookId} workbookId - The workbook ID to manage flags for
     * @param {Flags.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.flags.list("us_wb_YOUR_ID")
     */
    public list(
        workbookId: Flatfile.WorkbookId,
        requestOptions?: Flags.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.FlagResponse[]> {
        return core.HttpResponsePromise.fromPromise(this.__list(workbookId, requestOptions));
    }

    private async __list(
        workbookId: Flatfile.WorkbookId,
        requestOptions?: Flags.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.FlagResponse[]>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/v1/workbooks/${encodeURIComponent(serializers.WorkbookId.jsonOrThrow(workbookId))}/flags`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.22.0",
                "User-Agent": "@flatfile/api/1.22.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.flags.list.Response.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError(
                    "Timeout exceeded when calling GET /v1/workbooks/{workbookId}/flags.",
                );
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Gets a specific flag by its slug
     *
     * @param {Flatfile.WorkbookId} workbookId - The workbook ID to manage flags for
     * @param {string} slug - The flag slug to retrieve
     * @param {Flags.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.flags.get("us_wb_YOUR_ID", "important")
     */
    public get(
        workbookId: Flatfile.WorkbookId,
        slug: string,
        requestOptions?: Flags.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.FlagResponse | undefined> {
        return core.HttpResponsePromise.fromPromise(this.__get(workbookId, slug, requestOptions));
    }

    private async __get(
        workbookId: Flatfile.WorkbookId,
        slug: string,
        requestOptions?: Flags.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.FlagResponse | undefined>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/v1/workbooks/${encodeURIComponent(serializers.WorkbookId.jsonOrThrow(workbookId))}/flags/${encodeURIComponent(slug)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.22.0",
                "User-Agent": "@flatfile/api/1.22.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.flags.get.Response.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError(
                    "Timeout exceeded when calling GET /v1/workbooks/{workbookId}/flags/{slug}.",
                );
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates an existing flag
     *
     * @param {Flatfile.WorkbookId} workbookId - The workbook ID to manage flags for
     * @param {string} slug - The flag slug to update
     * @param {Flatfile.UpdateFlagRequest} request
     * @param {Flags.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.flags.update("us_wb_YOUR_ID", "important", {
     *         label: "Updated Important",
     *         colorHex: "#30A46C"
     *     })
     */
    public update(
        workbookId: Flatfile.WorkbookId,
        slug: string,
        request: Flatfile.UpdateFlagRequest,
        requestOptions?: Flags.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.FlagResponse> {
        return core.HttpResponsePromise.fromPromise(this.__update(workbookId, slug, request, requestOptions));
    }

    private async __update(
        workbookId: Flatfile.WorkbookId,
        slug: string,
        request: Flatfile.UpdateFlagRequest,
        requestOptions?: Flags.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.FlagResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/v1/workbooks/${encodeURIComponent(serializers.WorkbookId.jsonOrThrow(workbookId))}/flags/${encodeURIComponent(slug)}`,
            ),
            method: "PATCH",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.22.0",
                "User-Agent": "@flatfile/api/1.22.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.UpdateFlagRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.FlagResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError(
                    "Timeout exceeded when calling PATCH /v1/workbooks/{workbookId}/flags/{slug}.",
                );
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes a flag
     *
     * @param {Flatfile.WorkbookId} workbookId - The workbook ID to manage flags for
     * @param {string} slug - The flag slug to delete
     * @param {Flags.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.flags.delete("us_wb_YOUR_ID", "important")
     */
    public delete(
        workbookId: Flatfile.WorkbookId,
        slug: string,
        requestOptions?: Flags.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.Success> {
        return core.HttpResponsePromise.fromPromise(this.__delete(workbookId, slug, requestOptions));
    }

    private async __delete(
        workbookId: Flatfile.WorkbookId,
        slug: string,
        requestOptions?: Flags.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.Success>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/v1/workbooks/${encodeURIComponent(serializers.WorkbookId.jsonOrThrow(workbookId))}/flags/${encodeURIComponent(slug)}`,
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.22.0",
                "User-Agent": "@flatfile/api/1.22.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.Success.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError(
                    "Timeout exceeded when calling DELETE /v1/workbooks/{workbookId}/flags/{slug}.",
                );
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Performs bulk flag operations on records
     *
     * @param {Flatfile.WorkbookId} workbookId - The workbook ID to manage flags for
     * @param {Flatfile.BulkMutateFlagsRequest} request
     * @param {Flags.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.flags.bulkMutate("us_wb_YOUR_ID", {
     *         operation: "apply",
     *         slug: "important",
     *         flag: {
     *             label: "Important",
     *             colorHex: "#0090FF"
     *         },
     *         snapshotLabel: "Before important flag application"
     *     })
     *
     * @example
     *     await client.flags.bulkMutate("us_wb_YOUR_ID", {
     *         operation: "delete",
     *         slug: "important",
     *         exceptions: ["rec_123", "rec_456"]
     *     })
     */
    public bulkMutate(
        workbookId: Flatfile.WorkbookId,
        request: Flatfile.BulkMutateFlagsRequest,
        requestOptions?: Flags.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.BulkMutateFlagsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__bulkMutate(workbookId, request, requestOptions));
    }

    private async __bulkMutate(
        workbookId: Flatfile.WorkbookId,
        request: Flatfile.BulkMutateFlagsRequest,
        requestOptions?: Flags.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.BulkMutateFlagsResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/v1/workbooks/${encodeURIComponent(serializers.WorkbookId.jsonOrThrow(workbookId))}/flags/bulk-mutate`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.22.0",
                "User-Agent": "@flatfile/api/1.22.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.BulkMutateFlagsRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.BulkMutateFlagsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError(
                    "Timeout exceeded when calling POST /v1/workbooks/{workbookId}/flags/bulk-mutate.",
                );
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}

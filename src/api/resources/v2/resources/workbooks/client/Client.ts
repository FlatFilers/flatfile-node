/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments-v2";
import * as core from "../../../../../../core-v2";
import * as FlatfileV2 from "../../../../../index";
import * as serializers from "../../../../../../serialization-v2/index";
import urlJoin from "url-join";
import * as errors from "../../../../../../errors-v2/index";

export declare namespace Workbooks {
    export interface Options {
        environment?: core.Supplier<environments.FlatfileV2Environment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Override the X-Disable-Hooks header */
        xDisableHooks?: "true";
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Disable-Hooks header */
        xDisableHooks?: "true";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Workbooks {
    constructor(protected readonly _options: Workbooks.Options) {}

    /**
     * Create multiple workbooks in bulk with a shared base configuration
     *
     * @param {FlatfileV2.v2.BulkCreateWorkbooksRequest} request
     * @param {Workbooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link FlatfileV2.BadRequestError}
     *
     * @example
     *     await client.v2.workbooks.bulkCreate({
     *         spaceId: "spaceId",
     *         config: {
     *             sheets: [{
     *                     name: "name",
     *                     fields: [{
     *                             "key": "value"
     *                         }, {
     *                             "key": "value"
     *                         }]
     *                 }, {
     *                     name: "name",
     *                     fields: [{
     *                             "key": "value"
     *                         }, {
     *                             "key": "value"
     *                         }]
     *                 }]
     *         },
     *         workbooks: [{}, {}]
     *     })
     */
    public bulkCreate(
        request: FlatfileV2.v2.BulkCreateWorkbooksRequest,
        requestOptions?: Workbooks.RequestOptions,
    ): core.HttpResponsePromise<FlatfileV2.v2.BulkCreateWorkbooksResponse> {
        return core.HttpResponsePromise.fromPromise(this.__bulkCreate(request, requestOptions));
    }

    private async __bulkCreate(
        request: FlatfileV2.v2.BulkCreateWorkbooksRequest,
        requestOptions?: Workbooks.RequestOptions,
    ): Promise<core.WithRawResponse<FlatfileV2.v2.BulkCreateWorkbooksResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileV2Environment.Production,
                "/v2-alpha/workbooks/bulk-create",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.v2.BulkCreateWorkbooksRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.v2.BulkCreateWorkbooksResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new FlatfileV2.BadRequestError(
                        serializers.Errors.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.FlatfileV2Error({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileV2Error({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileV2TimeoutError(
                    "Timeout exceeded when calling POST /v2-alpha/workbooks/bulk-create.",
                );
            case "unknown":
                throw new errors.FlatfileV2Error({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update the lock status of multiple workbooks at once
     *
     * @param {FlatfileV2.v2.BulkUpdateLockStatusRequest} request
     * @param {Workbooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link FlatfileV2.BadRequestError}
     *
     * @example
     *     await client.v2.workbooks.bulkUpdateLockStatus({
     *         spaceId: "spaceId",
     *         workbookIds: ["workbookIds", "workbookIds"],
     *         status: true
     *     })
     */
    public bulkUpdateLockStatus(
        request: FlatfileV2.v2.BulkUpdateLockStatusRequest,
        requestOptions?: Workbooks.RequestOptions,
    ): core.HttpResponsePromise<FlatfileV2.Success> {
        return core.HttpResponsePromise.fromPromise(this.__bulkUpdateLockStatus(request, requestOptions));
    }

    private async __bulkUpdateLockStatus(
        request: FlatfileV2.v2.BulkUpdateLockStatusRequest,
        requestOptions?: Workbooks.RequestOptions,
    ): Promise<core.WithRawResponse<FlatfileV2.Success>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileV2Environment.Production,
                "/v2-alpha/workbooks/bulk-update-lock-status",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.v2.BulkUpdateLockStatusRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.Success.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new FlatfileV2.BadRequestError(
                        serializers.Errors.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.FlatfileV2Error({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileV2Error({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileV2TimeoutError(
                    "Timeout exceeded when calling POST /v2-alpha/workbooks/bulk-update-lock-status.",
                );
            case "unknown":
                throw new errors.FlatfileV2Error({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}

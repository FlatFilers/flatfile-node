/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments-v2";
import * as core from "../../../../../../core-v2";
import * as FlatfileV2 from "../../../../../index";
import * as serializers from "../../../../../../serialization-v2/index";
import urlJoin from "url-join";
import * as errors from "../../../../../../errors-v2/index";
import { toJson } from "../../../../../../core-v2/json";

export declare namespace Records {
    export interface Options {
        environment?: core.Supplier<environments.FlatfileV2Environment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Override the X-Disable-Hooks header */
        xDisableHooks?: "true";
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Disable-Hooks header */
        xDisableHooks?: "true";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Records {
    constructor(protected readonly _options: Records.Options) {}

    /**
     * Reset (truncate) all sheets in a workbook
     *
     * @param {FlatfileV2.WorkbookId} workbookId - ID of workbook to reset
     * @param {FlatfileV2.v2.ResetWorkbookRequest} request
     * @param {Records.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link FlatfileV2.BadRequestError}
     *
     * @example
     *     await client.v2.records.resetWorkbook("workbookId")
     */
    public resetWorkbook(
        workbookId: FlatfileV2.WorkbookId,
        request: FlatfileV2.v2.ResetWorkbookRequest = {},
        requestOptions?: Records.RequestOptions,
    ): core.HttpResponsePromise<FlatfileV2.Success> {
        return core.HttpResponsePromise.fromPromise(this.__resetWorkbook(workbookId, request, requestOptions));
    }

    private async __resetWorkbook(
        workbookId: FlatfileV2.WorkbookId,
        request: FlatfileV2.v2.ResetWorkbookRequest = {},
        requestOptions?: Records.RequestOptions,
    ): Promise<core.WithRawResponse<FlatfileV2.Success>> {
        const { snapshot } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (snapshot != null) {
            _queryParams["snapshot"] = snapshot.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileV2Environment.Production,
                `/v2-alpha/workbooks/${encodeURIComponent(serializers.WorkbookId.jsonOrThrow(workbookId))}/reset`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.Success.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new FlatfileV2.BadRequestError(
                        serializers.Errors.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.FlatfileV2Error({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileV2Error({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileV2TimeoutError(
                    "Timeout exceeded when calling POST /v2-alpha/workbooks/{workbookId}/reset.",
                );
            case "unknown":
                throw new errors.FlatfileV2Error({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Reset (truncate) a specific sheet
     *
     * @param {FlatfileV2.SheetId} sheetId - ID of sheet to reset
     * @param {FlatfileV2.v2.ResetSheetRequest} request
     * @param {Records.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link FlatfileV2.BadRequestError}
     *
     * @example
     *     await client.v2.records.resetSheet("sheetId")
     */
    public resetSheet(
        sheetId: FlatfileV2.SheetId,
        request: FlatfileV2.v2.ResetSheetRequest = {},
        requestOptions?: Records.RequestOptions,
    ): core.HttpResponsePromise<FlatfileV2.Success> {
        return core.HttpResponsePromise.fromPromise(this.__resetSheet(sheetId, request, requestOptions));
    }

    private async __resetSheet(
        sheetId: FlatfileV2.SheetId,
        request: FlatfileV2.v2.ResetSheetRequest = {},
        requestOptions?: Records.RequestOptions,
    ): Promise<core.WithRawResponse<FlatfileV2.Success>> {
        const { snapshot } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (snapshot != null) {
            _queryParams["snapshot"] = snapshot.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileV2Environment.Production,
                `/v2-alpha/sheets/${encodeURIComponent(serializers.SheetId.jsonOrThrow(sheetId))}/reset`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.Success.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new FlatfileV2.BadRequestError(
                        serializers.Errors.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.FlatfileV2Error({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileV2Error({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileV2TimeoutError(
                    "Timeout exceeded when calling POST /v2-alpha/sheets/{sheetId}/reset.",
                );
            case "unknown":
                throw new errors.FlatfileV2Error({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Stream records in JSONL format with high performance
     *
     * @param {"jsonl"} format - Output format (currently only jsonl supported)
     * @param {FlatfileV2.v2.StreamRecordsRequest} request
     * @param {Records.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link FlatfileV2.BadRequestError}
     *
     * @example
     *     await client.v2.records.streamRecords("jsonl", {
     *         stream: true
     *     })
     */
    public streamRecords(
        format: "jsonl",
        request: FlatfileV2.v2.StreamRecordsRequest,
        requestOptions?: Records.RequestOptions,
    ): core.HttpResponsePromise<FlatfileV2.v2.StreamRecordsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__streamRecords(format, request, requestOptions));
    }

    private async __streamRecords(
        format: "jsonl",
        request: FlatfileV2.v2.StreamRecordsRequest,
        requestOptions?: Records.RequestOptions,
    ): Promise<core.WithRawResponse<FlatfileV2.v2.StreamRecordsResponse>> {
        const {
            sheetId,
            workbookId,
            sheetSlug,
            searchValue,
            searchField,
            sortField,
            sortDirection,
            includeLinks,
            includeMessages,
            includeMetadata,
            includeConfig,
            includeSheet,
            includeSheetSlug,
            noContext,
            stream,
            fields,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (sheetId != null) {
            _queryParams["sheetId"] = sheetId;
        }

        if (workbookId != null) {
            _queryParams["workbookId"] = workbookId;
        }

        if (sheetSlug != null) {
            _queryParams["sheetSlug"] = sheetSlug;
        }

        if (searchValue != null) {
            _queryParams["searchValue"] = searchValue;
        }

        if (searchField != null) {
            _queryParams["searchField"] = searchField;
        }

        if (sortField != null) {
            _queryParams["sortField"] = sortField;
        }

        if (sortDirection != null) {
            _queryParams["sortDirection"] = serializers.SortDirection.jsonOrThrow(sortDirection, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (includeLinks != null) {
            _queryParams["includeLinks"] = includeLinks.toString();
        }

        if (includeMessages != null) {
            _queryParams["includeMessages"] = includeMessages.toString();
        }

        if (includeMetadata != null) {
            _queryParams["includeMetadata"] = includeMetadata.toString();
        }

        if (includeConfig != null) {
            _queryParams["includeConfig"] = includeConfig.toString();
        }

        if (includeSheet != null) {
            _queryParams["includeSheet"] = includeSheet.toString();
        }

        if (includeSheetSlug != null) {
            _queryParams["includeSheetSlug"] = includeSheetSlug.toString();
        }

        if (noContext != null) {
            _queryParams["noContext"] = noContext.toString();
        }

        _queryParams["stream"] = stream.toString();
        if (fields != null) {
            _queryParams["fields"] = toJson(fields);
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileV2Environment.Production,
                `/v2-alpha/records.${encodeURIComponent(format)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.v2.StreamRecordsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new FlatfileV2.BadRequestError(
                        serializers.Errors.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.FlatfileV2Error({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileV2Error({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileV2TimeoutError(
                    "Timeout exceeded when calling GET /v2-alpha/records./{format}.",
                );
            case "unknown":
                throw new errors.FlatfileV2Error({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Write records in JSONL format with bulk operations
     *
     * @param {"jsonl"} format - Input format (currently only jsonl supported)
     * @param {FlatfileV2.v2.WriteRecordsRequest} request
     * @param {Records.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link FlatfileV2.BadRequestError}
     *
     * @example
     *     await client.v2.records.writeRecords("jsonl", {
     *         body: "string"
     *     })
     */
    public writeRecords(
        format: "jsonl",
        request: FlatfileV2.v2.WriteRecordsRequest,
        requestOptions?: Records.RequestOptions,
    ): core.HttpResponsePromise<FlatfileV2.v2.WriteRecordsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__writeRecords(format, request, requestOptions));
    }

    private async __writeRecords(
        format: "jsonl",
        request: FlatfileV2.v2.WriteRecordsRequest,
        requestOptions?: Records.RequestOptions,
    ): Promise<core.WithRawResponse<FlatfileV2.v2.WriteRecordsResponse>> {
        const { sheetId, workbookId, sheetSlug, truncate, snapshot, silent, for: for_, body: _body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (sheetId != null) {
            _queryParams["sheetId"] = sheetId;
        }

        if (workbookId != null) {
            _queryParams["workbookId"] = workbookId;
        }

        if (sheetSlug != null) {
            _queryParams["sheetSlug"] = sheetSlug;
        }

        if (truncate != null) {
            _queryParams["truncate"] = truncate.toString();
        }

        if (snapshot != null) {
            _queryParams["snapshot"] = snapshot.toString();
        }

        if (silent != null) {
            _queryParams["silent"] = silent.toString();
        }

        if (for_ != null) {
            _queryParams["for"] = for_;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileV2Environment.Production,
                `/v2-alpha/records.${encodeURIComponent(format)}`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            body: serializers.v2.records.writeRecords.Request.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.v2.WriteRecordsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new FlatfileV2.BadRequestError(
                        serializers.Errors.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.FlatfileV2Error({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileV2Error({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileV2TimeoutError(
                    "Timeout exceeded when calling POST /v2-alpha/records./{format}.",
                );
            case "unknown":
                throw new errors.FlatfileV2Error({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}

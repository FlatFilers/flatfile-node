/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Flatfile from "../../../..";

export interface GetRecordsRequest {
    versionId?: string;
    untilVersionId?: Flatfile.VersionId;
    sinceVersionId?: Flatfile.VersionId;
    sortField?: Flatfile.SortField;
    sortDirection?: Flatfile.SortDirection;
    filter?: Flatfile.Filter;
    /**
     * Name of field by which to filter records
     */
    filterField?: Flatfile.FilterField;
    searchValue?: Flatfile.SearchValue;
    searchField?: Flatfile.SearchField;
    /**
     * A list of record ids to fetch. If filter "all" is also specified,  then this is a list of record ids to exclude from the results.
     *
     */
    ids?: Flatfile.RecordId | Flatfile.RecordId[];
    /**
     * Number of records to return in a page (default 1000 if pageNumber included)
     */
    pageSize?: number;
    /**
     * Based on pageSize, which page of records to return
     */
    pageNumber?: number;
    /**
     * Include counts for the total records, valid records and records with errors
     */
    includeCounts?: boolean;
    /**
     * If true, linked records will be included in the results. Defaults to false.
     */
    includeLinks?: boolean;
    /**
     * Include error messages, defaults to false.
     */
    includeLMessages?: boolean;
    /**
     * if "for" is provided, the query parameters will be pulled from the event payload
     */
    for?: Flatfile.EventId;
}

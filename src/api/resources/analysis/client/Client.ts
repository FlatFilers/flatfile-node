/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../../index";
import { toJson } from "../../../../core/json";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export declare namespace Analysis {
    export interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-Disable-Hooks header */
        xDisableHooks?: "true";
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Disable-Hooks header */
        xDisableHooks?: "true";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Analysis {
    constructor(protected readonly _options: Analysis.Options = {}) {}

    /**
     * @param {Flatfile.ListAnalysisRequest} request
     * @param {Analysis.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.analysis.list({
     *         sheetId: "sheetId"
     *     })
     */
    public list(
        request: Flatfile.ListAnalysisRequest,
        requestOptions?: Analysis.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.AnalysisResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Flatfile.ListAnalysisRequest,
        requestOptions?: Analysis.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.AnalysisResponse>> {
        const { sheetId, fields, page } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["sheetId"] = sheetId;
        if (fields != null) {
            _queryParams["fields"] = toJson(fields);
        }

        if (page != null) {
            _queryParams["page"] = page.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                "/analysis",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.23.1-conditional-submit-routing.0",
                "User-Agent": "@flatfile/api/1.23.1-conditional-submit-routing.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.AnalysisResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError("Timeout exceeded when calling GET /analysis.");
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Flatfile.CreateAnalysisRequest} request
     * @param {Analysis.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.analysis.create({
     *         sheetId: "sheetId",
     *         environmentId: "environmentId",
     *         spaceId: "spaceId",
     *         workbookId: "workbookId",
     *         analyses: [{
     *                 field: "field",
     *                 result: {
     *                     "key": "value"
     *                 }
     *             }, {
     *                 field: "field",
     *                 result: {
     *                     "key": "value"
     *                 }
     *             }]
     *     })
     */
    public create(
        request: Flatfile.CreateAnalysisRequest,
        requestOptions?: Analysis.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.AnalysisResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Flatfile.CreateAnalysisRequest,
        requestOptions?: Analysis.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.AnalysisResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                "/analysis",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.23.1-conditional-submit-routing.0",
                "User-Agent": "@flatfile/api/1.23.1-conditional-submit-routing.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.CreateAnalysisRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.AnalysisResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError("Timeout exceeded when calling POST /analysis.");
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Flatfile.AnalysisId} analysisId
     * @param {Flatfile.GetAnalysisRequest} request
     * @param {Analysis.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.analysis.get("analysisId", {
     *         sheetId: "sheetId"
     *     })
     */
    public get(
        analysisId: Flatfile.AnalysisId,
        request: Flatfile.GetAnalysisRequest,
        requestOptions?: Analysis.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.AnalysisData> {
        return core.HttpResponsePromise.fromPromise(this.__get(analysisId, request, requestOptions));
    }

    private async __get(
        analysisId: Flatfile.AnalysisId,
        request: Flatfile.GetAnalysisRequest,
        requestOptions?: Analysis.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.AnalysisData>> {
        const { sheetId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["sheetId"] = sheetId;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/analysis/${encodeURIComponent(serializers.AnalysisId.jsonOrThrow(analysisId))}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.23.1-conditional-submit-routing.0",
                "User-Agent": "@flatfile/api/1.23.1-conditional-submit-routing.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.AnalysisData.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError("Timeout exceeded when calling GET /analysis/{analysisId}.");
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Flatfile.AnalysisId} analysisId
     * @param {Flatfile.DeleteAnalysisRequest} request
     * @param {Analysis.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.analysis.delete("analysisId", {
     *         sheetId: "sheetId"
     *     })
     */
    public delete(
        analysisId: Flatfile.AnalysisId,
        request: Flatfile.DeleteAnalysisRequest,
        requestOptions?: Analysis.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.Success> {
        return core.HttpResponsePromise.fromPromise(this.__delete(analysisId, request, requestOptions));
    }

    private async __delete(
        analysisId: Flatfile.AnalysisId,
        request: Flatfile.DeleteAnalysisRequest,
        requestOptions?: Analysis.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.Success>> {
        const { sheetId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["sheetId"] = sheetId;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/analysis/${encodeURIComponent(serializers.AnalysisId.jsonOrThrow(analysisId))}`,
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.23.1-conditional-submit-routing.0",
                "User-Agent": "@flatfile/api/1.23.1-conditional-submit-routing.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.Success.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError("Timeout exceeded when calling DELETE /analysis/{analysisId}.");
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Flatfile.DeleteAnalysesBySheetRequest} request
     * @param {Analysis.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.analysis.deleteBySheet({
     *         sheetId: "sheetId"
     *     })
     */
    public deleteBySheet(
        request: Flatfile.DeleteAnalysesBySheetRequest,
        requestOptions?: Analysis.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.DeleteAnalysesResponse> {
        return core.HttpResponsePromise.fromPromise(this.__deleteBySheet(request, requestOptions));
    }

    private async __deleteBySheet(
        request: Flatfile.DeleteAnalysesBySheetRequest,
        requestOptions?: Analysis.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.DeleteAnalysesResponse>> {
        const { sheetId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["sheetId"] = sheetId;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                "/analysis",
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.23.1-conditional-submit-routing.0",
                "User-Agent": "@flatfile/api/1.23.1-conditional-submit-routing.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.DeleteAnalysesResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError("Timeout exceeded when calling DELETE /analysis.");
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Flatfile.AnalysisId} analysisId
     * @param {string} suggestionId
     * @param {Flatfile.UpdateSuggestionRequest} request
     * @param {Analysis.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.analysis.updateSuggestion("analysisId", "suggestionId", {
     *         sheetId: "sheetId",
     *         suggestion: {
     *             "key": "value"
     *         }
     *     })
     */
    public updateSuggestion(
        analysisId: Flatfile.AnalysisId,
        suggestionId: string,
        request: Flatfile.UpdateSuggestionRequest,
        requestOptions?: Analysis.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.Success> {
        return core.HttpResponsePromise.fromPromise(
            this.__updateSuggestion(analysisId, suggestionId, request, requestOptions),
        );
    }

    private async __updateSuggestion(
        analysisId: Flatfile.AnalysisId,
        suggestionId: string,
        request: Flatfile.UpdateSuggestionRequest,
        requestOptions?: Analysis.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.Success>> {
        const { sheetId, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["sheetId"] = sheetId;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/analysis/${encodeURIComponent(serializers.AnalysisId.jsonOrThrow(analysisId))}/suggestions/${encodeURIComponent(suggestionId)}`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.23.1-conditional-submit-routing.0",
                "User-Agent": "@flatfile/api/1.23.1-conditional-submit-routing.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            body: serializers.UpdateSuggestionRequest.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.Success.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError(
                    "Timeout exceeded when calling POST /analysis/{analysisId}/suggestions/{suggestionId}.",
                );
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Flatfile.AnalysisId} analysisId
     * @param {string} suggestionId
     * @param {Flatfile.DeleteSuggestionRequest} request
     * @param {Analysis.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.analysis.deleteSuggestion("analysisId", "suggestionId", {
     *         sheetId: "sheetId"
     *     })
     */
    public deleteSuggestion(
        analysisId: Flatfile.AnalysisId,
        suggestionId: string,
        request: Flatfile.DeleteSuggestionRequest,
        requestOptions?: Analysis.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.Success> {
        return core.HttpResponsePromise.fromPromise(
            this.__deleteSuggestion(analysisId, suggestionId, request, requestOptions),
        );
    }

    private async __deleteSuggestion(
        analysisId: Flatfile.AnalysisId,
        suggestionId: string,
        request: Flatfile.DeleteSuggestionRequest,
        requestOptions?: Analysis.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.Success>> {
        const { sheetId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["sheetId"] = sheetId;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/analysis/${encodeURIComponent(serializers.AnalysisId.jsonOrThrow(analysisId))}/suggestions/${encodeURIComponent(suggestionId)}`,
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.23.1-conditional-submit-routing.0",
                "User-Agent": "@flatfile/api/1.23.1-conditional-submit-routing.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.Success.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError(
                    "Timeout exceeded when calling DELETE /analysis/{analysisId}/suggestions/{suggestionId}.",
                );
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}

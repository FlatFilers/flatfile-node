/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Flatfile from "../../../index";
import { toJson } from "../../../../core/json";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export declare namespace Transformations {
    export interface Options {
        environment?: core.Supplier<environments.FlatfileEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-Disable-Hooks header */
        xDisableHooks?: "true";
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Disable-Hooks header */
        xDisableHooks?: "true";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Transformations {
    constructor(protected readonly _options: Transformations.Options = {}) {}

    /**
     * @param {Flatfile.ListTransformationsRequest} request
     * @param {Transformations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.transformations.list({
     *         appId: "appId",
     *         matchKeys: ["matchKeys", "matchKeys"]
     *     })
     */
    public list(
        request: Flatfile.ListTransformationsRequest,
        requestOptions?: Transformations.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.TransformationsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Flatfile.ListTransformationsRequest,
        requestOptions?: Transformations.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.TransformationsResponse>> {
        const { appId, matchKeys, filterKeys, page, overlap } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["appId"] = appId;
        _queryParams["matchKeys"] = toJson(matchKeys);
        if (filterKeys != null) {
            _queryParams["filterKeys"] = toJson(filterKeys);
        }

        if (page != null) {
            _queryParams["page"] = page.toString();
        }

        if (overlap != null) {
            _queryParams["overlap"] = overlap.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                "/transformations",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.18.0",
                "User-Agent": "@flatfile/api/1.18.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.TransformationsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError("Timeout exceeded when calling GET /transformations.");
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Flatfile.TransformationCreateDto} request
     * @param {Transformations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.transformations.create({
     *         accountId: "accountId",
     *         environmentId: "environmentId",
     *         spaceId: "spaceId",
     *         appId: "appId",
     *         sheetId: "sheetId",
     *         keys: ["keys", "keys"],
     *         sourceKeys: ["sourceKeys", "sourceKeys"],
     *         destinationKeys: ["destinationKeys", "destinationKeys"],
     *         mutationCommand: "mutationCommand",
     *         config: {
     *             "key": "value"
     *         },
     *         type: "type"
     *     })
     */
    public create(
        request: Flatfile.TransformationCreateDto,
        requestOptions?: Transformations.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.TransformationResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Flatfile.TransformationCreateDto,
        requestOptions?: Transformations.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.TransformationResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                "/transformations",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.18.0",
                "User-Agent": "@flatfile/api/1.18.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.TransformationCreateDto.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.TransformationResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError("Timeout exceeded when calling POST /transformations.");
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Flatfile.TransformationId} transformationId - The id of the transformation to update
     * @param {Flatfile.TransformationCreateDto} request
     * @param {Transformations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.transformations.update("transformationId", {
     *         accountId: "accountId",
     *         environmentId: "environmentId",
     *         spaceId: "spaceId",
     *         appId: "appId",
     *         sheetId: "sheetId",
     *         keys: ["keys", "keys"],
     *         sourceKeys: ["sourceKeys", "sourceKeys"],
     *         destinationKeys: ["destinationKeys", "destinationKeys"],
     *         mutationCommand: "mutationCommand",
     *         config: {
     *             "key": "value"
     *         },
     *         type: "type"
     *     })
     */
    public update(
        transformationId: Flatfile.TransformationId,
        request: Flatfile.TransformationCreateDto,
        requestOptions?: Transformations.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.TransformationResponse> {
        return core.HttpResponsePromise.fromPromise(this.__update(transformationId, request, requestOptions));
    }

    private async __update(
        transformationId: Flatfile.TransformationId,
        request: Flatfile.TransformationCreateDto,
        requestOptions?: Transformations.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.TransformationResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/transformations/${encodeURIComponent(serializers.TransformationId.jsonOrThrow(transformationId))}`,
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.18.0",
                "User-Agent": "@flatfile/api/1.18.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.TransformationCreateDto.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.TransformationResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError(
                    "Timeout exceeded when calling PUT /transformations/{transformationId}.",
                );
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Flatfile.TransformationId} transformationId - The id of the transformation to delete
     * @param {Transformations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.transformations.delete("transformationId")
     */
    public delete(
        transformationId: Flatfile.TransformationId,
        requestOptions?: Transformations.RequestOptions,
    ): core.HttpResponsePromise<Flatfile.Success> {
        return core.HttpResponsePromise.fromPromise(this.__delete(transformationId, requestOptions));
    }

    private async __delete(
        transformationId: Flatfile.TransformationId,
        requestOptions?: Transformations.RequestOptions,
    ): Promise<core.WithRawResponse<Flatfile.Success>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.FlatfileEnvironment.Production,
                `/transformations/${encodeURIComponent(serializers.TransformationId.jsonOrThrow(transformationId))}`,
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Disable-Hooks": requestOptions?.xDisableHooks ?? this._options?.xDisableHooks ?? "true",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@flatfile/api",
                "X-Fern-SDK-Version": "1.18.0",
                "User-Agent": "@flatfile/api/1.18.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.Success.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FlatfileError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FlatfileError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.FlatfileTimeoutError(
                    "Timeout exceeded when calling DELETE /transformations/{transformationId}.",
                );
            case "unknown":
                throw new errors.FlatfileError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
